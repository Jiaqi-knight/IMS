(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: HDLExport.m *)
(* Context: *)
(* Author: Jan Lienemann *)
(* 
  Date: 23.12.2005, Freiburg *)
(* 
  Summary: This package exports an imsSystem to a HDL file *)
(* 
  Package Copyright: GNU GPL *)
(* Package Version: 0.1 *)
(* 
  Mathematica Version: 5.2 *)
(* History: *)
(* Keywords: *)
(* Sources: *)
(* 
  Warnings: *)
(* Limitations: *)
(* Discussion: *)
(* Requirements: *)
(* 
  Examples: *)
(* *)



(* Disclaimer *)

(* Whereever the GNU GPL is not applicable, 
  the software should be used in the same spirit. *)

(* Users of this code must verify correctness for their application. *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)

(* Disclaimer: *)

(* <one line to give the program's name and a brief idea of what it does.> *)
\

(* Copyright (C) <year> <name of author> *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)

BeginPackage["Imtek`Interfaces`HDLExport`",{"Imtek`System`"}];






(* constructors *)

(* selectors *)

(* predicates *)

(* functions *)

imsExportVerilogA::usage="imsExportVerilogA[filename_String, sys_imsSystem (, output matrix)] writes sys as Verilog A file.";



(* *)
(* options docu *)
(* *)

imsVerilogADisciplines::usage=
  "The Verilog A disciplines of inputs and outputs."



(* *)
(* error messages *)
(* *)



Begin["`Private`"];



(* *)
(* private imports *)
(* *)



(* *)
(* implementation part *)
(* *)

(* constructor *)
(* *)



(* *)
(* define your options *)
(* *)

Options[imsExportVerilogA]={imsVerilogADisciplines\[Rule]{"kinematic","Pos",
        "F"}}



(* selector *)
(* *)



(* predicates *)
(* *)



(* private functions *)
(* *)

imsListToString[l:{__},pre_String:"",sep_String:", "]:=
    Fold[StringJoin[#1,sep,#2]&,First[#],Drop[#,1]]&@imsListToStrings[l,pre];
imsListToString[{},___]:="";
imsListToStrings[l:{__},pre_String:"",
      post_String:""]:=(pre<>ToString[#]<>post)&/@l;
imsListToStrings[{},___]:={};


(* public functions *)
(* *)

imsExportVerilogA[filename_String, sys_imsSystem, outputmatrix_:Identity,
    opts___]:=Module[{k,d,m,l,om,DimC,DimU,DimF,discipl,discipl1,discipld,
      outstringlist,inoutstringlist,x,sys2,xstringlist,xstringlistp,
      xdotstringlist,xdotstringlistp,xdotdotstringlist,xdotdotstringlistp,
      parstringlist,inputstringlist,inputstringlistV,inputdotstringlistV,
      sysstr,omstr,outputstringlistV},
    
    {DimC,DimU,DimF}=imsGetSystemVariables[ sys ];
    If[outputmatrix===Identity,om=IdentityMatrix[imsGetSystemSize[ sys ]],
      om=outputmatrix];
    If[Head[(discipl=
                imsVerilogADisciplines/.{opts}/.Options[
                    imsExportVerilogA])[[1]]]=!=List,
      discipl={Table[discipl,{DimC}],Table[discipl,{DimF}],
          Table[discipl,{ Length[om]}]}];
    discipld=Flatten[discipl,1];
    discipl1=Union[discipld[[All,1]]];
    sys2=imsStiffnessToIdentity[sys];
    
    xstringlist=imsListToStrings[Range[DimU],"x"];
    xstringlistp = imsListToStrings[Range[DimU], "Pos(x",")"];
    xdotstringlist=imsListToStrings[Range[DimU],"xvel"];
    xdotstringlistp=imsListToStrings[Range[DimU],"Vel(xvel",")"];
    xdotdotstringlist=imsListToStrings[Range[DimU],"ddt(xvel",")"];
    xdotdotstringlistp=imsListToStrings[Range[DimU],"ddt(Vel(xvel","))"];
    outstringlist=imsListToStrings[Range[Length[om]],"out"];
    inoutstringlist=imsListToStrings[discipl1,"gnd"];
    inputstringlist=imsListToStrings[Range[DimF],"in"];
    parstringlist=imsListToStrings[Range[DimC],"par"];
    
    parstringlist1=Prepend[parstringlist,1];
    parstringlist0=Prepend[parstringlist,0];
    inputstringlistV=
      MapIndexed[
        discipld[[DimC+#2[[1]],3]]<>"("<>#1<>",gnd"<>
            discipld[[DimC+#2[[1]],1]]<>")"&,inputstringlist];
    inputdotstringlistV=
      MapIndexed[
        "ddt("<>discipld[[DimC+#2[[1]],3]]<>"("<>#1<>",gnd"<>
            discipld[[DimC+#2[[1]],1]]<>"))"&,inputstringlist];
    outputstringlistV=
      MapIndexed[
        discipld[[DimC+DimF+#2[[1]],2]]<>"("<>#1<>",gnd"<>
            discipld[[DimC+DimF+#2[[1]],1]]<>")"&,outstringlist];
    
    sysstr=-Plus@@(imsGetPolynomMatrixValues[
                  imsPolynomMatrixContractAllDerivatives[#,{parstringlist},
                    Null,{xstringlistp,xdotstringlistp,
                      xdotdotstringlistp},{inputstringlistV,
                      inputdotstringlistV}]]&/@
              imsGetSystemPolynomMatrices[sys2,Except[{{},{1}}]]);
    
    sysstr=
      StringReplace[
        StringJoin[
          MapIndexed[
            "    Pos(x"<>ToString[#2[[1]]]<>") <+ "<>ToString[CForm[#1]]<>
                ";\n"&,sysstr/.(0.)\[Rule]0
            ]],"\""->""];
    
    omstr=
      StringReplace[
        StringJoin[
          MapIndexed[
            "    "<>outputstringlistV[[#2[[1]]]]<>" <+ "<>ToString[CForm[#1]]<>
                ";\n"&,om.xstringlistp/.(0.)\[Rule]0
            ]],"\""->""];
    
    Export[filename,
      "`include \"constants.vams\"\n`include \"disciplines.vams\"\n\nmodule imsSystem("<>
        imsListToString[
          Join[parstringlist,inputstringlist,outstringlist,inoutstringlist]]<>
        ");\n"<>
        "  input "<>
        imsListToString[Join[parstringlist,inputstringlist]]<>";\n"<>
        
        "  output "<>imsListToString[outstringlist]<>";\n"<>
        "  inout "<>
        imsListToString[inoutstringlist]<>";\n"<>
        StringJoin[
          MapThread[
            "  "<>#1<>" "<>#2<>";\n"&,{Join[discipld[[All,1]],discipl1],
              Join[parstringlist,inputstringlist,outstringlist,
                inoutstringlist]}]]<>
        "  kinematic "<>
        imsListToString[xstringlist]<>";\n"<>
        
        If[imsSecondOrderQ[sys2],
          "  kinematic_v "<>imsListToString[xdotstringlist]<>";\n",""]<>
     
           "  analog begin\n"<>
        "    @(initial_step) begin\n"<>
      
          If[imsSecondOrderQ[sys2],
          StringJoin[
            "      Vel(xvel"<>ToString[#]<>") <+ 0;\n"&/@Range[DimU]],""]<>
  
              StringJoin[
          "      Pos(x"<>ToString[#]<>") <+ 0;\n"&/@Range[DimU]]<>
        "    end\n"<>

                If[imsSecondOrderQ[sys2],
          StringJoin[
            "    Vel(xvel"<>ToString[#]<>") <+ ddt(Pos(x"<>ToString[#]<>
                  "));\n"&/@Range[DimU]],""]<>sysstr<>omstr<>
        "  end\n"<>

                "endmodule","Text"]
    ]



(* representors *)
(* *)



(* Begin Private *)
End[]



(* Protect[] *)
EndPackage[] 




















