(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)







BeginPackage["Imtek`Interfaces`EasymeshPlotting`"]
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ ReadEasymesh, $Context ];
imsCreateObsoleteFunctionInterface[ PlotEasymesh, $Context ];
imsCreateObsoleteFunctionInterface[ PlotEasymeshDelaunay, $Context ];
imsCreateObsoleteFunctionInterface[ PlotEasymeshVoronoi, $Context ];

imsReadEasymesh::usage="imsReadEasymesh[fileName].";

imsPlotEasymesh::usage="imsPlotEasymesh[easymeshData].";

imsPlotEasymeshDelaunay::usage="imsPlotEasymeshDelaunay[easymeshData].";

imsPlotEasymeshVoronoi::usage="imsPlotEasymeshVoronoi[easymeshData].";

Begin["`Private`"]
Off[General::"spell",General::"spell1"];
Off[Read::"readn"];
Off[Part::"partd"];
Off[Graphics::"gpt"];



imsReadEasymesh[fileName_]:=
    Module[{easymeshNode,nodefile={},easymeshSide,sidefile={},easymeshElement,
        elementfile={}},
      
      easymeshNode=OpenRead[fileName<>".n"];
      Read[easymeshNode,{Number}];
      nodefile=ReadList[easymeshNode,{Number,Character,Real,Real,Number}];
      Close[easymeshNode];
      nodefile=Drop[Transpose[nodefile],{2,2}];
      nodefile\[LeftDoubleBracket]1\[RightDoubleBracket]+=1;
      
      easymeshSide=OpenRead[fileName<>".s"];
      Read[easymeshSide,{Number}];
      sidefile=
        ReadList[
          easymeshSide,{Number,Character,Number,Number,Number,Number,
            Number}];
      Close[easymeshSide];
      sidefile=Drop[Transpose[sidefile],{2}];
      sidefile\[LeftDoubleBracket]1\[RightDoubleBracket]+=1;
      sidefile\[LeftDoubleBracket]2\[RightDoubleBracket]+=1;
      sidefile\[LeftDoubleBracket]3\[RightDoubleBracket]+=1;
      sidefile\[LeftDoubleBracket]4\[RightDoubleBracket]+=1;
      sidefile\[LeftDoubleBracket]5\[RightDoubleBracket]+=1;
      
      easymeshElement=OpenRead[fileName<>".e"];
      Read[easymeshElement,{Number}];
      elementfile={};
      elementfile=
        ReadList[
          easymeshElement,{Number,Character,Number,Number,Number,Number,
            Number,Number,Number,Number,Number,Real,Real,Number}];
      Close[easymeshElement];
      elementfile=Drop[Transpose[elementfile],{2}];
      elementfile\[LeftDoubleBracket]1\[RightDoubleBracket]+=1;
      elementfile\[LeftDoubleBracket]2\[RightDoubleBracket]+=1;
      elementfile\[LeftDoubleBracket]3\[RightDoubleBracket]+=1;
      elementfile\[LeftDoubleBracket]4\[RightDoubleBracket]+=1;
      elementfile\[LeftDoubleBracket]5\[RightDoubleBracket]+=1; 
      elementfile\[LeftDoubleBracket]6\[RightDoubleBracket]+=1;
      elementfile\[LeftDoubleBracket]7\[RightDoubleBracket]+=1;
      elementfile\[LeftDoubleBracket]8\[RightDoubleBracket]+=1;
      elementfile\[LeftDoubleBracket]9\[RightDoubleBracket]+=1;
      elementfile\[LeftDoubleBracket]10\[RightDoubleBracket]+=1;
      
      Return[{Transpose[nodefile],Transpose[sidefile],
          Transpose[elementfile]}]
      ];





buildDelaunayObjects[easymeshData_List]:=
    Module[{delaunayLinienPlotFunkt,delaunayBoundaryNodesFunction,
        delaunayMesh,delaunayBoundaryNodes},
      
      delaunayLinienPlotFunkt[i_]:=
        Line[{easymeshData\[LeftDoubleBracket]1,
              easymeshData\[LeftDoubleBracket]2,i,2\[RightDoubleBracket],{2,
                3}\[RightDoubleBracket],
            easymeshData\[LeftDoubleBracket]1,
              easymeshData\[LeftDoubleBracket]2,i,3\[RightDoubleBracket],{2,
                3}\[RightDoubleBracket]}];
      
      delaunayBoundaryNodesFunction[i_]:=
        Line[easymeshData\[LeftDoubleBracket]1,i,{2,3}\[RightDoubleBracket]];
      
      delaunayMesh=
        delaunayLinienPlotFunkt/@
          Range[Length[
              easymeshData\[LeftDoubleBracket]2\[RightDoubleBracket]]];
      
      delaunayBoundaryNodes=
        delaunayBoundaryNodesFunction/@
          Append[easymeshData\[LeftDoubleBracket]2,
              Flatten[Position[
                  Transpose[
                      easymeshData\[LeftDoubleBracket]2\[RightDoubleBracket]]\
\[LeftDoubleBracket]5\[RightDoubleBracket],0]],{2,3}\[RightDoubleBracket],
            Flatten[easymeshData\[LeftDoubleBracket]2,
                Flatten[
                  Position[
                    Transpose[
                        easymeshData\[LeftDoubleBracket]2\[RightDoubleBracket]\
]\[LeftDoubleBracket]4\[RightDoubleBracket],0]],{2,3}\[RightDoubleBracket],1]
            ];
      
      Return[{delaunayMesh,delaunayBoundaryNodes}]
      ];



buildVoronoiObjects[easymeshData_List]:=
    Module[{voronoiLinienPlotFunkt,voronoiBoundaryNodesFunction,
        voronoiBoundaryPlotFunkt,voronoiMesh,voronoiBoundaryNodes,
        voronoiNeighbours,voronoiBoundaryPlot},
      
      voronoiLinienPlotFunkt[i_]:=
        Line[{easymeshData\[LeftDoubleBracket]3,
              easymeshData\[LeftDoubleBracket]2,i,4\[RightDoubleBracket],{11,
                12}\[RightDoubleBracket],
            easymeshData\[LeftDoubleBracket]3,
              easymeshData\[LeftDoubleBracket]2,i,5\[RightDoubleBracket],{11,
                12}\[RightDoubleBracket]}];
      
      voronoiBoundaryNodesFunction[i_]:=
        0.5 Plus@@
            easymeshData\[LeftDoubleBracket]1,i,{2,3}\[RightDoubleBracket];
      
      voronoiBoundaryPlotFunkt[i_]:=
        Line[{voronoiBoundaryNodes\[LeftDoubleBracket]i\[RightDoubleBracket],
            voronoiNeighbours\[LeftDoubleBracket]i\[RightDoubleBracket]}];
      
      voronoiMesh=
        voronoiLinienPlotFunkt/@
          Range[Length[
              easymeshData\[LeftDoubleBracket]2\[RightDoubleBracket]]];
      
      voronoiBoundaryNodes=
        voronoiBoundaryNodesFunction/@
          easymeshData\[LeftDoubleBracket]2,
            Flatten[Position[
                Transpose[
                    easymeshData\[LeftDoubleBracket]2\[RightDoubleBracket]]\
\[LeftDoubleBracket]5\[RightDoubleBracket],0]],{2,3}\[RightDoubleBracket];
      
      voronoiNeighbours=
        easymeshData\[LeftDoubleBracket]3,
          easymeshData\[LeftDoubleBracket]2,
            Flatten[Position[
                Transpose[
                    easymeshData\[LeftDoubleBracket]2\[RightDoubleBracket]]\
\[LeftDoubleBracket]5\[RightDoubleBracket],0]],4\[RightDoubleBracket],{11,
            12}\[RightDoubleBracket];
      
      voronoiBoundaryPlot=
        voronoiBoundaryPlotFunkt/@Range[Length[voronoiNeighbours]];
      
      Return[{voronoiMesh,voronoiBoundaryPlot}]
      ];



imsPlotEasymeshDelaunay[easymeshData_List]:=
    Module[{delaunayMesh,delaunayBoundaryNodes},
      
      {delaunayMesh,delaunayBoundaryNodes}=
        buildDelaunayObjects[easymeshData];
      
      Show[
        Graphics[{RGBColor[0,0,0],delaunayMesh},
          PlotLabel\[Rule]
            StringJoin["Delaunay mesh\n",
              ToString[
                Length[easymeshData\[LeftDoubleBracket]1\[RightDoubleBracket]]\
]," imsNodes"],TextStyle\[Rule]{FontSize\[Rule]8},
          AspectRatio\[Rule]Automatic]]
      
      ];

imsPlotEasymeshVoronoi[easymeshData_List]:=
    Module[{voronoiMesh,voronoiBoundaryPlot,delaunayMesh,
        delaunayBoundaryNodes},
      
      {voronoiMesh,voronoiBoundaryPlot}=buildVoronoiObjects[easymeshData];
      {delaunayMesh,delaunayBoundaryNodes}=
        buildDelaunayObjects[easymeshData];
      
      Show[
        Graphics[{RGBColor[1,0,0],voronoiMesh,delaunayBoundaryNodes,
            voronoiBoundaryPlot},
          PlotLabel\[Rule]
            StringJoin["Voronoi mesh\n",
              ToString[
                Length[easymeshData\[LeftDoubleBracket]1\[RightDoubleBracket]]\
]," Cells"],TextStyle\[Rule]{FontSize\[Rule]8},AspectRatio\[Rule]Automatic]];
      
      
      ];

imsPlotEasymesh[easymeshData_List]:=Module[
      {voronoiMesh,voronoiBoundaryPlot,delaunayMesh,delaunayBoundaryNodes},
      
      {voronoiMesh,voronoiBoundaryPlot}=buildVoronoiObjects[easymeshData];
      {delaunayMesh,delaunayBoundaryNodes}=
        buildDelaunayObjects[easymeshData];
      
      Show[
        Graphics[{RGBColor[0,0,0],delaunayMesh,RGBColor[1,0,0],voronoiMesh,
            RGBColor[1,0,0],voronoiBoundaryPlot},
          PlotLabel\[Rule]
            StringJoin["Delauny & Voronoi mesh\n",
              ToString[
                Length[easymeshData\[LeftDoubleBracket]1\[RightDoubleBracket]]\
]," imsNodes/Cells"],TextStyle\[Rule]{FontSize\[Rule]8},
          AspectRatio\[Rule]Automatic]]
      
      ];



End[]
EndPackage[]