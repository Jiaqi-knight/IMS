(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: BoundaryConditions.m *)
(* Context: *)
(* 
  Author:oliver ruebenkoenig and christian moosmann*)
(* 
  Date: 3.11.2005, Imtek, Freiburg *)
(* 
  Summary: This is the IMTEK template for writing a mathematica packages *)
(* 
  Package Copyright: GNU GPL *)
(* Package Version: 0.3.6 *)
(* 
  Mathematica Version: 5.2 *)
(* History:
    fixed bug: matrix returned was converted to numeric matrix;
  improved speed for imsDirichlet;
  support for list of boundary conditions and removal of boundary conditions \
in imsDirichlet;
  introduced imsLagrangianMulatilier;
  Change in docu
   *)
(* Keywords: *)
(* Sources: *)
(* Warnings: *)
(* Limitations: *)
(* 
  Discussion: *)
(* Requirements: *)
(* Examples: *)
(* *)



(* Start Package *)
BeginPackage["Imtek`BoundaryConditions`"];





(* *)
(* documentation *)
(* *)
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ Dirichlet, $Context ];
imsCreateObsoleteFunctionInterface[ DirichletReinsertion, $Context ];


(* functions *)

imsLagrangeMultipliers::usage = "imsLagrangeMultipliers[ { matrix, loadVector }, position, loadValues, posValues ] builds Lagrangian Multipliers into matrix and loadVector. Each entry in the position list extends the matrix by one equation and adds the corresponding value from loadValues list to the loadVector. posValues default to a list of the length of the position list with entry numeric 1."
\

imsDirichlet::usage = 
  "imsDirichlet[ { matrix, loadVector }, position, value ] builds boundary condtions of dirichlet type into a matrix and a load vector at position. It will be set to value. matrix can either be a full matrix or a sparse matrix. The matrix can also be an associative array. position must an Integer which is within the dimensions of the matrix." 

imsDirichletReinsertion::usage=
  "imsDirichletReinsertion[ position_List, value_List, solution_List ] returns a list where values are reinserted into solution at position."



(* *)
(* options docu *)
(* *)

System`imsRemoveDirichlets::usage=
  "Delete rows and columns corresponding to Dirichelt values."



(* *)
(* Error Messages *)
(* *)

imsDirichlet::"range"="pos is larger then matrix dimesions";





(* *)
(* implementation part *)
(* *)

SetAttributes[ imsLagrangeMultipliers, HoldFirst ];
SetAttributes[ imsDirichlet, HoldFirst ];



Begin["`Private`"];



Needs[ "Imtek`SparseUtils`" ];



(* *)
(* define your options *)
(* *)

Options[imsDirichlet]={imsRemoveDirichlets\[Rule]False}



(* selector *)



(* predicates *)



(* functions *)

imsLagrangeMultipliers[ { matrix_, load_ }, pos_, loadValues_ ] := 
  imsLagrangeMultipliers[ { matrix, load }, pos, loadValues, 
    Table[ 1., {Length[pos]} ] ]

imsLagrangeMultipliers[ { matrix_, load_ }, pos_, loadValues_, posValues_ ] := 
  Module[
    { dimR, dimC, n, rules, bm },
    load = Join[ load, loadValues ];
    
    { dimR, dimC } = Dimensions[ matrix ];
    n = Length[ loadValues ];
    
    rules =  
      Flatten[ Table[ List[ i, # ]& /@ pos[[ i ]], { i, Length[ pos ] } ], 
          1 ] \[Rule] Flatten[ posValues ];
    bm = SparseArray[ rules, { n, dimC } ];
    
    matrix = PadRight[ matrix, Dimensions[ matrix ] + n ];
    matrix[[ Range[ -n, -1 ], Range[ dimC ] ]] = bm;
    matrix[[ Range[ dimR ], Range[ -n, -1 ] ]] = Transpose[ bm ];
    ]

imsDirichlet[ { matrix_, loadVector_ }, pos_List,value_List, diagVal_:1., 
    opts___] :=Module[
      {removeDBC,pos2},
      
      (* Options *)
      
      removeDBC=imsRemoveDirichlets/.{opts}/.Options[imsDirichlet];
      
      (*check if pos out of matrix bound*)
      
      If[Max[pos]>Min[Dimensions[matrix]],Message[imsDirichlet::"range"]];
      
      loadVector-=matrix[[All,pos]].value;
      loadVector[[ pos ]] = value ;
      
      If[removeDBC,
        pos2=List/@pos;
        matrix=Transpose[Delete[Transpose[Delete[matrix,pos2]],pos2]];
        loadVector=Delete[loadVector,pos2];,
        matrix[[ All, pos ]] = 0;
        matrix[[ pos, All ]] = 0;
        (* (matrix[[ #, # ]] = diagVal)&/@pos; *)
        
        matrix+=SparseArray[
            Transpose[{pos,pos}]\[Rule]Table[diagVal,{Length[pos]}],
            Dimensions[matrix], 0 ];
        ];
      
      ] /;  MatrixQ[ matrix ]&&VectorQ[ loadVector ]

imsDirichlet[ { matrix_, loadVector_ }, pos_Integer, value_, diagVal_:1., 
      opts___ ]/;  MatrixQ[ matrix ]&&VectorQ[ loadVector ]:=
  
  imsDirichlet[ { matrix, loadVector }, { pos }, { value }, diagVal, opts ]

(*
  imsDirichlet[ { matrix_, loadVector_ }, pos_Integer, value_, 
      diagVal_:1., opts___ ] := Module[
        {removeDBC,pos2},
        
        (* Options *)
        
        removeDBC=imsRemoveDirichlets/.{opts}/.Options[imsDirichlet];
        
        (* check if pos out of matrix bound *)
        
        If[ pos > First[ Dimensions[ matrix ] ] && 
            pos > Last[ Dimensions[ matrix ] ],
          Message[imsDirichlet::"range"]
          ];
        
        loadVector -=matrix[[All,pos]] * value;
        loadVector[[ pos ]] = value;
        
        If[removeDBC,
          pos2=List/@pos;
          matrix=Transpose[Delete[Transpose[Delete[matrix,pos2]],pos2]];
          loadVector=Delete[loadVector,pos2];,
          matrix[[ All, pos ]] = 0.0;
          matrix[[ pos, All ]] = 0.0;
          matrix[[ pos, pos ]] = diagVal;
          ];
        
        ] /; MatrixQ[ matrix ] && VectorQ[ loadVector ]
  *)

imsDirichlet[ { matrix_, loadVector_ }, pos_Integer, value_, diagVal_:1. ] :=
  Module[
      { positionList, valueList },
      
      { positionList, valueList } = 
        Transpose[ Cases[ matrix, HoldPattern[ Rule[ List[ _, pos ], _ ] ]
              ]/. Rule[ List[ x_, y_ ], val_ ] \[Rule] { x ,val } 
          ];
      
      Do[ 
        loadVector[[ positionList[[ i ]] ]] -= valueList[[ i ]] * value, 
        { i, Length[ positionList ] }
        ];
      loadVector[[ pos ]] = value ;
      
      matrix = DeleteCases[ matrix, Rule[ List[ _, pos ], _ ]  ];
      matrix = DeleteCases[ matrix,  Rule[ List[ pos, _ ], _ ] ];
      matrix = Prepend[ matrix, Rule[ List[ pos, pos ], diagVal ] ];
      
      (* this is not the best way to check for a list of rules *)
      ] /; 
    imsSparseMatrixQ[ matrix ] && VectorQ[ loadVector ]


imsDirichlet[ { matrix_Symbol, loadVector_ }, pos_Integer, value_,
    diagVal_:1. ] := With[
      {},
      
      Do[
        loadVector[[i]] -= matrix[ i, pos ] * value;
        (* we might have undifined matrix[ x, y ] entries *)
        (* 
          and i set them to 0.0 *)
        
        loadVector[[i]] = loadVector[[i]] /. matrix[ ___ ] \[Rule] 0.0, {i , 
          Length[ loadVector ] } ];
      loadVector[[ pos ]] = value;
      
      Do[ 
        matrix[ pos, i ] = 0.0; matrix[ pos, i ]=.;
        matrix[ i, pos ] = 0.0; 
        matrix[ i, pos ] =. ,{ i, Length[ loadVector ]}
        ];
      matrix[ pos, pos ] = diagVal;
      
      ] /; VectorQ[ loadVector ]


imsDirichletReinsertion[ dirichletpos_List, dirichletval_List, 
    solution_List] :=
  Module[ {TestRange,test,length1,dirichlettemp,SolT1=solution,
      dpos=dirichletpos,dval=dirichletval},
    
    dpos=IntegerPart[dpos];
    TestRange=Range[dpos[[1]],Last[dpos]];
    
    While[Unequal[dval,{}],
      test=True;
      
      For[i=1,test,i++,
        If[(dpos[[i]]\[Equal]TestRange[[i]])&&(i<Length[dpos]),test=True;
          length1=i,
          
          If[(dpos[[i]]\[Equal]TestRange[[i]])&&(i==Length[dpos]),test=False;
            length1=i,test=False]
          ]
        ];
      
      dirichlettemp=Take[dval,length1];
      SolT1= 
        Flatten[Append[
            Flatten[Prepend[dirichlettemp,Take[SolT1,dpos[[1]]-1 ] ]],
            Drop[SolT1,dpos[[1]]-1 ] ] ];
      dval=Drop[dval,length1];
      dpos=Drop[dpos,length1];
      
      If[Unequal[dval,{}],
        TestRange=Range[dpos[[1]],Last[dpos]] ];
      ];
    SolT1
    ]



End[] (* of Begin Private *)



(* Protect[] (* anything *) *)
EndPackage[] 
