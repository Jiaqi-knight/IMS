(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: LumpedSystem.m *)
(* Context: *)
(* 
  Author:oliver ruebenkoenig, kai kratt *)
(* 
  Date: winter 2005/2006, Freiburg *)
(* 
  Summary: This is the IMTEK circuit element library *)
(* 
  Package Copyright: GNU GPL *)
(* Package Version: 0.1.5 *)
(* 
  Mathematica Version: 5.2 *)
(* History:
      oli: fixed for mma6.0;
   *)
(* added usage message for options *)
(* chaneged omega to I omega *)
(* 
  included new element: mutual inductance *)
(* 
  included new elements: controlled sources *)
(* 
  included new element: diode *)
(* Keywords: *)
(* Sources: *)
(* 
  Warnings: *)
(* Limitations: *)
(* Discussion: *)
(* Requirements: *)
(* 
  Examples: *)
(* *)



(* Disclaimer *)

(* Whereever the GNU GPL is not applicable, 
  the software should be used in the same spirit. *)

(* Users of this code must verify correctness for their application. *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)

(* Disclaimer: *)

(* <one line to give the program's name and a brief idea of what it does.> *)
\

(* Copyright (C) 2005-2006 Kai Kratt and Oliver Ruebenkoenig *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)

BeginPackage["Imtek`LumpedSystem`", "Imtek`Assembler`", 
    "Imtek`CircuitElementLibrary`", "Imtek`Nodes`", "Imtek`Graph`", 
    "Imtek`BoundaryConditions`", "Imtek`System`"];





(* *)
(* documentation *)
(* *)

(* constructors *)

imsLumpedOperator::usage="imsLumpedOperator[ lumpedElement ] returns an imsElementMatrix. A lumpedElement can be any element from the lumped element libraries or a user defined element.";\


imsMakeLumpedSystem::usage = \
"imsMakeLumpedSystem[ nexus_imsNexus, opts___ ] returns an imsSystem data structure. To each element in the nexus a LumpedOperator will be applied which will decide to which part of the imsSystem the element will contribute.";\


(* selectors *)

(* predicates *)

imsLumpedInertiaQ::usage = \
"imsLumpedInertiaQ[ expr ] returns True if expr is an inertia matrix element.";\


imsLumpedDampingQ::usage = \
"imsLumpedDampingQ[ expr ] returns True if expr is a damping matrix element.";\


imsLumpedStiffnessQ::usage = \
"imsLumpedStiffnessQ[ expr ] returns True if expr is a stiffness matrix element.";\


imsLumpedLoadQ::usage = \
"imsLumpedLoadQ[ expr ] returns True if expr is a load vector element.";

imsLumpedPotentialQ::usage = \
"imsLumpedPotentialQ[ expr ] returns True if expr is a potential element.";

imsLumpedConnectorQ::usage = \
"imsLumpedConnectorQ[ expr ] returns True if expr is a connector element.";

imsLumpedGroundQ::usage = \
"imsLumpedGroundQ[ expr ] returns True if expr is a ground element.";

imsLumpedVCVSQ::usage = \
"imsLumpedVCVSQ[ expr ] returns True if expr is a ground element.";

imsLumpedCCCSQ::usage = \
"imsLumpedCCCSQ[ expr ] returns True if expr is a ground element.";

imsLumpedCCVSQ::usage = \
"imsLumpedCCVSQ[ expr ] returns True if expr is a ground element.";

(* functions *)



(* *)
(* options docu *)
(* *)

imsAnalysisMethod::usage=
    "Option for imsMakeLumpedSystem. Possible values are: \!\(\*
    StyleBox[\"imsStationary\",\nFontSlant->\"Italic\"]\)\!\(\*
    StyleBox[\" \",\nFontSlant->\"Italic\"]\)for a static analysis, \!\(\*
    StyleBox[\"imsHarmonic\",\nFontSlant->\"Italic\"]\) for a harmonic analysis and \!\(\*
    StyleBox[\"imsTransient\",\nFontSlant->\"Italic\"]\) for a transient analysis. If none is specified, default is \!\(\*
    StyleBox[\"imsStationary\",\nFontSlant->\"Italic\"]\).";
  imsHarmonicSymbol::usage=
    "Option for imsMakeLumpedSystem. Is only needed for harmonic analysis. If none is specified, default is \!\(\*
    StyleBox[\"I\",\nFontSlant->\"Italic\"]\)\!\(\*
    StyleBox[\"*\",\nFontSlant->\"Italic\"]\)\!\(\*
    StyleBox[\"\[Omega]\",\nFontSlant->\"Italic\"]\).";



(* *)
(* error messages *)
(* *)

imsMakeLumpedSystem::"analysisMethod"="imsAnalysisMethod `1` unknown."



Begin["`Private`"];



(* *)
(* private imports *)
(* *)

If[$VersionNumber\[LessEqual]5.2,<<LinearAlgebra`MatrixManipulation`,Null];
If[$VersionNumber\[LessEqual]5.2,myBlockMatrix[x_]:=BlockMatrix[x],
    myBlockMatrix[x_]:=ArrayFlatten[x]];



(* *)
(* define your options *)
(* *)

Options[imsMakeLumpedSystem] = {imsAnalysisMethod \[Rule] "imsStationary", 
      imsHarmonicSymbol\[Rule] Automatic };



(* *)
(* implementation part *)
(* *)

(* constructor *)
(* *)

imsMakeLumpedSystem[ nexus_imsNexus, opts___ ] := 
  Module[ { analysisMethod, nexusLength, nexusElements, dampingMatrix, 
      elemsDamping, load, elemsLoad, loadFlatten, inertiaMatrix, 
      elemsInertia, stiffnessMatrix, elemsStiffness, lengthDamping, 
      fVariable, elemsVCVS, elemsCCCS, elemsCCVS },
    
    (* options definitions *)
    { analysisMethod, 
        harmonicSymbol } = { imsAnalysisMethod, imsHarmonicSymbol } /. 
          Flatten[ { opts } ] /. Options[imsMakeLumpedSystem];
    
    If[ harmonicSymbol === Automatic, fVariable = I * Global`\[Omega], 
      fVariable = harmonicSymbol ];
    
    (* element extraction *)
    
    nexusLength = Length[ imsGetNodes[ nexus ] ];
    nexusElements = imsGetElements[ nexus ];
    
    (* damping matrix - resistances *)
    
    dampingMatrix = Table[ 0, { nexusLength }, { nexusLength } ];
    elemsDamping = 
      imsLumpedOperator[ Select[ nexusElements, imsLumpedDampingQ ] ];
    imsAssemble[ elemsDamping, dampingMatrix];
    
    (* load vector - current sources *)
    
    load = Table[ 0, { nexusLength },{1} ];
    elemsLoad = imsLumpedOperator[ Select[ nexusElements, imsLumpedLoadQ ] ];
    imsAssemble[ elemsLoad, load ];
    
    loadFlatten = Flatten[ load ];
    
    (* voltage sources *)
    
    imsLagrangeMultipliers[ { dampingMatrix, 
            loadFlatten },  {imsGetIncidentsIds[ # ]}, { 
            imsGetValues[ # ]},{1,-1} ]& /@ 
      Select[ nexusElements, imsLumpedPotentialQ ];
    
    (* voltage controlled voltage source *)
    
    elemsVCVS=Select[ nexusElements, imsLumpedVCVSQ ];
    If [ Length[ elemsVCVS ] > 0,
          
          
          imsLagrangeMultipliers[ { dampingMatrix, 
              loadFlatten },  {imsGetIncidentsIds[ # ]}, { 0 },{0 , 0, 0, 
              0} ];
          lengthDamping = Length[ dampingMatrix ];
          
          dampingMatrix[[ lengthDamping,  
                imsGetIncidentsIds[ # ][[1]] ]] = -imsGetValues[#] ;
          dampingMatrix[[ lengthDamping,  imsGetIncidentsIds[ # ][[2]] ]] =
            imsGetValues[ #] ;
          
          dampingMatrix[[ lengthDamping,  imsGetIncidentsIds[ # ][[3]] ]] = 
            1 ;
          
          dampingMatrix[[ lengthDamping,  
                imsGetIncidentsIds[ # ][[4]] ]] =-1 ;
          dampingMatrix[[ imsGetIncidentsIds[ # ][[3]], lengthDamping ]] =1 ;
          
          dampingMatrix[[ imsGetIncidentsIds[ # ][[4]], 
                lengthDamping ]] =-1 ;,
          
          Null
          ] &/@ elemsVCVS;
    
    (* current controlled current source *)
    
    elemsCCCS=Select[ nexusElements, imsLumpedCCCSQ ];
    If [ Length[ elemsCCCS ] > 0,
          
          
          imsLagrangeMultipliers[ { dampingMatrix, 
              loadFlatten },  {imsGetIncidentsIds[ # ]}, { 0 },{0 , 0, 0, 
              0} ];
          lengthDamping = Length[ dampingMatrix ];
          dampingMatrix[[ imsGetIncidentsIds[ # ][[1]], lengthDamping ]] =1;
          dampingMatrix[[ imsGetIncidentsIds[ # ][[2]], lengthDamping ]] =-1;
          
          dampingMatrix[[ imsGetIncidentsIds[ # ][[3]], lengthDamping ]] =
            imsGetValues[ #] ;
          
          dampingMatrix[[ imsGetIncidentsIds[ # ][[4]], 
                lengthDamping ]] =-imsGetValues[ #] ;
          
          dampingMatrix[[ lengthDamping,  imsGetIncidentsIds[ # ][[1]] ]] =
            1 ;
          
          dampingMatrix[[ lengthDamping, 
                imsGetIncidentsIds[ # ][[2]] ]] = -1;,
          
          Null
          ] &/@ elemsCCCS;
    
    
    (* current controlled voltage source *)
    
    elemsCCVS = Select[ nexusElements, imsLumpedCCVSQ ];
    If[ Length[ elemsCCVS ] > 0,
          
          
          imsLagrangeMultipliers[ { dampingMatrix, 
              loadFlatten },  {imsGetIncidentsIds[ # ]}, { 0 },{ 0, 0, 0, 
              0} ];
          lengthDamping = Length[ dampingMatrix ];
          dampingMatrix[[ imsGetIncidentsIds[ # ][[3]], lengthDamping ]] = 1;
          
          dampingMatrix[[ imsGetIncidentsIds[ # ][[4]], 
                lengthDamping ]] = -1;
          
          dampingMatrix[[ lengthDamping,  imsGetIncidentsIds[ # ][[3]] ]] =
            1 ;
          
          dampingMatrix[[ lengthDamping,  
                imsGetIncidentsIds[ # ][[4]] ]] =-1 ;
          
          
          imsLagrangeMultipliers[ { dampingMatrix, 
              loadFlatten },  {imsGetIncidentsIds[ # ]}, { 0 },{ 0, 0, 0, 
              0} ];
          lengthDamping = Length[ dampingMatrix ];
          dampingMatrix[[ imsGetIncidentsIds[ # ][[1]], lengthDamping ]] = 1;
          
          dampingMatrix[[ imsGetIncidentsIds[ # ][[2]], 
                lengthDamping ]] = -1;
          
          dampingMatrix[[ lengthDamping,  imsGetIncidentsIds[ # ][[1]] ]] =
            1 ;
          
          dampingMatrix[[ lengthDamping,  
                imsGetIncidentsIds[ # ][[2]] ]] =-1 ;
          
          
          dampingMatrix[[ lengthDamping-1,  
                lengthDamping ]] = -imsGetValues[ #] ;,
          
          Null
          ] &/@ elemsCCVS;
    
    (* wires *)
    
    imsLagrangeMultipliers[ { dampingMatrix, 
            loadFlatten },  {imsGetIncidentsIds[ # ]}, {0}, { { 1, -1 } } ]& /@ 
      Select[nexusElements, imsLumpedConnectorQ ];
    
    (* lumped matrix elements short circuited when using stationary solution *)

        If[ analysisMethod === "imsStationary", 
      imsLagrangeMultipliers[ { dampingMatrix, 
                loadFlatten },  { # }, {0}, { { 1, -1 } } ]& /@ 
          Partition[ 
            Flatten[ 
              imsGetIncidentsIds[ 
                Select[nexusElements, imsLumpedStiffnessQ ] ] ],2];,
      Null;
      ];
    
    (* ground *)
    
    imsDirichlet[ { dampingMatrix, loadFlatten }, 
          imsGetIncidentsIds[ # ], {imsGetValues[ # ]}, 1 ]& /@ 
      Select[ nexusElements, imsLumpedGroundQ ];
    
    lengthDamping = Length[ dampingMatrix ];
    
    load = Partition[ loadFlatten, 1];
    
    (* create inertia and stiffness matrix *)
    Which[
      analysisMethod === "imsTransient" || analysisMethod === "imsHarmonic",
      
      (* inertia matrix - capacitances *)
      
      inertiaMatrix = Table[ 0, { lengthDamping }, { lengthDamping } ];
      elemsInertia = 
        imsLumpedOperator[ Select[ nexusElements, imsLumpedInertiaQ ] ];
      imsAssemble[ elemsInertia, inertiaMatrix ];
      
      (* stiffness matrix - inductances *)
      
      stiffnessMatrix = Table[ 0, { lengthDamping }, { lengthDamping } ];
      elemsStiffness = 
        imsLumpedOperator[  Select[ nexusElements, imsLumpedStiffnessQ ]];
      imsAssemble[ elemsStiffness, stiffnessMatrix ];
      ];
    
    (* return condition *)
    Which[
      (* imsTransient *)
      analysisMethod === "imsTransient",
      Return[ 
          imsMakeSystem[ load,  stiffnessMatrix,  dampingMatrix, 
            inertiaMatrix ] ];,
      
      (* imsHarmonic *)
      analysisMethod === "imsHarmonic",
      Return[ 
          imsMakeSystem[ load,  
            1/( fVariable ) * stiffnessMatrix + 
              dampingMatrix + ( fVariable ) * inertiaMatrix ] ];,
      
      (* imsStationary *)
      analysisMethod === "imsStationary",
      Return[ imsMakeSystem[ load,  dampingMatrix ] ];,
      
      (* true - error message *)
      True,
      Message[imsMakeLumpedSystem::"analysisMethod", analysisMethod ];
      ];
    
    ];



(* selector *)
(* *)



(* predicates *)
(* *)
imsLumpedInertiaQ[ _imsCapacitance ] := True;
  imsLumpedInertiaQ[ ___ ] := False;
  
  imsLumpedDampingQ[ _imsResistance ] := True;
  imsLumpedDampingQ[ _imsVoltageControlledCurrentSource ] := True;
  imsLumpedDampingQ[ ___ ] := False;
  
  imsLumpedStiffnessQ[ _imsInductance ] := True;
  imsLumpedStiffnessQ[ _imsMutualInductance ] := True;
  imsLumpedStiffnessQ[ ___ ] := False;
  
  imsLumpedLoadQ[ _imsCurrentSource ] := True;
  imsLumpedLoadQ[ _imsDiode ] := True;
  imsLumpedLoadQ[ ___ ] := False;
  
  imsLumpedPotentialQ[  _imsVoltageSource ] := True;
  imsLumpedPotentialQ[ ___ ] := False;
  
  imsLumpedVCVSQ[ _imsVoltageControlledVoltageSource ] := True;
  imsLumpedVCVSQ[ ___ ] := False;
  
  imsLumpedCCCSQ[ _imsCurrentControlledCurrentSource ] := True;
  imsLumpedCCCSQ [ ___ ] := False;
  
  imsLumpedCCVSQ[ _imsCurrentControlledVoltageSource ] := True;
  imsLumpedCCVSQ[ ___ ] := False;
  
  imsLumpedConnectorQ[ _imsWire ] := True;
  imsLumpedConnectorQ[ ___ ] := False;
  
  imsLumpedGroundQ[ _imsGround ] := True;
  imsLumpedGroundQ[ ___ ] := False;



(* private functions *)
(* *)

(* public functions *)
(* *)

imsLumpedOperator[ r_imsResistance ] := 
        imsMakeElementMatrix[ 1/imsGetValues[ r ]*{{1,-1},{-1,1}}, 
          imsGetIncidentsIds[ r ], imsGetIncidentsIds[ r ] ];
    
    imsLumpedOperator[ l_imsInductance ] :=
        imsMakeElementMatrix[ 1/imsGetValues[ l ]*{{1,-1},{-1,1}}, 
          imsGetIncidentsIds[ l ], imsGetIncidentsIds[ l ] ];
    
    imsLumpedOperator[ l_imsMutualInductance ] := Module[
        { l1, l2, l3,
          s11, s12, s21, s22 },
        
        {l1, l2, l3 } = imsGetValues[ l ];
        
        s11 = 1/( l1 * ( 1 - l3^2 ))*{{1,-1},{-1,1}};
        s12 =l3 / ( ( l3^2 -1 ) * Sqrt[ l1 * l2 ] )*{{1,-1},{-1,1}};
        s21 =s12;
        s22 =1/( l2 * ( 1 - l3^2 ))*{{1,-1},{-1,1}};
        
        Return[ 
          imsMakeElementMatrix[ myBlockMatrix[ {{s11,s12},{s21, s22}} ], 
            imsGetIncidentsIds[ l ], imsGetIncidentsIds[ l ] ] ]
        ];

imsLumpedOperator[ c_imsCapacitance ] := 
    imsMakeElementMatrix[ imsGetValues[ c ]*{{1,-1},{-1,1}}, 
      imsGetIncidentsIds[ c ], imsGetIncidentsIds[ c ] ];

imsLumpedOperator[ cur_imsCurrentSource ] :=
    imsMakeElementMatrix[ imsGetValues[cur]*{{-1},{1}}, 
      imsGetIncidentsIds[ cur ], {1} ];

imsLumpedOperator[ dio_imsDiode ] := Module[ { Vd, Is, Vt, n},
      
      { Vd, Is, Vt, n} = imsGetValues[ dio ];
      
      Return[ 
        imsMakeElementMatrix[ 
          Is*(Exp[(Subtract @@ (Vd[#]& /@imsGetIncidentsIds[ dio ])) / (n*
                        Vt) ]-1 )*{{-1},{1}}, 
          imsGetIncidentsIds[ dio ], {1} ]]
      ];

imsLumpedOperator[ cur_imsVoltageControlledCurrentSource ] := 
    imsMakeElementMatrix[ 
      imsGetValues[ 
          cur ]*{{ 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 1, -1, 0, 0 }, { -1, 1, 0, 
            0 }}, imsGetIncidentsIds[ cur ], imsGetIncidentsIds[ cur ] ];

(* Attributes *)
SetAttributes[ imsLumpedOperator, Listable ];




(* representors *)
(* *)



(* Begin Private *)
End[]



(* Protect[] *)
EndPackage[] 
