(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: MultiGrid.m *)
(* Context: *)
(* 
  Author:oliver ruebenkoenig *)
(* Date: 29.8.2005,Leipzig *)
(* 
  Summary: This is the IMTEK template for writing a mathematica packages *)
(* 
  Package Copyright: GNU GPL *)
(* Package Version: 0.1.1 *)
(* 
  Mathematica Version: 5.0 *)
(* History:
      Integer Input \[Rule] Integer Output;
  Bug fixes after renaming action to imsXY
   *)
(* Keywords: *)
(* Sources: *)
(* Warnings: *)
(* Limitations: *)
(* 
  Discussion: *)
(* Requirements: *)
(* Examples: *)
(* *)



(* Disclaimer: *)

(* This multi grid programm computes solutions to pdes *)

(* Copyright (C) 2004 oliver ruebenkoenig *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)
BeginPackage["Imtek`MultiGrid`"];





(* *)
(* documentation *)
(* *)
Needs["Imtek`Maintenance`"];
imsCreateObsoleteFunctionInterface[ FullMultiGrid, $Context \
];imsCreateObsoleteFunctionInterface[ MultiGridCycle, $Context \
];imsCreateObsoleteFunctionInterface[ MGSolve, $Context \
];imsCreateObsoleteFunctionInterface[ MGResidualMatrix, $Context \
];imsCreateObsoleteFunctionInterface[ FMGProlongStueben, $Context \
];imsCreateObsoleteFunctionInterface[ MGProlongBilinear, $Context \
];imsCreateObsoleteFunctionInterface[ MGRestrictInjection, $Context \
];imsCreateObsoleteFunctionInterface[ MGRestrictHalfInjection, $Context \
];imsCreateObsoleteFunctionInterface[ MGRestrictFullWeighting, $Context \
];imsCreateObsoleteFunctionInterface[ FMGRestrict, $Context \
];imsCreateObsoleteFunctionInterface[ MGRestrict, $Context \
];imsCreateObsoleteFunctionInterface[ FMGProlong, $Context \
];imsCreateObsoleteFunctionInterface[ MGProlong, $Context ];
imsCreateObsoleteFunctionInterface[ MGPreSmoothIteration, $Context \
];imsCreateObsoleteFunctionInterface[ MGPostSmoothIteration, $Context \
];imsCreateObsoleteFunctionInterface[ MGSolveIteration, $Context \
];imsCreateObsoleteFunctionInterface[ CycleRecursion, $Context ];

(* constructors *)

(* selectors *)

(* predicates *)

(* functions *)
imsFullMultiGrid::usage = 
  "imsFullMultiGrid[ load, boundaryFunction, imsMGSolve, imsMGResidualMatrix, opts ] computes a full multigrid cycle on the geometric data in the load vector. The boundary function specifies the behaviour on the boundary. imsMGSolve is a particular solver. Various options can be given to control the multigrid process."
\

imsMultiGridCycle::usage = 
  "imsMultiGridCycle[ guess, load, imsMGSolve, imsMGResidualMatrix, opts ] computes a multigrid cycle with an initial guess on the geometric data in the load vector. Various options can be given to control the multigrid process."
\

imsMGSolve::usage = 
  "imsMGSolve[ guess, load, iter ] is a solver to be written by the user. Guess is an initial start. Load is the problem specific load vector. Iter specifies the number of iterations to be donne."
\

imsMGResidualMatrix::usage = 
  "imsMGResidualMatrix[ u, load ] is function to be written by the user. It should return the residual of the matrix u and the load vector."
\

imsFMGProlongStueben::usage = 
  "imsFMGProlongStueben[ matrix, boundaryFunction, load ] computes a full multigrid prolongation of the matrix with boundary function and load."
\

imsMGProlongBilinear::usage = 
  "imsMGProlongBilinear[ matrix ] computes a bilinear prolongation of the matrix."
\

imsMGRestrictInjection::usage = 
  "imsMGRestrictInjection[ matrix ] computes a multigrid restriction of the matrix via an injection."
\

imsMGRestrictHalfInjection::usage = 
  "imsMGRestrictHalfInjection[ matrix ] computes a multigrid restriction of the matrix via a half injection."
\

imsMGRestrictFullWeighting::usage = 
  "imsMGRestrictFullWeighting[ matrix ] computes a multigrid restriction of the matrix via full weighting."



imsFMGRestrict::usage \
="imsFMGRestrict -> imsMGRestrictInjection is an option of imsFullMultiGrid that specifies the restriction type to be donne.";\


imsMGRestrict::usage \
="imsMGRestrict -> imsMGRestrictInjection is an option of imsMultiGridCycle that specifies the restriction type to be donne.";\


imsFMGProlong::usage \
="imsFMGProlong -> imsFMGProlong is an option of imsFullMultiGrid that specifies the prolongation type to be donne.";\


imsMGProlong::usage \
="imsMGProlong -> imsMGProlongBilinear is an option of imsMultiGridCycle that specifies the prolongation type to be done.";\


imsMGPreSmoothIteration::usage \
="imsMGPreSmoothIteration \[Rule] 2 is an option of imsMultiGridCycle that specifies the number of smoothings done on the way down.";\


imsMGPostSmoothIteration::usage \
="imsMGPostSmoothIteration \[Rule] 1 is an option of imsMultiGridCycle that specifies the number of smoothings done on the way up.";\


imsMGSolveIteration::usage \
="imsMGSolveIteration \[Rule] 20 is an option of imsMultiGridCycle that specifies the number of iterations on the lowest level.";\


imsCycleRecursion::usage \
="imsCycleRecursion \[Rule] 1 is an option of imsMultiGridCycle that specifies the number of cycles done in each imsMultiGrid call. 1 is a V-Cycle, 2 a W-Cycle and so on.";\









Begin["`Private`"];



(* needs private *)



(* *)
(* implementation part *)
(* *)

(* constructor *)



(* *)
(* define your options *)
(* *)

Options[ imsFullMultiGrid ] := { 
      imsFMGRestrict \[Rule] imsMGRestrictInjection, 
      imsFMGProlong \[Rule] imsFMGProlong  };

Options[ imsMultiGridCycle ] := {  
      imsMGRestrict \[Rule] imsMGRestrictInjection, 
      imsMGProlong \[Rule] imsMGProlongBilinear, 
      imsMGPreSmoothIteration \[Rule] 2, imsMGPostSmoothIteration \[Rule] 1, 
      imsMGSolveIteration \[Rule] 20, imsCycleRecursion \[Rule] 1  };




(* selector *)



(* predicates *)



(* functions *)

imsFullMultiGrid[ rhsh_, boundary_, imsMGSolve_, imsMGResidualMatrix_, 
      opts___ ] := Module[
      { n=Length[ rhsh ]-1,xh, xH, rhsH, hx, hy,
        thisFMGRestrict, thisFMGProlong },
      
      thisFMGRestrict = 
        imsFMGRestrict /. { opts } /.Options[ imsFullMultiGrid ];
      thisFMGProlong = 
        imsFMGProlong /. { opts } /.Options[ imsFullMultiGrid ];
      
      If[ n > 2,
        rhsH = thisFMGRestrict[ rhsh ];
        xH = 
          imsFullMultiGrid[ rhsH, boundary, imsMGSolve, imsMGResidualMatrix, 
            opts ];
        xh = thisFMGProlong[ xH ],
        
        hx = hy = 1/n; 
        xh = Table[
            If[ r \[Equal] 0 || c \[Equal] 0 ||r \[Equal] n|| c \[Equal] n,
              boundary[ c * hx, r*hy ],
              0 ]
            ,{r,0, n }, { c, 0, n }
            ]; 
        ]; 
      
      xh =  
        imsMultiGridCycle[ xh, rhsh, imsMGSolve,imsMGResidualMatrix, opts ];
      Return[ xh ];
      ];

imsMultiGridCycle[  xIn_, rhs_, imsMGSolve_, imsMGResidualMatrix_, 
      opts___  ] := Module[
       { n=Length[ xIn ]-1, x=xIn, residuumh, residuumH, errorH,
        thisMGRestrict, thisMGProlong,
        nreldown, nrelup, mu },
      
      nreldown = 
        imsMGPreSmoothIteration /. { opts } /.Options[ imsMultiGridCycle ];
      nrelup = 
        imsMGPostSmoothIteration /. { opts } /.Options[ imsMultiGridCycle ];
      nsolve = 
        imsMGPostSmoothIteration /. { opts } /.Options[ imsMultiGridCycle ];
      mu = imsCycleRecursion /. { opts } /.Options[ imsMultiGridCycle ];
      
      thisMGRestrict = 
        imsMGRestrict /. { opts } /.Options[ imsMultiGridCycle ];
      thisMGProlong = 
        imsMGProlong /. { opts } /.Options[ imsMultiGridCycle ];
      
      If[ n>2,
        (* x = thisMGPreSmooth[ x, rhs, nreldown ]; *)
        
        x = imsMGSolve[ x, rhs, nreldown ];
        residuumh = imsMGResidualMatrix[ x, rhs ];
        residuumH = thisMGRestrict[ residuumh ];
        errorH = 
          Table[ 0, { Length[ residuumH ] }, { 
              Length[ First[ residuumH ] ] } ];
        Do[ 
          errorH = 
            imsMultiGridCycle[ errorH, residuumH, imsMGSolve, 
              imsMGResidualMatrix, opts ], { mu } ];
        x = x + thisMGProlong[ errorH ];
        (* x = thisMGPostSmooth[ x, rhs, nrelup ], *)
        
        x = imsMGSolve[ x, rhs, nrelup ],
        
        x =  imsMGSolve[ x, rhs, nsolve ];
        ];
      
      Return[ x ];
      ];

imsFMGProlongStueben[ matrix_, boundary_, load_ ] := 
  Module[ 
    { rows, cols, hx, hy, interpol },
    { rows, cols } = Dimensions[ matrix ]-1;
    hx = 1/ ( 2 * cols );
    hy = 1/ ( 2 * rows );
    
    newMatrix = Table[
        If[ 
          r \[Equal] 0 || c \[Equal] 0 ||r \[Equal] 2*rows|| 
            c \[Equal] 2*cols,
          boundary[ c * hx, r*hy ],
          0
          ]
        ,{r,0, 2*rows }, { c, 0, 2*cols }
        ];
    
    Do[
      newMatrix[[ 2*r-1, 2*c-1 ]] = matrix[[ r,c ]]
      ,{r,2, rows }, { c,2,cols } ];
    
    Do[
      newMatrix[[ r, c ]] = 1/4 * ( - 2*hx*hy*load[ (c-1)*hx, (r-1)*hy ] + 
              newMatrix[[ r-1, c-1 ]]+ newMatrix[[ r+1, c+1 ]]+ 
              newMatrix[[ r-1, c+1 ]]+ newMatrix[[ r+1, c-1 ]] )
      ,{r,2, 2*rows,2 }, { c,2,2*cols,2 } ];
    
    Do[
      If[ OddQ[ r+c ],
        newMatrix[[ r, c ]] = 
          1/4 * ( - hx*hy*load[ (c-1)*hx, (r-1)*hy ] + newMatrix[[ r-1, c ]]+ 
                newMatrix[[ r+1, c ]]+ newMatrix[[ r, c+1 ]]+ 
                newMatrix[[ r, c-1 ]] )
        ],{r,2, 2*rows }, { c,2,2*cols } ];
    
    Return[ newMatrix ];
    ]

imsMGProlongBilinear[ matrix_ ] := 
    Module[ 
      { rows, cols },
      { rows, cols } = Dimensions[ matrix ]-1;
      
      newMatrix = Table[ 0, { 2* rows+1 }, { 2 *cols+1 } ];
      
      Do[
        Which[
            OddQ[ c ] && OddQ[ r ],
            newMatrix[[ c, r ]]= matrix[[ (c-1)/2 +1 ,(r-1)/2 +1 ]],
            
            EvenQ[ c ] && EvenQ[ r ],newMatrix[[ c, r ]] =
              
              1/4 * ( matrix[[ c/2, r/2 ]] + matrix[[ c/2+1, r/2 ]] + 
                    matrix[[ c/2, r/2+1 ]] + matrix[[ c/2+ 1, r/2+1 ]] ),
            
            EvenQ[ c ] && OddQ[ r ],
            newMatrix[[ c, r ]] = 
              1/2 * ( matrix[[ c/2, ( r -1)/2 +1 ]] + 
                    matrix[[  c/2+1, ( r -1)/2 +1 ]] ),
            
            OddQ[ c ]  && EvenQ[ r ],
            newMatrix[[ c, r ]] = 
              1/2 * ( matrix[[ ( c -1)/2 +1 , r/2  ]] + 
                    matrix[[  ( c-1 )/2 + 1, r/2 +1 ]] )
            ];
        ,{r, 2*rows+1 }, { c, 2*cols+1 }  ];
      
      Return[ newMatrix ];
      ];

imsMGRestrictInjection[ matrix_ ] := 
    Transpose[ 
      Drop[ Transpose[ Drop[ matrix, { 2, Length[ matrix ], 2  }] ], { 2, 
          Length[ First[ matrix ] ], 2 } ] ];

imsMGRestrictFullWeighting[ matrix_ ] := Module[
      { newMatrix, rows, cols },
      { rows, cols } = Dimensions[ matrix ]/2-1;
      newMatrix = imsMGRestrictInjection[ matrix ];
      
      Do[
        newMatrix[[ r, c ]] = 1/16 * ( 
              
              matrix[[ 2*r-1, 2*c-1 ]] + matrix[[ 2*r-1, 2*c+1 ]] +
                matrix[[ 2*r+1, 2*c-1 ]] + matrix[[ 2*r+1, 2*c+1 ]] +
                
                2*( matrix[[ 2*r, 2*c-1 ]] + matrix[[ 2*r, 2*c+1 ]] + 
                      matrix[[ 2*r-1, 2*c ]] + matrix[[ 2*r+1, 2*c ]] ) + 
                4 * matrix[[ 2*r, 2*c ]]
                )
        , { r,2, rows }, { c,2, cols }
        ];
      Return[ newMatrix ];
      ];

imsMGRestrictHalfInjection[ matrix_ ] := 
    1/2 * imsMGRestrictInjection[ matrix ];



(* representors *)



End[] (* of Begin Private *)



(* Protect[] (* anything *) *)
EndPackage[] 
