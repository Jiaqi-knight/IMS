(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: Mesher.m *)
(* Context: *)
(* Author:oliver ruebenkoenig *)
(* 
  Date: 12.6.2006, Freiburg *)
(* Summary: mathematica mesher *)
(* 
  Package Copyright: GNU GPL *)
(* Package Version: 0.2.4 *)
(* 
  Mathematica Version: 5.2 *)
(* History: *)
(* 
  added imsInsertSecondaryNodes *)
(* 
  added imsSurroundingElement and imsMeshInterpolate *)
(* 
  added imsMeshTraversal *)
(* 
  added imsVertexAdjacency and imsIndexedVertexAdjacency *)
(* 
  Changed the name to MesherUtilities *)
(* Keywords: *)
(* Sources: *)
(* 
  Warnings: *)
(* Limitations: *)
(* Discussion: *)
(* Requirements: *)
(* 
  Examples: *)
(* *)



(* Whereever the GNU GPL is not applicable, 
  the software should be used in the same spirit. *)

(* Users of this code must verify correctness for their application. *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)

(* Disclaimer: *)

(* computes incidents from delaunay triangulation *)

(* Copyright (C) 2004-2006 Oliver ruebenkoenig *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)
BeginPackage["Imtek`MesherUtilities`"];





(* *)
(* documentation *)
(* *)
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ DelaunayIncidents, $Context ];

(* constructors *)

(* selectors *)

(* predicates *)

(* functions *)

imsDelaunayIncidents::usage="imsDelaunayIncidents[ delaunayTriangulation ] computes the incidents of a delaunayTriangulation list.";\


imsConnectedElements::usage="imsConnectedElements[ incidence_List ] returns a list for each vertex in the incidences containing the incidences of the connecting elements."
\

imsIndexedConnectedElements::usage="imsIndexedConnectedElements[ incidence_List ] returns a list for each vertex in the incidences containing the indexed incidences of the connecting elements.";\


imsMeshTraversal::usage = \
"imsMeshTraversal[ startElements, incidents, connectedElements, n ] returns a list of those element incidents which surround startElements. Each element will only be visited once. This is done n times or until all elements have been visited. n Defaults to Infinity.";\


imsSurroundingElements::usage="imsSurroundingElements[ sourceCoords, sourceIncidents, targetCoords ] returns a list of integers which correspond to the element number in sourceIncidents that surround each of the targetCoords.";\


imsMeshInterpolate::usage="imsMeshInterpolate[ sourceCoords, sourceIncidents, targetCoords, { sourceValues, .. } ] returns an interpolation of sourceValues at targetCoords based on the sourceCoords and sourceIncidents.";\


imsInsertSecondaryNodes::usage="imsInsertSecondaryNodes[ nodes, linearElements, makerFunction, valueDataFunction ] returns a list of new nodes and quadratic elements. The linear elements are converted to quadratic elements and the new node contain the input nodes and the newly computed mid side nodes. The new node's marker are set according to the markerFunction and the values and data according to the valueDataFunction.";



(* *)
(* options docu *)
(* *)







Begin["`Private`"];



(* Private Imports *)
Needs["Imtek`AreaCoordinates`"];
Needs["Imtek`MeshElementLibrary`"];
Needs["Imtek`Trees`"];
Needs["Imtek`Point`"];



(* *)
(* implementation part *)
(* *)

(* constructor *)



(* *)
(* define your options *)
(* *)




(* selector *)



(* predicates *)



(* *)
(* public functions *)
(* *)
imsDelaunayIncidents[ lst_ ] := Block[
      { $RecursionLimit = Infinity, elements = {}, result = {}, 
        dublicateIncidents },
      dublicateIncidents = triangleIncidents[ lst, elements ];
      
      Return[ filter[ dublicateIncidents ] ]
      ];

imsIndexedConnectedElements[ incidents_ ] := Module[
    { counter = 1, vertexAdjacency },
    vertexAdjacency = Table[ {}, { Max[ Flatten[ incidents ] ] } ];
    MapIndexed[ 
      Function[ { thisIncident, counter }, 
        MapIndexed[ (vertexAdjacency[[ #1 ]] = { vertexAdjacency[[ #1 ]], 
                  counter, #2 } )& , thisIncident ] ], incidents ];
    Return[ Partition[ Flatten[ # ], 2 ]& /@ vertexAdjacency ];
    ]

imsConnectedElements[ incidents_ ] := Module[
    { counter = 1, vertexAdjacency },
    vertexAdjacency = Table[ {}, { Max[ Flatten[ incidents ] ] } ];
    MapIndexed[ 
      Function[ { thisIncident, 
          counter }, (vertexAdjacency[[ #1 ]] = { vertexAdjacency[[ #1 ]], 
                  counter } )&  /@ thisIncident ], incidents ];
    Return[ Flatten /@ vertexAdjacency ];
    ]

imsMeshTraversal[ startElements_, incidents_, connectedElements_, 
    n_:Infinity ] := Module[
    { visitedElementQ,walk, step },
    
    visitedElementQ[ _ ] := False;
    walk[ elements_ ] := 
      Select[ Union[ 
          Flatten[ 
            connectedElements[[ 
                Union[ Flatten[ 
                    incidents[[ 
                        elements ]] ] ] ]] ] ], (!visitedElementQ[#]&) ];
    
    step = 
      Function[ elements, (visitedElementQ[ # ] := True)& /@ elements; 
        walk[ elements ] ];
    
    Return[ 
      NestWhileList[ step, startElements, (#1 \[NotEqual] {}&), 1, n, -1 ] ]
    ]

imsSurroundingElements[ sourceCoords_, sourceIncidents_, tragetCoords_  ] :=
 
   Module[
    {dimension, checkElementsContaininCoord, findElementContainingCoord,
      coordToId, primarySourceCoords, sourceTree, closeSourceCoordIds, ectn, 
      surroundingElementIds  },
    
    (* for searching we use linear elements always *)
    
    dimension = Length[ sourceCoords[[ 1 ]] ];
    
    (* too lazy for Message *)
    Which[
      dimension \[Equal] 1, Print["Try using Interpolation"]; Abort[];,
      dimension \[Equal] 2,
      primarySourceIncidents = Take[#,3]& /@sourceIncidents,
      dimension \[Equal] 3, 
      primarySourceIncidents = Take[#,4]& /@sourceIncidents,
      dimension > 3, 
      Print["This is some fancy stuff, you are trying to do! 42 is the answer ;-)"]\
; Abort[];
      ];
    
    (* ugly, ugly, ugly *)
    
    checkElementsContaininCoord[ elementCoords_, queryCoord_ ] := 
      Position[ 
        elementCoords, _?(imsInsideElementQ[#,queryCoord ]\[Equal]True&),1,
        1 ];
    
    findElementContainingCoord[ possibleElements_, queryCoord_ ] := Module[
        {elementCoords, possibleElementId, elementId, surroundingElements },
        elementCoords =
          sourceCoords[[#]]& /@ primarySourceIncidents[[ possibleElements ]];
        possibleElementId = 
          Flatten[ 
            checkElementsContaininCoord[ elementCoords, queryCoord ] ];
        elementId = possibleElements[[ possibleElementId ]];
        If[
          Length[ possibleElementId ] \[Equal] 0,
          (* 
            the nearest neighbour is NOT part of the surrounding element *)
  \
        (* we are near though, we check the surrounding elements *)
          
          surroundingElements = 
            Flatten[ 
              Drop[ imsMeshTraversal[ possibleElements, 
                  primarySourceIncidents, elementsConnectedToNodes, 2 ], 
                1 ] ];
          
          possibleElementId =  
            findElementContainingCoord[ surroundingElements, queryCoord ];
          elementId = possibleElementId;
          ];
        Return[ elementId ];
        ];
    
    primarySourceIncidents = sourceIncidents;
    primarySourceCoords = 
      sourceCoords[[ Union[ Flatten[ primarySourceIncidents ] ] ]];
    
    MapIndexed[ Function[{coord, id},coordToId[coord]=id[[1]] ], 
      primarySourceCoords ];
    
    sourceTree =imsMakeKDTree[ primarySourceCoords ];
    closeSourceCoordIds =
      coordToId /@ (imsNearestPointSearchKDTree[ sourceTree, # ]& /@ 
            N[ tragetCoords ]);
    
    elementsConnectedToNodes =imsConnectedElements[ primarySourceIncidents ];
    ectn =elementsConnectedToNodes[[ closeSourceCoordIds ]];
    surroundingElementIds =
      Flatten[ Function[ index, 
            findElementContainingCoord[ ectn[[ index ]], 
              tragetCoords[[ index ]] ] ] /@ Range[ Length[ ectn ] ] ];
    
    Return[ surroundingElementIds ];
    ]

imsMeshInterpolate[ sourceCoords_, sourceIncidents_, tragetCoords_, 
    sourceValues_  ] :=
  Module[
    {dimension, checkElementsContaininCoord, findElementContainingCoord,
      coordToId, primarySourceCoords, sourceTree, closeSourceCoordIds, ectn, 
      surroundingElementIds, surroundingElementNodeIds, 
      surroundingElementCoords, interpolation, incidenceOrderedSourceValues, 
      newValues  },
    
    (* for searching we use linear elements always *)
    
    dimension = Length[ sourceCoords[[ 1 ]] ];
    
    (* too lazy for Message *)
    Which[
      dimension \[Equal] 1, Print["Try using Interpolation"]; Abort[];,
      dimension \[Equal] 2,
      primarySourceIncidents = Take[#,3]& /@sourceIncidents,
      dimension \[Equal] 3, 
      primarySourceIncidents = Take[#,4]& /@sourceIncidents,
      dimension > 3, 
      Print["This is some fancy stuff, you are trying to do! 42 is the answer ;-)"]\
; Abort[];
      ];
    
    (* ugly, ugly, ugly *)
    
    checkElementsContaininCoord[ elementCoords_, queryCoord_ ] := 
      Position[ 
        elementCoords, _?(imsInsideElementQ[#,queryCoord ]\[Equal]True&),1,
        1 ];
    
    findElementContainingCoord[ possibleElements_, queryCoord_ ] := Module[
        {elementCoords, possibleElementId, elementId, surroundingElements },
        elementCoords =
          sourceCoords[[#]]& /@ primarySourceIncidents[[ possibleElements ]];
        possibleElementId = 
          Flatten[ 
            checkElementsContaininCoord[ elementCoords, queryCoord ] ];
        elementId = possibleElements[[ possibleElementId ]];
        If[
          Length[ possibleElementId ] \[Equal] 0,
          (* 
            the nearest neighbour is NOT part of the surrounding element *)
  \
        (* we are near though, we check the surrounding elements *)
          
          surroundingElements = 
            Flatten[ 
              Drop[ imsMeshTraversal[ possibleElements, 
                  primarySourceIncidents, elementsConnectedToNodes, 2 ], 
                1 ] ];
          
          possibleElementId =  
            findElementContainingCoord[ surroundingElements, queryCoord ];
          elementId = possibleElementId;
          ];
        Return[ elementId ];
        ];
    
    (* coord id lookup table *)
    
    primarySourceCoords = 
      sourceCoords[[ Union[ Flatten[ primarySourceIncidents ] ] ]];
    MapIndexed[ Function[{coord, id},coordToId[coord]=id[[1]] ], 
      primarySourceCoords ];
    
    (* tree *)
    sourceTree =imsMakeKDTree[ primarySourceCoords ]; 
    closeSourceCoordIds =
      coordToId /@ (imsNearestPointSearchKDTree[ sourceTree, # ]& /@ 
            N[ tragetCoords ]);
    
    elementsConnectedToNodes =imsConnectedElements[ primarySourceIncidents ];
    ectn =elementsConnectedToNodes[[ closeSourceCoordIds ]];
    
    surroundingElementIds =
      Flatten[ Function[ index, 
            findElementContainingCoord[ ectn[[ index ]], 
              tragetCoords[[ index ]] ] ] /@ Range[ Length[ ectn ] ] ];
    
    (* we want to interpolate in the order of the given incidents *)
    
    surroundingElementNodeIds =sourceIncidents[[ surroundingElementIds ]];
    surroundingElementCoords = 
      sourceCoords[[ # ]]& /@ surroundingElementNodeIds;
    interpolation = 
      Thread[ imsAreaShapeFunctions[ surroundingElementCoords, 
          tragetCoords ] ];
    
    incidenceOrderedSourceValues = 
      Function[ values, values[[#]]& /@ surroundingElementNodeIds  ] /@ 
        sourceValues;
    
    newValues =  (Plus @@@Times[ interpolation, # ]& /@ 
          incidenceOrderedSourceValues);
    
    Return[ newValues ];
    ]

imsInsertSecondaryNodes[ nodes_, elements_, markerFunction_, 
    valueDataFunction_ ] := Module[
    { insertRules1D, insertRules2D, insertRules3D, insertRules, edgs, i, 
      midSideId, msn, markers, valueDatas, newNodes, newElements  },
    
    (* some conversion rules *)
    
    insertRules1D = { 
        line1D:_imsLineLinear1DOF \[RuleDelayed] 
          imsMakeLineQuadratic1DOF[ imsGetIds[line1D ], 
            Join[ imsGetIncidentsIds[ line1D ], 
              midSideId[ imsGetIncidentsIds[ line1D ] ] ] ] };
    
    insertRules2D = { 
        tri2D:_imsTriangleLinear1DOF \[RuleDelayed]  
          imsMakeTriangleQuadratic1DOFSerendipity[ imsGetIds[ tri2D ], 
            Join[ imsGetIncidentsIds[ tri2D ], 
              midSideId[ 
                    Sort[ # ] ]& /@ (imsGetIncidentsIds[ 
                          tri2D ][[#]]& /@ { {1,2}, {2,3},{3,1} } ) ] ],
        quad2D:_imsQuadLinear1DOF :> 
          imsMakeQuadQuadratic1DOFSerendipity[ imsGetIds[ quad2D ], 
            Join[ imsGetIncidentsIds[ quad2D ], 
              midSideId[ 
                    Sort[ # ] ]& /@ (imsGetIncidentsIds[ 
                          quad2D ][[#]]& /@ { {1,2}, {2,3},{3,4},{4,
                        1} } ) ] ] };
    
    insertRules3D = {
        tet3D:_imsTetrahedronLinear1DOF \[RuleDelayed] \
(imsMakeTetrahedronQuadratic1DOFSerendipity[ imsGetIds[ tet3D ], 
              Join[ imsGetIncidentsIds[ tet3D ], 
                midSideId[ 
                      Sort[ # ] ]& /@ (imsGetIncidentsIds[ 
                            tet3D ][[#]]& /@ { {1,2}, {2,3},{3,1},{2,4},{3,
                          4},{1,4} } ) ] ]),
        
        hex3D:_imsHexahedronLinear1DOF \[RuleDelayed] \
(imsMakeHexahedronQuadratic1DOFSerendipity[ imsGetIds[ hex3D ], 
              Join[ imsGetIncidentsIds[ hex3D ], 
                midSideId[ 
                      Sort[ # ] ]& /@ (imsGetIncidentsIds[ 
                            hex3D ][[#]]& /@ { {1,2},{2,3},{3,4},{4,1},{5,
                          6},{6,7},{7,8},{8,5},{1,5},{2,6},{3,7},{4,
                          8} } ) ] ]) };
    
    insertRules = Join[ insertRules1D, insertRules2D, insertRules3D ];
    
    (* the actual code *)
    edgs =imsElementEdges[ elements, edgeRules ];
    i = Max[ edgs ];
    (midSideId[ # ]=++i)&/@ edgs;
    ids = Range[ Max[edgs]+1, i ];
    nodeEdgs = nodes[[#]]& /@ edgs;
    msn =imsBisector /@ imsGetCoords[ nodeEdgs ];
    markers = markerFunction /@ nodeEdgs;
    valueDatas = Thread[ valueDataFunction[ ids, msn, markers, nodeEdgs ] ];
    
    newNodes = 
      Join[ nodes,  
        MapThread[ imsMakeNode[#1,#2,#3,Sequence @@ #4]&, 
          List[ ids, msn, markers, valueDatas ] ] ];
    
    newElements = elements /. insertRules;
    
    Return[ { newNodes, newElements } ];
    ]

(* *)
(* private functions *)
(* *)

filter[ lst_, entry_ ] := 
    Fold[ DeleteCases,lst ,RotateLeft[ entry, # ]& /@ Range[ 3 ]  ];

filter[ {} ] := {};

filter[ lst_ ] := Module[
      { fLst, newLst },
      fLst  = First[ lst ];
      result = Append[ result, fLst ];
      newLst = filter[ lst, fLst ];
      filter[ newLst ];
      Return[ result ]
      ];

triangleIncidents[ lst_, elementsIn_ ] := Module[
      { nodeNumber, incidents, rst, newLst, elements },
      
      { nodeNumber, incidents }= First[ lst ];
      elements = 
        Flatten[ { elementsIn, 
            Map[ Join[ { nodeNumber }, # ]&, 
              Partition[ incidents, 2, 1 ] ] }, 1 ];
      
      rst = Rest[ lst ];
      
      If[ Length[ rst ] > 0,
        elements = triangleIncidents[ rst, elements ];,
        Null
        ];
      
      Return[ elements ];
      ];

edgeRules1D = { 
      line1D:_imsLineLinear1DOF \[RuleDelayed] 
        imsGetIncidentsIds[ line1D ] };
edgeRules2D = { 
      tri2D:_imsTriangleLinear1DOF \[RuleDelayed]  
        Partition[imsGetIncidentsIds[ tri2D ],2,1,{1,1}], 
      quad2D:_imsQuadLinear1DOF :> 
        Partition[imsGetIncidentsIds[ quad2D ],2,1,{1,1}] };
edgeRules3D = { 
      tet3D:_imsTetrahedronLinear1DOF \[RuleDelayed] (imsGetIncidentsIds[ 
                  tet3D ][[#]]& /@ { {1,2}, {2,3}, {3,1}, {1,4}, {2,4}, {3,
                4} }),
      hex3D:_imsHexahedronLinear1DOF \[RuleDelayed] (imsGetIncidentsIds[ 
                  hex3D ][[ # ]]& /@ { {1,2},{2,3},{3,4},{4,1}, {5,6},{6,
                7},{7,8},{8,5},{1,5},{2,6},{3,7},{4,8} }) };

edgeRules=Join[ edgeRules1D, edgeRules2D, edgeRules3D ];

imsElementEdges[ elements_, edgeRules_ ] := 
  Union[ Sort /@ Flatten[ (elements /. edgeRules),1] ]



(* representors *)



End[] (* of Begin Private *)



(* Protect[] (* anything *) *)
EndPackage[] 
