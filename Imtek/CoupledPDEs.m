(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: CoupledPDEs.m *)
(* Context: *)
(* 
  Author:oliver ruebenkoenig *)
(* Date: 8.9.2005, Freiburg *)
(* 
  Summary: This is the IMTEK template for writing a mathematica packages *)
(* 
  Package Copyright: GNU GPL *)
(* Package Version: 0.1 *)
(* 
  Mathematica Version: 5.2 *)
(* History: *)
(* Keywords: *)
(* 
  Sources: FEMLab user Guide *)
(* Warnings: *)
(* Limitations: *)
(* 
  Discussion: *)
(* Requirements: *)
(* Examples: *)
(* *)



(* Disclaimer *)

(* Whereever the GNU GPL is not applicable, 
  the software should be used in the same spirit. *)

(* Users of this code must verify correctness for their application. *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)

(* Disclaimer: *)

(* This program assists in solving coupled PDEs *)

(* Copyright (C) 2005 oliver ruebenkoenig *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)
BeginPackage["Imtek`CoupledPDEs`"];





(* *)
(* documentation *)
(* *)

(* constructors *)

(* selectors *)

(* predicates *)

(* functions *)

imsCoupledDiffusionCoefficients::usage="imsCoupledDiffusionCoefficients[ dimensions, functions ] returns a list of coefficients for a diffusion operator to model couples partial differential equations in n dimensions with m functions.";\

imsCoupledConvectionCoefficients::usage="imsCoupledConvectionCoefficients[ dimensions, functions ] returns a list of coefficients for a convection operator to model couples partial differential equations in n dimensions with m functions.";\

imsCoupledReactionCoefficients::usage="imsCoupledReactionCoefficients[ dimensions, functions ] returns a list of coefficients for a reaction operator to model couples partial differential equations in n dimensions with m functions.";\

imsCoupledLoadCoefficients::usage="imsCoupledLoadCoefficients[ dimensions, functions ] returns a list of coefficients for a load operator to model couples partial differential equations in n dimensions with m functions.";\

imsCoupledTransientMatrixCoefficients::usage="imsCoupledTransientMatrixCoefficients[ dimensions, functions ] returns a list of coefficients for a transient operator to model couples partial differential equations in n dimensions with m functions.";\


imsCoupledDiffusion::usage="imsCoupledDiffusion[ dimensions, functions, vars, coefficients ] returns a list of a coupled diffusion equations modeled with coefficients in n dimensions and m functions of vars.";\

imsCoupledConvection::usage="imsCoupledConvectionimsCoupledConvection[ dimensions, functions, vars, coefficients ] returns a list of a coupled convection equations modeled with coefficients in n dimensions and m functions of vars.";\

imsCoupledReaction::usage=
    "imsCoupledReaction[ dimensions, functions, vars, coefficients ] returns a list of a coupled reaction equations modeled with coefficients in n dimensions and m functions of vars.";\

imsCoupledLoad::usage="imsCoupledLoad[ dimensions, functions, vars, coefficients ] returns a list of a coupled load equations modeled with coefficients in n dimensions and m functions of vars.";\

imsCoupledTransientMatrix::usage="imsCoupledTransientMatrix[ dimensions, functions, vars, coefficients ] returns a list of a coupled transient equations modeled with coefficients in n dimensions and m functions of vars.";



(* *)
(* options docu *)
(* *)



(* *)
(* error messages *)
(* *)



Begin["`Private`"];



(* *)
(* private imports *)
(* *)



(* *)
(* implementation part *)
(* *)

(* constructor *)
(* *)



(* *)
(* define your options *)
(* *)



(* selector *)
(* *)



(* predicates *)
(* *)



(* private functions *)
(* *)

(* public functions *)
(* *)

imsCoupledDiffusionCoefficients[ dim_, funcs_ ] := 
    Table[ KroneckerDelta[ i, j ] * KroneckerDelta[ k, l ],  { l, 
        Length[ funcs ] },{ k, Length[ funcs ] },{ j, dim }, { i, dim } ];

imsCoupledConvectionCoefficients[ dim_, funcs_ ] := 
    Table[ 0,  { Length[ funcs ] },{ Length[ funcs ] },{ 1 }, { dim } ];

imsCoupledReactionCoefficients[ dim_, funcs_ ] := 
    Table[ 0,  { Length[ funcs ] },{ Length[ funcs ] } ];

imsCoupledLoadCoefficients[ dim_, funcs_ ] := 
    Table[ 1,  { Length[ funcs ] },{ 1 } ];

imsCoupledTransientMatrixCoefficients[ dim_, funcs_ ] := 
    Table[ KroneckerDelta[ i, j ],  { i, Length[ funcs ] },{ j, 
        Length[ funcs ] } ];

imsCoupledDiffusion[ dim_, funcs_, vars_, coeffs_ ] := 
    Map[ Plus @@ Flatten[ # ]&, 
      coeffs * 
        Table[ D[ funcs[[ k ]], { vars[[ j ]] }, { vars[[ i ]] } ],  { 
            Length[ funcs ] },{ k, Length[ funcs ] },{ j, dim }, { i, dim } ]
      , {2} ];

imsCoupledConvection[ dim_, funcs_, vars_, coeffs_ ] := 
    Map[ Plus @@ Flatten[ # ]&, 
      coeffs * 
        Table[ D[ funcs[[ k ]],  { vars[[ i ]] } ],  { Length[ funcs ] },{ k, 
            Length[ funcs ] },{ 1 }, { i, dim } ]
      , {2} ];

imsCoupledReaction[ dim_, funcs_, vars_, coeffs_ ] := 
    coeffs * 
      Table[ funcs[[ k ]],  { Length[ funcs ] },{ k, Length[ funcs ] } ];

imsCoupledLoad[ dim_, funcs_, vars_, coeffs_ ] := 
    coeffs * Table[ funcs[[ i ]],  { i, Length[ funcs ] },{ 1 } ];

imsCoupledTransientMatrix[ timeDim_, funcs_, vars_, coeffs_ ] := 
    coeffs * Table[ 
        D[ funcs[[ k ]],  { vars[[ 1 ]] } ],  { Length[ funcs ] },{ k, 
          Length[ funcs ] } ];



(* representors *)
(* *)



(* Begin Private *)
End[]



(* Protect[] *)
EndPackage[] 
