(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: BuildDiamond.m *)
(* Context: *)
(* 
  Author: david kauzlaric *)
(* Date: 1.03.2005, Freiburg *)
(* 
  Summary: This is the IMTEK diamond builder *)
(* 
  Package Copyright: GNU GPL *)
(* Package Version: 0.1 *)
(* 
  Mathematica Version: 4.2 *)
(* History: *)
(* Keywords: *)
(* Sources: *)
(* 
  Warnings: *)
(* Limitations: *)
(* Discussion: *)
(* Requirements: *)
(* 
  Examples: *)
(* *)



(* Disclaimer *)

(* Whereever the GNU GPL is not applicable, 
  the software should be used in the same spirit. *)

(* Users of this code must verify correctness for their application. *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)

(* Disclaimer: *)

(* This is the IMTEK diamond builder  *)

(* Copyright (C) 2003-2005 david kauzlari *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



BeginPackage["Imtek`BuildDiamond`"];

Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ BuildDiamond, $Context ];

imsBuildDiamond::"usage"=
"\<imsBuildDiamond[m,n,p,a,h,k,l] creates a coordinate list for atoms
in a perfect cuboid mono crystal of the diamond lattice.\>\n\n
parameters:\n
m: number of unit cells, the crystal is containing in x-direction\n
n: number of unit cells, the crystal is containing in y-direction\n
p: number of unit cells, the crystal is containing in z-direction\n
\<	For a (100)-crystal, m,n,p specify the number of (100)-unit cells.\>\n
\<	For a (110)-crystal, m,n,p specify the number of (110)-unit cells.\>\n
\<	For a (111)-crystal, m,n,p specify the number of (111)-unit cells.\>\n
\<	For every crystal oriented in another direction, m,n,p specify the
	 number of (100)-unit cells of the original (100)-crystal
	 that was used for construction.\>\n
\<	Take care that the number of atoms in the crystal depends on the
	 number of atoms in a unit cell:\>\n
\<		The (100)-unit cell contains 8 atoms.\>\n
\<		The (110)-unit cell contains 4 atoms.\>\n
\<		The (111)-unit cell contains 6 atoms.\>\n
\<	Take care that m > 2*n or m > 2*p (and the same for n and p)
	 gives bad results for crystals oriented in another direction
	 than [100], [110] or [111].\>\n
a: lattice constant; the unit is not specified\n
h,k,l: Miller-Indices of the top- and bottom-faces of the cuboid\n\n
types:\n
m,n,p must be of the type Integer and bigger than zero\n
a must be of the type Real and bigger than zero\n
h,k,l must be of the type Integer and non-negative
";

Begin["`Private`"]





\!\(\(Ucell100[x_, y_, z_] := \[IndentingNewLine]Block[\[IndentingNewLine]{m = x - 1, n = y - 1, p = z - 1, Uc100List = {{m, n, p}, {m + 0.5, n + 0.5, p}, {m, n + 0.5, p + 0.5}, {m + 0.5, n, p + 0.5}, {m + 1\/4, n + 1\/4, p + 1\/4}, {m + 0.5 + 1\/4, n + 0.5 + 1\/4, p + 1\/4}, {m + 1\/4, n + 0.5 + 1\/4, p + 0.5 + 1\/4}, {m + 0.5 + 1\/4, n + 1\/4, p + 0.5 + 1\/4}}\[IndentingNewLine]}, \[IndentingNewLine]Uc100List\[IndentingNewLine]];\)\)



\!\(\(Ucell110[x_, y_, z_] := \[IndentingNewLine]Block[\[IndentingNewLine]{m = x - 1, n = y - 1, p = z - 1, b = \@2\/2, c = 1\/4\ \@\(3\/2\), \[IndentingNewLine]Uc110List = {{m, n\ b, p\ b}, {m + c, n\ b + c, p\ b}, {m + 0.5, b\ \((n + 0.5)\), b\ \((p + 0.5)\)}, {m + 0.5 + c, b\ \((n + 0.5)\) + c, b\ \((p + 0.5)\)}}}, \[IndentingNewLine]Uc110List\[IndentingNewLine]];\)\)



\!\(\*
  RowBox[{
    RowBox[{\(Ucell111[x_, y_, z_]\), ":=", "\[IndentingNewLine]", 
      RowBox[{"Block", "[", "\[IndentingNewLine]", 
        RowBox[{
          RowBox[{"{", 
            RowBox[{
              RowBox[{"m", "=", 
                RowBox[{"x", "-", "1", "-", 
                  RowBox[{"Quotient", "[", 
                    RowBox[{"y", 
                      StyleBox[\( (*\(-1\) + 1*) \),
                        FontColor->RGBColor[1, 0, 0]], ",", "2"}], "]"}]}]}], ",", \(n = y - 1\), ",", \(p = z - 1\), ",", \(b = \@2\/2\), ",", \(h = 1\/2\ \@\(3\/2\)\), ",", \(d = \@6\/12\), ",", "l", ",", "dij", ",", "dii", ",", "Uc111List"}], "}"}], ",", "\[IndentingNewLine]", \(dij = d\/\@2; dii = \ 1\/4\ \@3; \[IndentingNewLine]l = 3\ \((dii + dij)\); \[IndentingNewLine]Uc111List = {{b\ \((m + 0.5\ n + 0.5)\), n\ h, p\ l}, {b\ \((m + 0.5\ n\  + 1)\), n\ h + d, p\ l + dij}, {b\ \((m + 0.5\ n\  + 1)\), n\ h + d, p\ l + dij + dii}, {b\ \((m + 0.5\ n\  + 1.5)\), n\ h\  - d + h, p\ l + 2\ dij + dii}, {b\ \((m + 0.5\ n\  + 1.5)\), n\ h\  - d + h, p\ l + 2\ \((dij + dii)\)}, {b \((m + 0.5\ n + 1.5)\), n\ h, p\ l + 3\ dij + 2\ dii}}; \[IndentingNewLine]Uc111List\)}], "\[IndentingNewLine]", "]"}]}], ";"}]\)









Build100[m_,n_,p_,a_]:=
    Block[
      {Atoms100=Flatten[a Array[Ucell100,{m,n,p}],3]},
      Atoms100
      ];









Build110[m_,n_,p_,a_]:=
    Block[
      {Atoms110=Flatten[a Array[Ucell110,{m,n,p}],3]},
      Atoms110
      ];









Build111[m_,n_,p_,a_]:=
    Block[
      {Atoms111=Flatten[a* Array[Ucell111,{m,n,p}],3]},
      Atoms111
      ];









\!\(\*
  RowBox[{
    RowBox[{\(Buildhkl[m_, n_, p_, a_, h_, k_, l_]\), ":=", "\[IndentingNewLine]", 
      RowBox[{"Block", "[", "\[IndentingNewLine]", 
        RowBox[{\({i, DiamondPunkte, DiamondAtoms, relativePointSize =  .02, \ myAxes, \[Alpha] = ArcCos[Abs[{0, 0, 1} . {h, 0, l}\/\@\(h\^2 + l\^2\)]], \[Beta] = ArcCos[Abs[{0, 0, 1} . {0, k, l}\/\@\(k\^2 + l\^2\)]], lx = m, ly = n, lz = p}\), ",", "\[IndentingNewLine]", 
          StyleBox[\( (*\ \(myAxes = {RGBColor[1, 0, 0], Line[{{0, 0, 0}, {1, 0, 0}}], RGBColor[0, 1, 0], Line[{{0, 0, 0}, {0, 1, 0}}], RGBColor[0, 0, 1], Line[{{0, 0, 0}, {0, 0, 1}}], GrayLevel[0]};\)*) \),
            FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          StyleBox[\( (*Schnittfunktion\ 1.1*) \),
            FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
          RowBox[{\(FirstCut[listelem_] := \[IndentingNewLine]Block[\[IndentingNewLine]{x = listelem}, \[IndentingNewLine]If[\[Alpha] \[LessEqual] ArcTan[lz\/lx], \[IndentingNewLine]\(If[x[\([3]\)] \[GreaterEqual] lz - x[\([1]\)]\ Tan[\[Alpha]], \[IndentingNewLine]\(x -= {0, 0, lz};\)\[IndentingNewLine]];\), \[IndentingNewLine]\(If[x[\([3]\)] \[GreaterEqual] lz - x[\([1]\)]\ Tan[\[Alpha]], \[IndentingNewLine]\(x -= {lx, 0, 0};\)\[IndentingNewLine]];\)\[IndentingNewLine]]; \[IndentingNewLine]x\[IndentingNewLine]]\), ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Schnittfunktion\ 1.2*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", \(SecondCut[listelem_] := \[IndentingNewLine]Block[\[IndentingNewLine]{x = listelem}, \[IndentingNewLine]If[\[Alpha] \[LessEqual] ArcTan[lz\/lx], \[IndentingNewLine]\(If[x[\([1]\)] < x[\([3]\)]\ Tan[\[Alpha]], \[IndentingNewLine]x += {lx, 0, \(-lx\)\ Tan[\[Alpha]]}];\), \[IndentingNewLine]\(If[x[\([3]\)] \[GreaterEqual] lz + x[\([1]\)]\/Tan[\[Alpha]], \[IndentingNewLine]\(x += {lz\/Tan[\[Alpha]], 0, \(-lz\)};\)\[IndentingNewLine]];\)\[IndentingNewLine]]; \[IndentingNewLine]x\[IndentingNewLine]]\), ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Schnittfunktion\ 2.1*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
            RowBox[{\(ThirdCut[listelem_]\), ":=", "\[IndentingNewLine]", 
              RowBox[{"Block", "[", "\[IndentingNewLine]", 
                RowBox[{\({x = listelem}\), ",", "\[IndentingNewLine]", 
                  RowBox[{
                    RowBox[{"If", "[", 
                      RowBox[{\(\[Beta] \[NotEqual] 0\), ",", "\[IndentingNewLine]", 
                        RowBox[{
                          RowBox[{"If", "[", 
                            RowBox[{\(\[Alpha] \[LessEqual] ArcTan[lz\/lx]\), ",", "\[IndentingNewLine]", 
                              RowBox[{
                                RowBox[{"If", "[", 
                                  RowBox[{\(\[Beta] \[LessEqual] ArcTan[lz\/ly]\), ",", "\[IndentingNewLine]", 
                                    StyleBox[\( (*\(s  ame\)\ \(c  ut\)\ condition*) \),
                                      FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
                                    RowBox[{
                                      RowBox[{"If", "[", 
                                        RowBox[{\(x[\([2]\)] \[GreaterEqual] \(1\/Tan[\[Beta]]\) \((lz - x[\([1]\)]\ Tan[\[Alpha]] - x[\([3]\)])\)\), ",", "\[IndentingNewLine]", 
                                        RowBox[{
                                        StyleBox["(*",
                                        FontColor->RGBColor[1, 0, 0]], 
                                        RowBox[{
                                        StyleBox["Move",
                                        FontColor->RGBColor[1, 0, 0]], 
                                        StyleBox[" ",
                                        FontColor->RGBColor[1, 0, 0]], 
                                        StyleBox["direction",
                                        FontColor->RGBColor[1, 0, 0]], " ", 
                                        StyleBox["downz",
                                        FontColor->RGBColor[1, 0, 0]]}], 
                                        StyleBox["*)",
                                        FontColor->RGBColor[1, 0, 0]]}], "\[IndentingNewLine]", \(x -= {lz\ Cos[\[Alpha]]\ Sin[\[Alpha]], 0, lz\ Cos[\[Alpha]]\^2};\)}], "\[IndentingNewLine]", "]"}], ";"}], ",", "\[IndentingNewLine]", 
                                    StyleBox[\( (*inverse\ cut\ condition*) \),
                                      FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
                                    RowBox[{
                                      RowBox[{"If", "[", 
                                        RowBox[{\(x[\([2]\)] \[LessEqual] \(1\/Tan[\[Beta]]\) \((lz - x[\([1]\)]\ Tan[\[Alpha]] - x[\([3]\)])\)\), ",", "\[IndentingNewLine]", 
                                        StyleBox[\( (*Move\ direction\ right*) \),
                                        FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", \(x += {0, ly, 0};\)}], "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], ",", "\[IndentingNewLine]", 
                              RowBox[{
                                RowBox[{"If", "[", 
                                  RowBox[{\(\[Beta] \[LessEqual] ArcTan[\(lx\ Tan[\[Alpha]]\)\/ly]\), ",", "\[IndentingNewLine]", 
                                    StyleBox[\( (*same\ cut\ condition*) \),
                                      FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
                                    RowBox[{
                                      RowBox[{"If", "[", 
                                        RowBox[{\(x[\([2]\)] \[GreaterEqual] \(1\/Tan[\[Beta]]\) \((lz - x[\([1]\)]\ Tan[\[Alpha]] - x[\([3]\)])\)\), ",", "\[IndentingNewLine]", 
                                        StyleBox[\( (*Move\ direction\ downx*) \),
                                        FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", \(x -= a\/a\ {lx\ \ Sin[\[Alpha]]\^2, 0, lx\ 1\/2\ Sin[2\ \[Alpha]]};\)}], "\[IndentingNewLine]", "]"}], ";"}], ",", "\[IndentingNewLine]", 
                                    StyleBox[\( (*inverse\ cut\ condition*) \),
                                      FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
                                    RowBox[{
                                      RowBox[{"If", "[", 
                                        RowBox[{\(x[\([2]\)] \[LessEqual] \(1\/Tan[\[Beta]]\) \((lz - x[\([1]\)]\ Tan[\[Alpha]] - x[\([3]\)])\)\), ",", "\[IndentingNewLine]", 
                                        StyleBox[\( (*Move\ direction\ right*) \),
                                        FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", \(x += {0, ly, 0};\)}], "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "x"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Schnittfunktion\ 2.2*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", \(FourthCut[listelem_] := \[IndentingNewLine]Block[\[IndentingNewLine]{x = listelem}, \[IndentingNewLine]If[\[Beta] \[NotEqual] 0, \[IndentingNewLine]\(If[\[Alpha] \[LessEqual] ArcTan[lz\/lx], \[IndentingNewLine]\(If[\[Beta] \[LessEqual] ArcTan[lz\/ly], \[IndentingNewLine]\(If[x[\([2]\)] \[GreaterEqual] ly - \((lz - ly\ Tan[\[Beta]])\)\ Cos[\[Alpha]]\^2\ Tan[\[Beta]] + x[\([1]\)]\ \ Sin[\[Alpha]]\ Tan[\[Beta]]\ Cos[\[Alpha]] + x[\([3]\)]\ Cos[\[Alpha]]\ Tan[\[Beta]]\ Cos[\[Alpha]], \[IndentingNewLine]x += {ly\ Sin[\[Alpha]]\ Tan[\[Beta]]\ Cos[\[Alpha]], \(-ly\), ly\ Cos[\[Alpha]]\ Tan[\[Beta]]\ Cos[\[Alpha]]}\[IndentingNewLine]];\), \[IndentingNewLine]\(If[x[\([3]\)] \[LessEqual] \(-lz\)\ \((\(1 + Tan[\[Alpha]]\^2\)\/Tan[\[Beta]]\^2)\) - x[\([1]\)]\ Tan[\[Alpha]] + x[\([2]\)]\ \((\(1 + Tan[\[Alpha]]\^2\)\/Tan[\[Beta]])\), \[IndentingNewLine]x += {lz\ Sin[\[Alpha]]\ Cos[\[Alpha]], \(-lz\)\/Tan[\[Beta]], lz\ Cos[\[Alpha]]\^2}\[IndentingNewLine]];\)\[IndentingNewLine]];\), \[IndentingNewLine]\(If[\[Beta] \[LessEqual] ArcTan[\(lx\ Tan[\[Alpha]]\)\/ly], \[IndentingNewLine]\(If[x[\([1]\)] \[LessEqual] \(-ly\) \((Tan[\[Beta]]\/Tan[\[Alpha]] + \ 1\/\(Sin[\[Alpha]]\ Tan[\[Beta]]\ Cos[\[Alpha]]\))\) + lz\/Tan[\[Alpha]] + x[\([2]\)]\/\(Sin[\[Alpha]]\ Tan[\[Beta]]\ Cos[\[Alpha]]\) - x[\([3]\)]\/Tan[\[Alpha]], \[IndentingNewLine]x += {ly\ Sin[\[Alpha]]\ Tan[\[Beta]]\ Cos[\[Alpha]], \(-ly\), ly\ Cos[\[Alpha]]\ Tan[\[Beta]]\ Cos[\[Alpha]]}\[IndentingNewLine]];\), \[IndentingNewLine]\(If[x[\([2]\)] \[LessEqual] ly - lz\ Cos[\[Alpha]]\^2\ Tan[\[Beta]] + x[\([1]\)]\ Sin[\[Alpha]]\ Tan[\[Beta]]\ Cos[\[Alpha]] + x[\([3]\)]\ Cos[\[Alpha]]\^2\ Tan[\[Beta]], \[IndentingNewLine]x += {\(-lx\)\ Sin[\[Alpha]]\^2, lx\ Tan[\[Alpha]]\/Tan[\[Beta]], \(-lx\)\ Sin[\[Alpha]]\ Cos[\[Alpha]]}\[IndentingNewLine]];\)\[IndentingNewLine]];\)\[IndentingNewLine]];\)\[IndentingNewLine]]; \[IndentingNewLine]x\[IndentingNewLine]]\), ";", "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*\((100)\) - Startkristall*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", \(DiamondAtoms = Build100[m, n, p, 1. ]\), ";", "\[IndentingNewLine]", 
            StyleBox[\( (*DiamondPunkte = Graphics3D[{myAxes, PointSize[relativePointSize], Point /@ DiamondAtoms}]; \[IndentingNewLine]Show[DiamondPunkte];*) \),
              FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Schnitt\ 1.1*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", \(DiamondAtoms = FirstCut /@ DiamondAtoms\), ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Ausgabe\ nach\ Schnitt\ 1.1*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
            StyleBox[\( (*\(Print["\<Ausgabe nach Schnitt 1.1\>"];\)\[IndentingNewLine]\(Print[Length[DiamondAtoms]];\)\[IndentingNewLine]\(DiamondPunkte = Graphics3D[{myAxes, PointSize[relativePointSize], Point /@ DiamondAtoms}];\)\[IndentingNewLine]\(Show[DiamondPunkte, ViewPoint -> {\(-0.000\), \ \(-3.384\), \ 0.000}];\)*) \),
              FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Schnitt\ 1.2*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", \(DiamondAtoms = SecondCut /@ DiamondAtoms\), ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Ausgabe\ nach\ Schnitt\ 1.2*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
            StyleBox[\( (*\(Print["\<Ausgabe nach Schnitt 1.2\>"];\)\[IndentingNewLine]\(Print[Length[DiamondAtoms]];\)\[IndentingNewLine]\(DiamondPunkte = Graphics3D[{myAxes, PointSize[relativePointSize], Point /@ DiamondAtoms}];\)\[IndentingNewLine]\(Show[DiamondPunkte, ViewPoint -> {\(-0.000\), \ \(-3.384\), \ 0.000}];\)\[IndentingNewLine]\(Graphics3D[{myAxes, PointSize[relativePointSize], Point /@ DiamondAtoms}];\)\[IndentingNewLine]\(Show[DiamondPunkte, ViewPoint -> {2.435, \ 0.000, \ \(-2.350\)}];\)*) \),
              FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Schnitt\ 2.1*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", \(DiamondAtoms = ThirdCut /@ DiamondAtoms\), ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Ausgabe\ nach\ Schnitt\ 2.1*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
            StyleBox[\( (*\(Print["\<Ausgabe nach Schnitt 2.1\>"];\)\[IndentingNewLine]\(Print[Length[DiamondAtoms]];\)\[IndentingNewLine]\(DiamondPunkte = Graphics3D[{myAxes, PointSize[relativePointSize], Point /@ DiamondAtoms}];\)\[IndentingNewLine]\(Show[DiamondPunkte, ViewPoint -> {\(-0.080\), \ \(-3.383\), \ 0.042}];\)\[IndentingNewLine]\(Graphics3D[{myAxes, PointSize[relativePointSize], Point /@ DiamondAtoms}];\)\[IndentingNewLine]\(Show[DiamondPunkte, ViewPoint -> {2.435, \ 0.000, \ \(-2.350\)}];\)*) \),
              FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Schnitt\ 2.2*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", \(DiamondAtoms = FourthCut /@ DiamondAtoms\), ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            StyleBox[\( (*Ausgabe\ nach\ Schnitt\ 2.2*) \),
              FontColor->RGBColor[1, 0, 0]], "\[IndentingNewLine]", 
            StyleBox[\( (*\(Print["\<Ausgabe nach Schnitt 2.2\>"];\)\[IndentingNewLine]\(Print[Length[DiamondAtoms]];\)\[IndentingNewLine]\(DiamondPunkte = Graphics3D[{myAxes, PointSize[relativePointSize], Point /@ DiamondAtoms}];\)\[IndentingNewLine]\(Show[DiamondPunkte, ViewPoint -> {2.435, \ 0.000, \ \(-2.350\)}];\)*) \),
              FontColor->RGBColor[0, 0, 1]], "\[IndentingNewLine]", \(DiamondAtoms *= a\), ";", "\[IndentingNewLine]", "DiamondAtoms"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]\)



imsBuildDiamond[m_Integer?Positive,n_Integer?Positive,p_Integer?Positive,
      a_Real?Positive,0,0,h_Integer?NonNegative]:=Build100[m,n,p,a];
imsBuildDiamond[m_Integer?Positive,n_Integer?Positive,p_Integer?Positive,
      a_Real?Positive,0,h_Integer?NonNegative,0]:=Build100[m,n,p,a];
imsBuildDiamond[m_Integer?Positive,n_Integer?Positive,p_Integer?Positive,
      a_Real?Positive,h_Integer?NonNegative,0,0]:=Build100[m,n,p,a];
imsBuildDiamond[m_Integer?Positive,n_Integer?Positive,p_Integer?Positive,
      a_Real?Positive,h_Integer?NonNegative,h_Integer?NonNegative,0]:=
    Build110[m,n,p,a];
imsBuildDiamond[m_Integer?Positive,n_Integer?Positive,p_Integer?Positive,
      a_Real?Positive,h_Integer?NonNegative,0,h_Integer?NonNegative]:=
    Build110[m,n,p,a];
imsBuildDiamond[m_Integer?Positive,n_Integer?Positive,p_Integer?Positive,
      a_Real?Positive,0,h_Integer?NonNegative,h_Integer?NonNegative]:=
    Build110[m,n,p,a];
imsBuildDiamond[m_Integer?Positive,n_Integer?Positive,p_Integer?Positive,
      a_Real?Positive,h_Integer?NonNegative,h_Integer?NonNegative,
      h_Integer?NonNegative]:=Build111[m,n,p,a];
imsBuildDiamond[m_Integer?Positive,n_Integer?Positive,p_Integer?Positive,
      a_Real?Positive,h_Integer?NonNegative,k_Integer?NonNegative,0]:=
    Buildhkl[m,n,p,a,0,h,k];
imsBuildDiamond[m_Integer?Positive,n_Integer?Positive,p_Integer?Positive,
      a_Real?Positive,h_Integer?NonNegative,k_Integer?NonNegative,
      l_Integer?NonNegative]:=Buildhkl[m,n,p,a,h,k,l];
imsBuildDiamond[else___]:=
    Print["Input not of the form:\nimsBuildDiamond[m_Integer?Positive,n_Integer?Positive,p_Integer?Positive,a_Real?Positive,h_Integer?NonNegative,k_Integer?NonNegative,l_Integer?NonNegative]\n\nType ?imsBuildDiamond for more help."]\
;









End[];

EndPackage[];