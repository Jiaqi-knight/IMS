(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)

(* *)
(* :Title: PolarisationPackage.m *)
(* :Context: *)
(* :
    Author: oliver ruebenkoenig *)
(* :
    Summary: compute electromegnetic transmissions through materials *)
(* :
    Copyright: GNU GPL 2002-2005 by oliver ruebenkoenig *)
(* :
    Package Version: 0.2 *)
(* :Mathematica Version: 4.1 *)
(* :
    History: *)
(* :Keywords: *)
(* :Sources: "Optik",
  Eugene Hecht; "Handbook of Optics", Vol I, Bass, 
  Chap. 5; *)
(* : : 
      and long time favorite "Classical Electrodynamics", Jackson *)
(* :
    Warnings: *)
(* :Limitations: *)
(* :Discussion: *)
(* :
    Requirements: *)
(* :Examples: *)
(* *)

(* *)
BeginPackage["Imtek`Polarisation`"];

(* *)
(* documentation for functions in package *)
(* *)
\
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ Transmission, $Context ];
imsCreateObsoleteFunctionInterface[ Reflection, $Context ];
imsCreateObsoleteFunctionInterface[ TransmissionAngle, $Context ];
imsCreateObsoleteFunctionInterface[ Absorption, $Context ];
imsCreateObsoleteFunctionInterface[ Transmission, $Context ];


imsTransmission::usage  = 
    "imsTransmission[\!\(\*
    StyleBox[\"ni\",\nFontSlant->\"Italic\"]\), \!\(\*
    StyleBox[\"nt\",\nFontSlant->\"Italic\"]\), \!\(\*
    StyleBox[\"theta0\",\nFontSlant->\"Italic\"]\), \!\(\*
    StyleBox[\"theta1\",\nFontSlant->\"Italic\"]\)] gives a list containing \!\(\*
    StyleBox[\"Tp\",\nFontSlant->\"Italic\"]\) and \!\(\*
    StyleBox[\"Ts\",\nFontSlant->\"Italic\"]\)\!\(\*
    StyleBox[\" \",\nFontSlant->\"Italic\"]\): \!\(\*
    StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
    StyleBox[\"Tp\",\nFontSlant->\"Italic\"]\)\!\(\*
    StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
    StyleBox[\"Ts\",\nFontSlant->\"Italic\"]\)\!\(\*
    StyleBox[\"}\",\nFontSlant->\"Italic\"]\). The parallel and the perpendiculal (senkrecht) components of the intesity transmission coefficient. \!\(\*
    StyleBox[\"ni\",\nFontSlant->\"Italic\"]\) is the refractive index in the medium in the incident plane. \!\(\*
    StyleBox[\"nt\",\nFontSlant->\"Italic\"]\) is the refractive index of the medium in the trasmission plane. Draw a horizontal line. Above the line we have a medium with refracticve index \!\(\*
    StyleBox[\"ni\",\nFontSlant->\"Italic\"]\), below with \!\(\*
    StyleBox[\"nt\",\nFontSlant->\"Italic\"]\). Draw a line perpendicular to the first line, the plummet. The crossing of both lines is called the point of incident. A ray comming from medium \!\(\*
    StyleBox[\"ni\",\nFontSlant->\"Italic\"]\) hits the point of incident. The angle between the plummet and the ray is called \!\(\*
    StyleBox[\"theta0\",\nFontSlant->\"Italic\"]\) and is needed in radians. The ray passes the point of incicdents and is refracted along the plummet in medium \!\(\*
    StyleBox[\"nt\",\nFontSlant->\"Italic\"]\). If \!\(\*
    StyleBox[\"ni\",\nFontSlant->\"Italic\"]\) < \!\(\*
    StyleBox[\"nt\",\nFontSlant->\"Italic\"]\) then the refracted ray will propagate between the plummet and the prolongation of the original ray. If \!\(\*
    StyleBox[\"ni\",\nFontSlant->\"Italic\"]\) > \!\(\*
    StyleBox[\"nt\",\nFontSlant->\"Italic\"]\), the ray will propagate outside the prolongation of the ray and the plummet. The angele, also needed in radians, towards the plummet in the lower medium is called \!\(\*
    StyleBox[\"theta1\",\nFontSlant->\"Italic\"]\). Exapmle: for medium \!\(\*
    StyleBox[\"ni\",\nFontSlant->\"Italic\"]\)=1 (air) and medium \!\(\*
    StyleBox[\"nt\",\nFontSlant->\"Italic\"]\)=1.5 (glass) with \!\(\*
    StyleBox[\"theta0\",\nFontSlant->\"Italic\"]\)=\!\(\*
    StyleBox[\"theta1\",\nFontSlant->\"Italic\"]\)=0 we have a transmission coefficient of 0.96 of the original ray.";

imsReflection::usage  = 
    "Computes {1, 1} - imsTransmission[\!\(\*
    StyleBox[\"ni\",\nFontSlant->\"Italic\"]\), \!\(\*
    StyleBox[\"nt\",\nFontSlant->\"Italic\"]\), \!\(\*
    StyleBox[\"theta0\",\nFontSlant->\"Italic\"]\), \!\(\*
    StyleBox[\"theta1\",\nFontSlant->\"Italic\"]\)]";

imsTransmissionAngle::usage="imsTransmissionAngle[\!\(\*
    StyleBox[\"ni\",\nFontSlant->\"Italic\"]\), \!\(\*
    StyleBox[\"nt\",\nFontSlant->\"Italic\"]\), \!\(\*
    StyleBox[\"theta0\",\nFontSlant->\"Italic\"]\)] gives an angle \!\(\*
    StyleBox[\"theta1\",\nFontSlant->\"Italic\"]\)\!\(\*
    StyleBox[\" \",\nFontSlant->\"Italic\"]\)in radians. This is an implementation of Snells law. \!\(\*
    StyleBox[\"ni\",\nFontSlant->\"Italic\"]\) and \!\(\*
    StyleBox[\"nt\",\nFontSlant->\"Italic\"]\) are the refractive indices of the plane of incidencs and transmission respectively. theta0 is the angle, needed in radians, towards the plummet.";\


imsAbsorption::usage="Absorbtion[\!\(\*
    StyleBox[\"alpha\",\nFontSlant->\"Italic\"]\), \!\(\*
    StyleBox[\"d\",\nFontSlant->\"Italic\"]\)] gives the absorbtion rate of a material. \!\(\*
    StyleBox[\"alpha\",\nFontSlant->\"Italic\"]\) is the attenuation constant or the absorbtion coefficient for a material under inspection. \!\(\*
    StyleBox[\"d\",\nFontSlant->\"Italic\"]\) is the thickness of the material in [SI?].";

(* end documentation *)


(* *)
(* define your options *)
(* *)

(* end define options *)


(* *)
(* create own context: hide local functions and variables *)
(* *)

Begin["`Private`"];

(* *)
(* do we need another package ? *)
(* *)
(* Needs[""]; *)

(* *)
(* default values for MyOption *)
(* *) 
(* Options[NameOfYourFunctiont]={MyOption\[Rule]DefaultValue}; *)

(* *)
(* functions contained in package start here*)
(* *)

imsTransmission[ni_, nt_, theta0_, theta1_]:=
  
  Module[ (* isolate local variables *)
      {
        Tp, Ts, (* transmission coefficients are returned *)
        c0,c1, 
        nic0, nic1, ntc0, ntc1,
        top (* to minimise computational effort *)
        }, 
      
      c0=Cos[theta0];
      c1=Cos[theta1];
      
      nic0=ni*c0;
      nic1=ni*c1;
      ntc0=nt*c0;
      ntc1=nt*c1;
      
      top=4*nic0*ntc1;
      
      Tp=top/(ntc0 + nic1)^2;
      Ts=top/(nic0 + ntc1)^2;
      
      Return[{Tp, Ts}];
      ]/;
     
    NumericQ[ni] && NumericQ[nt] && NumericQ[theta0] && NumericQ[theta1]

imsReflection[ni_, nt_, theta0_, theta1_]:=
  
  Module[ (* isolate local variables *)
      {
        Rp, Rs, (* transmission coefficients are returned *)
        Tp, 
        Ts  (* to minimise computational effort *)
        }, 
      
      
      {Tp, Ts} = imsTransmission[ni, nt, theta0, theta1];
      {Rp, Rs} = {1-Tp, 1-Ts};
      
      Return[{Rp, Rs}];
      ]/;
     
    NumericQ[ni] && NumericQ[nt] && NumericQ[theta0] && NumericQ[theta1]


imsTransmissionAngle[ni_, nt_, theta0_]:=
  Module[
      {
        theta1 (* is returned *)
        },
      
      (* theta1 can become complex - check? *)
      
      theta1=ArcSin[(ni/nt)*Sin[theta0] ];
      
      Return[theta1];
      ]/;
    NumericQ[ni] && NumericQ[nt] && NumericQ[theta0]


imsAbsorption[alpha_, d_]:=
  Module[
      {
        },
      Return[Exp[-alpha*d] ];
      ]/;
    NumericQ[alpha] && NumericQ[d]


End[] 
Protect[Evaluate[ Context[] <> "*" ] ]
EndPackage[]