(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: ShapeFunctions.m *)
(* Context: *)
(* 
  Author:oliver ruebenkoenig *)
(* Date: 9.2.2006, Freiburg *)
(* 
  Summary: This package provides utilities to generate shape funcitons *)
(* 
  Package Copyright: GNU GPL *)
(* Package Version: 0.1.4 *)
(* 
  Mathematica Version: 5.2 *)
(* History:
    inserted Simplify and Chop for inverse element mapping;
  bug fix in the shape function of imsHexahedronQuadraticSerendipity;
  Bug fix: the imsInsideUniteElement for tetrahedra did not work correctly;
  Unique symbols in imsInverseElementMapping are in global comntext now;
  bug fix in the documentation of imsElementMapping - 
      it is the other way round...
   *)
(* Keywords: *)
(* Sources: *)
(* 
  Warnings: *)
(* Limitations: *)
(* Discussion: *)
(* Requirements: *)
(* 
  Examples: *)
(* *)



(* Disclaimer *)

(* Whereever the GNU GPL is not applicable, 
  the software should be used in the same spirit. *)

(* Users of this code must verify correctness for their application. *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)

(* Disclaimer: *)

(* This package provides utilities to generate shape funcitons *)

(* Copyright (C) 2005 oliver ruebenkoenig *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)

BeginPackage["Imtek`ShapeFunctions`", {"Imtek`MeshElementLibrary`"}];





(* *)
(* documentation *)
(* *)

(* constructors *)

(* selectors *)

(* predicates *)

imsInsideUnitElementQ::usage = \
"imsInsideUnitElementQ[ elementFamily, coords ] returns True if if coords are in the unit element.";\


(* functions *)

imsShapeFunctionInterpolation::usage = \
"imsShapeFunctionInterpolation[ shapeFunction, nodalValues, elementFamily, mapping ] returns an interpolation function based on the shape function, nodal values and the element family. Optionaly a mapping can be given.";\


imsElementMapping::usage  = \
"imsElementMapping[ shapeFunction, distinationCoords ] returns a function that mappes from the unit element given by the shape function to the distination Coords.";\


imsInverseElementMapping::usage = \
"imsInverseElementMapping[ mappingFunction ] returns a function that provides the inverse of an element mapping funvtion.";\


imsShapeFunctionSymbols::usage="imsShapeFunctionSymbols[ elementName, function, quadPoints, quadWeights ] will initilaize the symbols for an element with shape function function and its derivative. For the integrated shape function and the integated shape function derivative quadrature points and quadrature weights will be used.";\


imsShapeFunction::usage="imsShapeFunction[ elementName ] returns the shape function for an element.";\

imsNShapeFunction::usage="imsNShapeFunction[ elementName ] provides a numerical version of imsShapeFunction.";\


imsShapeFunctionDerivative::usage="imsShapeFunctionDerivative[ elementName ] returns the shape function derivative for an element.";\

imsNShapeFunctionDerivative::usage="imsNShapeFunctionDerivative[ elementName ] provides a numerical version of imsShapeFunctionDerivative.";\


imsIntegratedShapeFunction::usage="imsIntegratedShapeFunction[ elementName ] returns the integrated shape function for an element.";\

imsNIntegratedShapeFunction::usage=
    "imsNIntegratedShapeFunction[ elementName ] provides a numerical version of imsIntegratedShapeFunction.";\


imsIntegratedShapeFunctionDerivative::usage="imsIntegratedShapeFunctionDerivative[ elementName ] returns the integrated shape function derivative for an element.";\

imsNIntegratedShapeFunctionDerivative::usage="imsNIntegratedShapeFunctionDerivative[ elementName ] provides a numerical version of imsIntegratedShapeFunctionDerivative.";\


imsIntegrationWeights::usage="imsIntegrationWeights[ elementName ] returns the integration weights for an element.";\

imsNIntegrationWeights::usage="imsNIntegrationWeights[ elementName ] provides a numerical version of imsIntegrationWeights.";



(* *)
(* options docu *)
(* *)



(* *)
(* error messages *)
(* *)



Begin["`Private`"];



(* *)
(* private imports *)
(* *)
Needs["Imtek`NumericalIntegration`"];



(* *)
(* implementation part *)
(* *)

(* constructor *)
(* *)



(* *)
(* define your options *)
(* *)



(* selector *)
(* *)



(* predicates *)
(* *)

imsInsideUnitElementQ[ 
      "imsLine", { r_ } ] := ( -1\[LessEqual] r \[LessEqual] 1);
imsInsideUnitElementQ[ 
      "imsTriangle", { r_, s_ } ] := (0\[LessEqual] r \[LessEqual] 1) && ( 
        0 \[LessEqual] s \[LessEqual] 1 ) && ( 
        0\[LessEqual] r+s \[LessEqual] 1 );
imsInsideUnitElementQ[ 
      "imsQuad", { r_, 
        s_ } ] := (-1\[LessEqual] r \[LessEqual] 1) && ( -1 \[LessEqual] 
          s \[LessEqual] 1 );
imsInsideUnitElementQ[ 
      "imsTetrahedron", { r_, s_, t_ } ] := ( 
        0 \[LessEqual] r \[LessEqual] 1 ) && ( 
        0 \[LessEqual] s \[LessEqual] 1 ) && ( 
        0 \[LessEqual] t \[LessEqual] 1 ) && ( 
        0 \[LessEqual]  r + s + t \[LessEqual] 1 );
imsInsideUnitElementQ[ 
      "imsHexahedron", { r_, s_, 
        t_ } ] := (-1\[LessEqual] r \[LessEqual] 1) && ( -1 \[LessEqual] 
          s \[LessEqual] 1 )  && ( -1 \[LessEqual] t \[LessEqual] 1 );



(* private functions *)
(* *)

(* Variables[] is not defined for Function *)
SetAttributes[ sFD, Listable ]
sFD[ shapeFunction_ ] := 
    Derivative[ Sequence @@ # ][ shapeFunction ]& /@ 
          Outer[ KroneckerDelta, Range[ # ], Range[ # ] ]&[ 
      Length[ shapeFunction[[ 1 ]] ] ];

(* public functions *)
(* *)

imsShapeFunctionInterpolation[ shapeFunction_, nodalValues_List, 
      elementFamily_String, mapping_:Identity ] := Block[
      { vars,mappedVars, evalShapeFunctions, expr },
      
      vars = 
        Table[ Unique[ Global`x ], { Length[ First[ shapeFunction ] ] } ];
      mappedVars = mapping[ vars ];
      evalShapeFunctions = shapeFunction @@ mappedVars;
      expr = Plus @@ Times[ evalShapeFunctions, nodalValues ];
      Return[
        Function[ Evaluate[ vars ],
          Evaluate[ 
            If[ Evaluate[ 
                imsInsideUnitElementQ[ elementFamily, 
                  Evaluate[ mappedVars ] ] ], Evaluate[ expr ], 0 ] ] ]
        ]
      ];

imsElementMapping[ shapeFunction_, sourceCoords_List ] := 
    Function[ Evaluate[ First[ shapeFunction ] ], 
      Evaluate[ 
        Apply[ Plus, 
          Times[ Last[ shapeFunction ], # ]& /@ Transpose[ sourceCoords ], 
          1 ] ] ];

imsInverseElementMapping[ mappingFunction_ ] := Module[
    { mappingFunctionVars, vars, body },
    
    mappingFunctionVars = First[ mappingFunction ];
    vars = Table[ Unique[ Global`x ], { Length[ mappingFunctionVars ] } ];
    body = 
      Flatten[ mappingFunctionVars /. 
          Solve[ Simplify[ 
              Chop[ Thread[ 
                  Equal[ vars,
                    mappingFunction[ 
                      Sequence @@ mappingFunctionVars ] ] ] ] ], 
            mappingFunctionVars ] ];
    
    Return[
      Function[ Evaluate[ vars ], Evaluate[ body ] ]
      ]
    ]

imsShapeFunctionSymbols[ name_Symbol, function_, quadPoints_, quadWeights_ ] := 
    CompoundExpression[
      imsShapeFunction[ name ] = function,
      imsNShapeFunction[ name ] = N[ function ],
      
      imsShapeFunctionDerivative[ name ]  = sFD[ imsShapeFunction[ name ] ],
      imsNShapeFunctionDerivative[ name ]  = 
        N[ imsShapeFunctionDerivative[ name ] ],
      
      imsIntegratedShapeFunction[ name ]= 
        imsShapeFunction[ name ][ Sequence @@ # ]& /@ quadPoints,
      imsNIntegratedShapeFunction[ name ]= 
        N[ imsIntegratedShapeFunction[ name ] ],
      
      imsIntegratedShapeFunctionDerivative[ name ]= 
        Through[ imsShapeFunctionDerivative[ name ][ Sequence @@ # ] ]& /@ 
          quadPoints,
      imsNIntegratedShapeFunctionDerivative[ name ]= 
        N[ imsIntegratedShapeFunctionDerivative[ name ] ],
      
      imsIntegrationWeights[ name ] = quadWeights,
      imsNIntegrationWeights[ name ] = N[ imsIntegrationWeights[ name ] ];
      ];





imsShapeFunctionSymbols[ imsLineLinear1DOF, 
  Function[ { Global`r }, { (1 -Global`r ) /2 , ( 1+ Global`r )/ 2 } ], 
  imsUnitGaussianQuadraturePoints[ 3, 1 ], 
  imsUnitGaussianQuadratureWeights[ 3, 1 ] ]



imsShapeFunctionSymbols[ imsLineQuadratic1DOF, 
  Function[ { Global`r }, { (Global`r^2 - Global`r)/2, 
      1-Global`r^2,(Global`r^2 + Global`r)/2  } ], 
  imsUnitGaussianQuadraturePoints[ 4, 1 ], 
  imsUnitGaussianQuadratureWeights[ 4, 1 ] ]



imsShapeFunctionSymbols[ imsLineCubic1DOF, Function[ { Global`r }, { 
      -9/16 ( Global`r + 1/3) ( Global`r - 1/3 )( Global`r -1 ), 
      27/16 ( Global`r + 1 ) ( Global`r - 1/3 )( Global`r -1 ), 
      -27/16 ( Global`r + 1 ) ( Global`r + 1/3 )( Global`r -1 ), 
      9/16 ( Global`r + 1 ) ( Global`r + 1/3 )( Global`r -1/3 )
       } ], imsUnitGaussianQuadraturePoints[ 5, 1 ], 
  imsUnitGaussianQuadratureWeights[ 5, 1 ] ]







imsShapeFunctionSymbols[ imsTriangleLinear1DOF, 
  Function[ { Global`r, Global`s }, { 1-Global`r-Global`s, Global`r, 
      Global`s } ], imsUnitTriangleQuadraturePoints[ 3 ], 
  imsUnitTriangleQuadratureWeights[ 3 ] ]



imsShapeFunctionSymbols[ imsQuadLinear1DOF, 
  Function[ { Global`r, Global`s }, { 1/4 ( 1 + Global`r ) ( 1 + Global`s ), 
      1/4 ( 1 - Global`r ) ( 1 + Global`s ), 
      1/4 ( 1 - Global`r ) ( 1 - Global`s ), 
      1/4 ( 1 + Global`r ) ( 1 - Global`s ) } ], 
  imsUnitGaussianQuadraturePoints[ 2, 2 ], 
  imsUnitGaussianQuadratureWeights[ 2, 2 ] ]





imsShapeFunctionSymbols[ imsTriangleQuadratic1DOFSerendipity, 
  Function[ { Global`r, Global`s },  { 
      1 - 3 Global`r - 3 Global`s + 2 Global`r^2 + 4 Global`r Global`s + 
        2 Global`s^2, 
      - Global`r + 2 Global`r^2,
      - Global`s + 2 Global`s^2, 
      4 Global`r - 4 Global`r Global`s - 4 Global`r^2,
      4 Global`r Global`s,
      4 Global`s - 4 Global`r Global`s - 4 Global`s^2 } ], 
  imsUnitTriangleQuadraturePoints[ 7 ], 
  imsUnitTriangleQuadratureWeights[ 7 ] ]



imsShapeFunctionSymbols[ imsQuadQuadratic1DOFSerendipity, 
  Function[ { Global`r, Global`s }, {
      1/4 ( 1 + Global`r ) ( 1 + Global`s ) ( Global`r + Global`s -1 ),
      1/4 ( 1 - Global`r ) ( 1 + Global`s ) ( -Global`r + Global`s -1 ),
      1/4 ( 1 - Global`r ) ( 1 - Global`s ) ( -Global`r - Global`s -1 ),
      1/4 ( 1 + Global`r ) ( 1 - Global`s ) ( Global`r - Global`s -1 ),
      1/2 ( 1 - Global`r^2 ) ( 1 + Global`s ),
      1/2 ( 1 - Global`r ) ( 1 - Global`s^2 ),
      1/2 ( 1 - Global`r^2 ) ( 1 - Global`s ),
      1/2 ( 1 + Global`r ) ( 1 - Global`s^2 )
      } ], imsUnitGaussianQuadraturePoints[ 3, 2 ], 
  imsUnitGaussianQuadratureWeights[ 3, 2 ] ]















imsShapeFunctionSymbols[ imsP2P1TriangleSerendipityPrimary, 
  imsShapeFunction[imsTriangleQuadratic1DOFSerendipity], 
  imsUnitTriangleQuadraturePoints[ 7 ], 
  imsUnitTriangleQuadratureWeights[ 7 ] ]

imsShapeFunctionSymbols[ imsP2P1TriangleSerendipitySecondary, 
  imsShapeFunction[imsTriangleLinear1DOF ], 
  imsUnitTriangleQuadraturePoints[ 7 ], 
  imsUnitTriangleQuadratureWeights[ 7 ] ]







imsShapeFunctionSymbols[ imsTetrahedronLinear1DOF, 
  Function[ { Global`r, Global`s, Global`t }, { 
      1 - Global`r - Global`s - Global`t, Global`r, Global`s, Global`t } ], 
  imsUnitTetrahedronQuadraturePoints[ 5 ], 
  imsUnitTetrahedronQuadratureWeights[ 5 ] ]



imsShapeFunctionSymbols[ imsHexahedronLinear1DOF, 
  Function[ { Global`r, Global`s, Global`t },{ 
      1/8 ( 1 + Global`r ) ( 1 + Global`s ) ( 1 + Global`t),
      1/8 ( 1 - Global`r ) ( 1 + Global`s ) ( 1 + Global`t),
      1/8 ( 1 - Global`r ) ( 1 - Global`s ) ( 1 + Global`t),
      1/8 ( 1 + Global`r ) ( 1 - Global`s ) ( 1 + Global`t),
      1/8 ( 1 + Global`r ) ( 1 + Global`s ) ( 1 - Global`t),
      1/8 ( 1 - Global`r ) ( 1 + Global`s ) ( 1 - Global`t),
      1/8 ( 1 - Global`r ) ( 1 - Global`s ) ( 1 - Global`t),
      1/8 ( 1 + Global`r ) ( 1 - Global`s ) ( 1 - Global`t)
      } ], imsUnitGaussianQuadraturePoints[ 2, 3 ], 
  imsUnitGaussianQuadratureWeights[ 2, 3 ] ]





imsShapeFunctionSymbols[ imsTetrahedronQuadratic1DOFSerendipity, 
  Function[ { Global`r, Global`s, Global`t },  { 
      2 Global`r^2 + 2 Global`s^2 + 2 Global`t^2 + 4 Global`r Global`s + 
        4 Global`r Global`t + 4 Global`s Global`t - 3 Global`r - 3 Global`s - 
        3 Global`t +1,
      2 Global`r^2 - Global`r,
      2 Global`s^2 - Global`s, 
      2 Global`t^2 - Global`t,
      4 Global`r - 4 Global`r^2 - 4 Global`r Global`s - 4 Global`r Global`t,
      4 Global`r Global`s,
      4 Global`s - 4 Global`s Global`r - 4 Global`s^2 - 4 Global`s Global`t,
      4 Global`r Global`t,
      4 Global`s Global`t,
      4 Global`t - 4 Global`t Global`r - 4 Global`t Global`s- 4 Global`t^2 
      } ], imsUnitTetrahedronQuadraturePoints[ 5 ], 
  imsUnitTetrahedronQuadratureWeights[ 5 ] ]



epr = 1 + Global`r;
emr = 1 - Global`r;
eps = 1 + Global`s;
ems = 1 - Global`s;
ept = 1 + Global`t;
emt = 1 - Global`t;

emrr = 1 - Global`r^2;
emss = 1 - Global`s^2;
emtt = 1 - Global`t^2;

imsShapeFunctionSymbols[ imsHexahedronQuadratic1DOFSerendipity, 
    Function[ { Global`r, Global`s, Global`t },
      Evaluate[
        { 
          1/8 ( epr eps ept - emrr eps ept - epr emss ept - epr eps emtt ),
          1/8 ( emr eps ept - emrr eps ept - emr emss ept - emr eps emtt ),
          1/8 ( emr ems ept - emr emss ept - emrr ems ept - emr ems emtt ),
          1/8 ( epr ems ept - emrr ems ept - epr emss ept - epr ems emtt ),
          1/8 ( epr eps emt - emrr eps emt - epr emss emt - epr eps emtt ),
          1/8 ( emr eps emt - emrr eps emt - emr emss emt - emr eps emtt ),
          1/8( emr ems emt - emr emss emt - emrr ems emt - emr ems emtt ),
          1/8( epr ems emt - emrr ems emt - epr emss emt - epr ems emtt ),
          1/4 ( emrr eps ept ),
          1/4( emr emss ept ),
          1/4( emrr ems ept ),
          1/4( epr emss ept ),
          1/4 ( emrr eps emt ),
          1/4 ( emr emss emt ),
          1/4 ( emrr ems emt ),
          1/4 ( epr emss emt ),
          1/4 ( epr eps emtt ),
          1/4 ( emr eps emtt ),
          1/4 ( emr ems emtt ),
          1/4 ( epr ems emtt )
          }
        ] ], imsUnitGaussianQuadraturePoints[ 4, 3 ], 
    imsUnitGaussianQuadratureWeights[ 4, 3 ] ];

Remove[ epr, emr, eps, ems, ept, emt, emrr, emss, emtt ];



(* representors *)
(* *)



(* Begin Private *)
End[]



(* Protect[] *)
EndPackage[] 
