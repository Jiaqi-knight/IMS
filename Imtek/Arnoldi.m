(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: Arnoldi.m *)
(* Context: *)
(* Author:christian moosmann, 
  jan lienemann *)
(* Date: 1.3.2005,Freiburg i Br *)
(* 
  Summary: This package performes the Arnoldi algorithm on a given System of \
ODE's. *)
(* Package Copyright: GNU GPL *)
(* Package Version: 0.3 *)
(* 
  Mathematica Version: 5.0 *)
(* 
  History: 23.11.2005: polynomial reduction *)
(* Keywords: *)
(* 
  Sources: *)
(* Warnings: *)
(* Limitations: *)
(* Discussion: *)
(* 
  Requirements: *)
(* Examples: *)
(* *)



(* Disclaimer: *)

(* <one line to give the program's name and a brief idea of what it does.> *)
\

(* Copyright (C) 2004 christian moosmann *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)

BeginPackage["Imtek`Arnoldi`",{"Imtek`MORTools`","Imtek`Debug`"}];





(* *)
(* documentation *)
(* *)
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ ArnoldiReduction, $Context ];
imsCreateObsoleteFunctionInterface[ DisplayStatus, $Context ];
imsCreateObsoleteFunctionInterface[ ExpansionPoints, $Context ];


(* functions *)
imsArnoldiReduction::usage = 
  "imsArnoldiReduction[system,order] performs model order reduction on the ODE system. A list of the form {reducedSystem,ProjectionMatrix} is returned. Iterations determines the size of the reduced system." \

imsDisplayStatus::usage="imsDisplayStatus\[Rule]False is to disable the status display during reduction"

imsExpansionPoints::usage="A list of expansion points"



(* *)
(* options docu *)
(* *)



(* *)
(* Error Messages *)
(* *)

imsArnoldi::"notfirstsecondorder" = "`1` is neither first nor second order.";



(* *)
(* implementation part *)
(* *)




Begin["`Private`"];



Needs[ "Imtek`ShowStatus`" ]
Needs["Imtek`System`"]
Needs["Imtek`MORTools`"]
Needs["Utilities`FilterOptions`"]



(* *)
(* define your options *)
(* *)

Options[imsArnoldiReduction]={imsDisplayStatus\[Rule]True,
      imsExpansionPoints\[Rule]{0.}};




(* functions *)
SetAttributes[imsArnoldiReduction,HoldFirst];
  
  imsArnoldiReduction[OrgSystem_,thesize_,opts___]:=
    
    Module[{myDisplayStatus,myExpansionPoints,matV,matVT,redSystem,myLoad,
        newVec,loadNum,expNum,test,lsopts,sys,dummy,mc,validloads,a,size},
      
      myDisplayStatus=imsDisplayStatus/.{opts}/.Options[imsArnoldiReduction];
      myExpansionPoints=
        imsExpansionPoints/.{opts}/.Options[imsArnoldiReduction];
      expNum=Length[myExpansionPoints];
      lsopts=FilterOptions[ LinearSolve, opts ];
      matV={};
      
      sys=
        If[imsLinearQ[OrgSystem,dummy],OrgSystem,
          imsLinearizeSystem[OrgSystem,
            Table[0.,{imsGetSystemSize[OrgSystem]}]]];
      loadNum=Dimensions[imsGetLoad[sys]][[2]];
      mc=First[
          Which[imsSecondOrderQ[sys],imsGetInertia[sys],
            imsFirstOrderQ[sys],imsGetDamping[sys],
            True,Message[imsArnoldi::"notfirstsecondorder",sys];
            Return[$Failed];
            ]];
      
      size=If[Head[thesize]=!=List,Table[thesize,{loadNum}],thesize];
      
      For[k=1,k\[LessEqual]expNum,++k,
        If[myDisplayStatus,imsShowStatus["Factorization is performed"]];
        matAdecomp=
          LinearSolve[-First[imsGetStiffness[sys]]-myExpansionPoints[[k]]*mc,
            lsopts];
        myLoad=-matAdecomp[Normal[imsGetLoad[sys]]];
        imsAppendOrthoNormal[matV,#]&/@Transpose[myLoad];
        
        For[j=1,j<Max[size],++j,
          
          If[myDisplayStatus,
            imsShowStatus["Vector " <>ToString[j+1]<> " is being built"]];
          (* 
            Here we get the numbers of all inputs which still should be \
calculated with the current size *)
          
          validloads=Flatten[Position[size,a_/;j<a]];
          
          newVec=matAdecomp[ 
              mc.Transpose[matV[[-(1+Length[size]-validloads)]] ]];
          imsAppendOrthoNormal[matV,#] & /@ Transpose[newVec];
          
          
          imsDebugMessage["Imtek`Arnoldi`imsArnoldiReduction", 2, 
            "Imtek`Arnoldi`imsArnoldiReduction: validloads: "<>ToString[
                validloads]<>" | size before: "<>ToString[size]<>" | size now: "<>
              ToString[Cases[size,a_/;j<a]]<>" | j: "<>ToString[j]<>" | Taken: "<>
              ToString[-(1+Length[size]-validloads)]];
          (* And the we remove all input sizes which are too small *)
        
            size=Cases[size,a_/;j<a];
          ];
        ];
      
      If[myDisplayStatus,imsShowStatus["Reduced Matricies are computed"]];
      
      matVT=matV;
      matV=Transpose[matV];
      redSystem=imsProjectSystem[OrgSystem,matV,matVT];
      
      If[myDisplayStatus,imsShowStatus[""]];
      Return[{redSystem,matV}]
      ];


(* private functions *)
(*  *)


(* Backup 
    
    SetAttributes[appendOrthoNormal,HoldFirst];
  
  appendOrthoNormal[matV_,newVec_,threshold_]:=
    Module[{hij,newVecNorm,internalVec},
      internalVec=newVec;
      For[i=1,i\[LessEqual]Length[matV],i++,
        hij=internalVec.matV[[i]];
        internalVec=internalVec-hij*matV[[i]];
        ];
      
      newVecNorm=Norm[internalVec];
      If[newVecNorm>threshold,
        
        internalVec=internalVec/newVecNorm;
        AppendTo[matV,internalVec];
        ];
      Return[newVecNorm];
      ];
  
  imsArnoldiReduction[matC_,matK_,load_List,size_Integer,opts___]:=
    Module[{matV,matVT,matKfunc,vectorVnext,vectorVi,vectorB1,i,j,vectorW,
        matH,hij,hj1j,myDisplayStatus},
      myDisplayStatus=imsDisplayStatus/.{opts}/.Options[imsArnoldiReduction];
      If[myDisplayStatus,
        imsShowStatus["Factorization of matK is performed"]];
      matKfunc=LinearSolve[matK,FilterOptions[LinearSolve,opts]];
      vectorB1=-matKfunc[load];
      If[debug,Print["Norm of the first vector is ",vectorNorm[vectorB1]]];
      matV={vectorB1/Norm[vectorB1]};
      (*matH=Table[0,{size},{size}];*) 
      
      For[j=1,j\[LessEqual]size,++j,vectorW=matKfunc[matC.matV[[j]]];
        If[myDisplayStatus,
          imsShowStatus["Vector " <>ToString[j+1]<> " is beeing build"]];
        
        For[i=1,i\[LessEqual]j,++i,vectorVi=matV[[i]];
          hij=(*matH[[i,j]]=*)vectorW.vectorVi;
          vectorW=vectorW-hij*vectorVi];
        hj1j=Norm[vectorW];
        If[debug,Print["Step ",j,": norm of the vector is ",hj1j]];
        (*If[j<size,matH[[j+1,j]]=hj1j];*)
        
        If[hj1j\[NotEqual]0.0,vectorVnext=vectorW/hj1j];
        If[j<size,AppendTo[matV,vectorVnext]]];
      If[myDisplayStatus,imsShowStatus["Reduced Matricies are computed"]];
      matVT=matV;
      matV=Transpose[matV];
      matCred=matVT.(matC.matV);
      matKred=matVT.(matK.matV);
      loadred=matVT.load;
      (*matH=Inverse[matH];*)
      If[myDisplayStatus,imsShowStatus[""]];
      {matCred,matKred,loadred,matV}];*)



(* representors *)



End[] (* of Begin Private *)



(* Protect[] (* anything *) *)
EndPackage[] 




