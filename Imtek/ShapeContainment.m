(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)











BeginPackage["Imtek`ShapeContainment`"]

imsinsideQ::usage:="imsinsideQ[{x,y,z},s] gives true when the point given by the 3D coordinates {x,y,z} lie inside the shape s. The shape s is either a imsSolidBox, a imsSolidCylinder, a imsSolidSphere, a imsSolidPrism or a imsSolidTetrahedron.\n imsinsideQ[{x,y,z},{s1,s2,\[Ellipsis]}] gives True when the point lies inside any one of the shapes in the list {s1,s2,\[Ellipsis]}.";\


imsSolidBox::usage:="imsSolidBox[{xmin,ymin,zmin},{xmax,ymax,zmax}] defines a brick with two extremal coordinates.";\


imsSolidSphere::usage:="imsSolidSphere[{xc,yc,zc},radius] defines a sphere with center coordinates and radius.";\


imsSolidCylinder::usage:="imsSolidCylinder[{xc,yc,zc},radius,height] defines a cylinder with center coordinates, radius in the x-y plane and a z-coordinate height.\n
    imsSolidCylinder[{xs,ys,zs},{xe,ye,ze},radius] defines an oriented cylinder with axis start and end coordinates, and a radius measured perpendicular to the axis.";\


imsSolidPrism::usage:="imsSolidPrism[v1,v2,v3,v4] defines a prism by three base vertex coordinates v1, v2 and v3, together with the fourth vertex coordinate v4 that has an edge connected to v1. The other vertices have implicitly defined coordinates.";\


imsSolidTetrahedron::usage:="imsSolidTetrahedron[v1,v2,v3,v4] defines a tetrahedron by its four vertex coordinates v1, v2, v3 and v4.";\


imsconvertSolidShapeToShape::usage="imsconvertSolidShapeToShape[s] converts this package's objects to graphical objects from the Graphics`Shapes` selection.";\


Begin["`Private`"]
<<Graphics`Shapes`;



\!\(\(\(findEulerAngles[v : {x_, y_, z_}] := Module[{\[Phi], \[Theta], \[Phi] = 0.0}, \[IndentingNewLine]\[Phi] = ArcCos[{x, y} . {0, 1}]; \[IndentingNewLine]\[Theta] = ArcCos[v . {0, 0, 1}]; \[IndentingNewLine]Return[{\[Phi], \[Theta], \[Psi]}]\[IndentingNewLine]];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsinsideQ[point : {_, _, _}, collection : {\((_imsSolidBox | _imsSolidSphere | _imsSolidCylinder | _imsSolidPrism | _imsSolidTetrahedron)\) .. }] := Or @@ \((\(imsinsideQ[point, #] &\) /@ collection)\);\)\(\[IndentingNewLine]\)
  \)\n
  \(\(imsinsideQ[point : {x_, y_, z_}, s : imsSolidBox[{xmi_, ymi_, zmi_}, {xma_, yma_, zma_}]] := \((\((x \[GreaterEqual] xmi && x \[LessEqual] xma)\) && \((y \[GreaterEqual] ymi && y \[LessEqual] yma)\) && \((z \[GreaterEqual] zmi && z \[LessEqual] zma)\))\);\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsinsideQ[point : {_, _, _}, imsSolidSphere[center : {_, _, _}, radius_]] := Module[{centerDistance}, \[IndentingNewLine]centerDistance = point - center; \[IndentingNewLine]centerDistance . centerDistance \[LessEqual] radius^2\[IndentingNewLine]];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsinsideQ[point : {x_, y_, z_}, imsSolidCylinder[c : {xc_, yc_, zc_}, \[Rho]xy_, hz_]] := Module[{r}, \[IndentingNewLine]r = {x, y} - {xc, yc}; \[IndentingNewLine]\((\((r . r \[LessEqual] \[Rho]xy^2)\) && \((\((z - zc)\) \[LessEqual] hz)\))\)\[IndentingNewLine]];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsinsideQ[point : {x_, y_, z_}, imsSolidCylinder[start : {xs_, ys_, zs_}, end : {xe_, ye_, ze_}, \[Rho]_]] := Module[{localPosition = point - start, localAxis = end - start, localLength = \@\(localAxis . localAxis\), localHeight = localPosition . localAxis/localLength, radialVector = localPosition - localHeight \((localAxis/localLength)\)}, \[IndentingNewLine]\((\((radialVector . radialVector \[LessEqual] \[Rho]^2)\) && \((localHeight \[LessEqual] localLength)\))\)\[IndentingNewLine]];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsinsideQ[point : {_, _, _}, imsSolidPrism[v1 : {_, _, _}, v2 : {_, _, _}, v3 : {_, _, _}, v4 : {_, _, _}]] := Module[{r = v4 - v1, a = point - v1, b = v2 - v1, c = v3 - v1}, \[IndentingNewLine]And @@ \((\(\((# \[GreaterEqual] 0.0)\) &\) /@ {\[IndentingNewLine]Cross[b, c] . \((a)\), \[IndentingNewLine]Cross[r, b] . \((a)\), \[IndentingNewLine]Cross[r, v3 - v2] . \((point - v2)\), \[IndentingNewLine]Cross[r, \(-c\)] . \((point - v3)\), \[IndentingNewLine]Cross[c, b] . \((point - v4)\)})\)\[IndentingNewLine]];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsinsideQ[point : {_, _, _}, imsSolidTetrahedron[v1 : {_, _, _}, v2 : {_, _, _}, v3 : {_, _, _}, v4 : {_, _, _}]] := Module[{r = v4 - v1, a = point - v1, b = v2 - v1, c = v3 - v1}, \[IndentingNewLine]And @@ \((\(\((# \[GreaterEqual] 0.0)\) &\) /@ {\[IndentingNewLine]Cross[b, c] . \((a)\), \[IndentingNewLine]Cross[r, b] . \((a)\), \[IndentingNewLine]Cross[v4 - v2, v3 - v2] . \((point - v2)\), Cross[v4 - v3, \(-c\)] . \((point - v3)\)})\)\[IndentingNewLine]];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsconvertSolidShapeToShape[imsSolidBox[{xmi_, ymi_, zmi_}, {xma_, yma_, zma_}]] := imsGraphics3D[Cuboid[{xmi, ymi, zmi}, {xma, yma, zma}]];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsconvertSolidShapeToShape[imsSolidSphere[center : {_, _, _}, radius_]] := TranslateShape[imsGraphics3D[Sphere[radius, 10, 10]], center];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsconvertSolidShapeToShape[imsSolidCylinder[c : {xc_, yc_, zc_}, \[Rho]xy_, hz_]] := Module[{n = 20}, \[IndentingNewLine]TranslateShape[{imsGraphics3D[Cylinder[\[Rho]xy, hz/2. , n]], imsGraphics3D[imsPolygon[Table[{\[Rho]xy\ Sin[i], \[Rho]xy\ Cos[i], hz/2. }, {i, \[Pi]/n, 2  \[Pi] - \[Pi]/n, 2  \[Pi]/n}]]], imsGraphics3D[imsPolygon[Table[{\[Rho]xy\ Sin[i], \[Rho]xy\ Cos[i], \(-hz\)/2. }, {i, \[Pi]/10, 2  \[Pi] - \[Pi]/10, \[Pi]/5}]]]}, {0, 0, hz/2. } + c]];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsconvertSolidShapeToShape[imsSolidCylinder[start : {xs_, ys_, zs_}, end : {xe_, ye_, ze_}, \[Rho]_]] := Module[{n = 20, axisVector = end - start, h, c}, \[IndentingNewLine]h = axisVector . axisVector; \[IndentingNewLine]h = h/\@h; \[IndentingNewLine]c = \((end + start)\)/2. ; \[IndentingNewLine]TranslateShape[{imsGraphics3D[Cylinder[\[Rho], h/2. , n]], imsGraphics3D[imsPolygon[Table[{\[Rho]\ Sin[i], \[Rho]\ Cos[i], h/2. }, {i, \[Pi]/n, 2  \[Pi] - \[Pi]/n, 2  \[Pi]/n}]]], imsGraphics3D[imsPolygon[Table[{\[Rho]\ Sin[i], \[Rho]\ Cos[i], \(-h\)/2. }, {i, \[Pi]/10, 2  \[Pi] - \[Pi]/10, \[Pi]/5}]]]}, {0, 0, h/2. } + c]];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(\(imsconvertSolidShapeToShape[imsSolidPrism[v1 : {_, _, _}, v2 : {_, _, _}, v3 : {_, _, _}, v4 : {_, _, _}]] := Module[{r = v4 - v1}, imsGraphics3D[{imsPolygon[{v2, v1, v3}], imsPolygon[{v1, v2, v2 + r, v1 + r}], imsPolygon[{v2, v3, v3 + r, v2 + r}], imsPolygon[{v3, v1, v1 + r, v3 + r}], imsPolygon[{v1 + r, v2 + r, v3 + r}]}]\[IndentingNewLine]];\)\(\[IndentingNewLine]\)
  \)\[IndentingNewLine]
  \(imsconvertSolidShapeToShape[imsSolidTetrahedron[v1 : {_, _, _}, v2 : {_, _, _}, v3 : {_, _, _}, v4 : {_, _, _}]] := imsGraphics3D[{imsPolygon[{v2, v1, v3}], imsPolygon[{v1, v2, v4}], imsPolygon[{v2, v3, v4}], imsPolygon[{v3, v1, v4}]}];\)\)



End[]
EndPackage[]