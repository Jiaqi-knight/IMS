(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title:Node.m *)
(* Context: *)
(* Author: oliver ruebenkoenig *)
(* 
  Date:29.11.2005, Imtek, Freiburg *)
(* 
  Summary:This is the IMTEK Node package *)
(* Package Copyright:GNU GPL *)
(* 
  Package Version:0.1.91 *)
(* Mathematica Version:5.2 *)
(* History:
    added imsSetMarkers;
  typo: imsSpatialDegreesOfFreedom;
  added functions for spatial and temporal degrees of freedomm;
  the constuctore is now private - 
    so coords and values are not seen in the global context anymore;
  Public export of symbol imsNode
   *)
(* Keywords: *)
(* Sources: *)
(* Warnings: *)
(* Limitations: *)
(* 
  Discussion: *)
(* Requirements: *)
(* Examples: *)
(* *)



BeginPackage["Imtek`Nodes`"];





(* *)
(* Docu *)
(* *)
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ MakeNode, $Context ];
imsCreateObsoleteFunctionInterface[ Node, $Context ];
imsCreateObsoleteFunctionInterface[ NodeQ, $Context ];
imsCreateObsoleteFunctionInterface[ DataNodeQ, $Context ];
imsCreateObsoleteFunctionInterface[ GetIds, $Context ];
imsCreateObsoleteFunctionInterface[ GetCoords, $Context ];
imsCreateObsoleteFunctionInterface[ GetMarkers, $Context ];
imsCreateObsoleteFunctionInterface[ GetValues, $Context ];
imsCreateObsoleteFunctionInterface[ GetDatas, $Context ];
imsCreateObsoleteFunctionInterface[ SetValues, $Context \
];imsCreateObsoleteFunctionInterface[ NodePoint, $Context \
];imsCreateObsoleteFunctionInterface[ NodeIdText, $Context \
];imsCreateObsoleteFunctionInterface[ NodeMarkerText, $Context \
];imsCreateObsoleteFunctionInterface[ NodeValueText, $Context \
];imsCreateObsoleteFunctionInterface[ NodeValueText3D, $Context \
];imsCreateObsoleteFunctionInterface[ NodeDataText, $Context \
];imsCreateObsoleteFunctionInterface[ To3DNodes, $Context \
];imsCreateObsoleteFunctionInterface[ To3DPlotNodes, $Context ];

imsMakeNode::usage = \
"imsMakeNode[ id, coords, marker, {{values}}, data ] returns an imsNode expression. Marker defaults to 0. Values defaults to {{0.}}. Data is optional.";\


imsNode::usage = "imsNode is the datastructure returned by imsMakeNode.";

imsNodeQ::usage =
  "imsNodeQ[ expr ] returns True if expr is a imsNode."
imsDataNodeQ::usage =
  "imsDataNodeQ[ expr ] returns True if expr is an imsNode with additional data set."
\

imsGetIds::usage = 
  "imsGetIds[ imsNode ] returns the id of a imsNode expression."

imsGetCoords::usage = 
  "imsGetCoords[ imsNode ] returns the coords of a imsNode expression."

imsGetMarkers::usage = 
  "imsGetMarkers[ imsNode ] returns markers of an imsNode expression."

imsGetValues::usage = 
  "imsGetValues[ imsNode ] returns values of a imsNode expression. If part is given values[[part]] is returned."

imsGetDatas::usage = 
  "imsGetDatas[ imsNode ] returns the data of a imsNode expression if it is set."
\

imsSetValues::usage =
  "imsSetValues[ imsNode, {newValues} ] returns imsNode with values replaced by newValues."

imsSetMarkers::usage =
  "imsSetMarkers[ imsNode, {newMarker} ] returns imsNode with marker replaced by newMarker."
\


imsNodePoint::usage = 
  "imsNodePoint[ imsNode ] returns a Graphics expression imsPoint with coords of imsNode."

imsNodeIdText::usage = 
  "imsNodeIdText[ imsNode, offset, dir ] returns a Graphics expression Text with id of imsNode at coords. Offset and dir are the same as in a Text Expr."

imsNodeMarkerText::usage = 
  "imsNodeMarkerText[ imsNode, offset, dir ] returns a Graphics expression Text with marker of imsNode at coords. Offset and dir are the same as in a Text Expr."

imsNodeValueText::usage = 
  "imsNodeValueText[ imsNode, part, offset, dir ] returns a Graphics expression Text with value[[part]] of imsNode at coords. Offset and dir are the same as in a Text Expr."

imsNodeValueText3D::usage = 
  "imsNodeValueText3D[ imsNode, offset, dir ] returns a Graphics expression Text with value of imsNode at the joined 3D coords and node value. offset and dir are the same as in a Text Expr."

imsNodeDataText::usage = 
  "imsNodeDataText[ imsNode, offset, dir ] returns a Graphics expression Text with data of imsNode at coords. offset and dir are the same as in a Text Expr."

imsTo3DNodes::usage = 
  "returns a imsNode expression with coords set to 3D. The 3rd coord will be set to value."

imsTo3DPlotNodes::usage = \
"returns a imsNode expression with coords set to 3D. The 3rd coord will be set to value[[ Sequence ]].";\


imsSpatialDegreesOfFreedom::usage = \
"imsSpatialDegreesOfFreedom[ imsNode ] returns the number of spacial degrees of freedom for node.";\


imsTemporalDegreesOfFreedom::usage = 
    "imsTemporalDegreesOfFreedom[ imsNode ] returns the number of temporal degrees of freedom for node.";





Begin["`Private`"];



(* Constructor *)

imsMakeNode[ id_, coords_, marker_Integer:0, value_:{{0.}} , data___ ]/; 
      MatrixQ[ value ] :=  imsNode[ id, coords, marker, value, data ];



(* *)
(* define your options *)
(* *)

(* end define options *)



(* Predicates *)
imsNodeQ[ a_imsNode ] := True;
imsDataNodeQ[ imsNode[ id_, coords_, marker_,  value_, data_ ]  ] := True;
imsDataNodeQ[ ___ ] := False;
imsNodeQ[ ___ ]:= False



(* Selctor *)
SetAttributes[ imsGetIds, Listable ];
SetAttributes[ imsGetCoords, Listable ];
SetAttributes[ imsGetMarkers, Listable ];
(* SetAttributes[ imsGetValues, Listable ]; *)

SetAttributes[ imsGetDatas, Listable ];

imsGetIds[ imsNode[ id_, coords_, marker_, value_, data___ ]  ] := id;
imsGetCoords[ imsNode[ id_, coords_, marker_, value_, data___ ] ] :=coords;
imsGetMarkers[ imsNode[ id_, coords_, marker_, value_, data___ ] ] := marker
imsGetValues[ imsNode[ id_, coords_, marker_, value_, data___ ] ] := value;
imsGetValues[ node_List ] := imsGetValues[ # ]& /@ node;

SetAttributes[ imsGetValues, SequenceHold ];
Default[ imsGetValues, 2 ] = Sequence[ 1 ];
imsGetValues[ imsNode[ id_, coords_, marker_, value_, data___ ], part_. ] := 
    value[[ part ]];
imsGetValues[ node_List, part_. ] := imsGetValues[ #, part ]& /@ node ;
imsGetDatas[ imsNode[ id_, coords_, marker_, value_, data_ ] ]:= data;



(* Mutators *)
(* SetAttributes[ imsSetValues, Listable ];  *)

imsSetValues[ imsNode[ id_, coords_List, marker_, value_, data___ ], 
      newValue_?MatrixQ ] := 
    imsMakeNode[ id, coords, marker, newValue, data ];

imsSetValues[ node_List, newValues_ ] := 
    MapThread[ imsSetValues, { node, newValues } ];

imsSetMarkers[ imsNode[ id_, coords_List, marker_, value_, data___ ], 
      newMarker_Integer ] := 
    imsMakeNode[ id, coords, newMarker,value, data ];

imsSetMarkers[ node_List, newMarker_ ] := 
    MapThread[ imsSetMarkers, { node, newMarker } ];



(* functions *)
SetAttributes[ imsTo3DNodes, Listable ]
imsTo3DNodes[ imsNode[id_,{x_, y_ }, marker_, value_,data___ ], myValue_ ] := 
    imsNode[id,{ x, y, myValue },marker, value,data ];


SetAttributes[ imsTo3DPlotNodes, SequenceHold ];
SetAttributes[ imsTo3DPlotNodes, Listable ];
Default[ imsTo3DPlotNodes, 2 ] = Sequence[ 1,1 ];
imsTo3DPlotNodes[ imsNode[id_,{x_, y_ },marker_, value_,data___ ], part_. ] := 
    imsNode[id, { x, y, value[[ part ]] }, marker, value, data ];

imsSpatialDegreesOfFreedom[ a_imsNode ] := 
    Length[ imsGetValues[ a ][[ 1 ]] ];
imsTemporalDegreesOfFreedom[ a_imsNode ] := Length[ imsGetValues[ a ] ];



(* Representor *)
imsNode /: imsNodePoint[ a_imsNode ] := 
  Point[  imsGetCoords[ a ] ]

imsNode /: imsNodeIdText[ a_imsNode, offset___, dir___ ] := 
  Text[ ToString[ imsGetIds[ a ] ], imsGetCoords[ a ], offset, dir ]

imsNode /: imsNodeMarkerText[ a_imsNode, offset___, dir___ ] := 
  Text[ ToString[ imsGetMarkers[ a ] ], imsGetCoords[ a ], offset, dir ]

SetAttributes[ imsNodeValueText, SequenceHold ];
Default[ imsNodeValueText, 2 ] = Sequence[ 1,1 ];
imsNode /: imsNodeValueText[ a_imsNode, part_., offset___, dir___ ] := 
  Text[ ToString[ imsGetValues[ a ][[ part ]] ], imsGetCoords[ a ], offset, 
    dir ]

SetAttributes[ imsNodeValueText3D, SequenceHold ];
Default[ imsNodeValueText3D, 2 ] = Sequence[ 1,1 ];
imsNode /: imsNodeValueText3D[ a_imsNode, part_., offset___, dir___ ] := 
  Text[ ToString[ imsGetValues[ a ][[ part ]] ], 
    Join[ Take[ imsGetCoords[ a ], 2 ], { imsGetValues[ a ][[ part ]] } ], 
    offset, dir ]

imsNode /: imsNodeDataText[ a_imsNode, offset___, dir___ ] := 
  If[ imsDataNodeQ[ a ], 
    Text[ ToString[ imsGetDatas[ a ] ], imsGetCoords[ a ], offset, dir ], {} ]



End[] (*of Begin Private*)



(*Protect[] (*anything*)*)
EndPackage[]
