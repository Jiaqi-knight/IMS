(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title:imsTetrahedron.m *)
(* Context: *)
(* 
  Author:oliver r\[UDoubleDot]benk\[ODoubleDot]nig with comments from darius \
koziol *)
(* Date: 1.3.2005, Imtek, Freiburg, Germany *)
(* 
  Summary: This package provides triangle utilities *)
(* 
  Package Copyright:GNU GPL *)
(* Package Version:0.1.1 *)
(* 
  Mathematica Version:5.1 *)
(* History: *)
(* Keywords: *)
(* Sources: 
      imsCircumcenter was taken with respect from:
          Geometry Junkyard: http://
    www.ics.uci.edu/~eppstein/junkyard/circumcenter.html
      imsVolume and imsSubVolume are from Prof. J.G. Korvink
  *)
(* Warnings: *)
(* Limitations: *)
(* Discussion: *)
(* 
  Requirements: *)
(* Examples: *)
(* *)



(* Disclaimer *)

(* Whereever the GNU GPL is not applicable, 
  the software should be used in the same spirit. *)

(* Users of this code must verify correctness for their application. *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)

(* Disclaimer: *)

(* This package provides triangle utilities *)

(* Copyright (C) 2003-2005 oliver ruebenkoenig *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)

BeginPackage["Imtek`Tetrahedron`", "Imtek`Polygon`", "Imtek`Triangle`", 
    "Imtek`Point`" ];





(* *)
(* documentation *)
(* *)
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ TetrahedronQ, $Context ];
imsCreateObsoleteFunctionInterface[ Area, $Context ];
imsCreateObsoleteFunctionInterface[ Circumcenter, $Context ];
imsCreateObsoleteFunctionInterface[ SubVolume, $Context ];
imsCreateObsoleteFunctionInterface[ Volume, $Context ];

(* constructors *)

(* selectors *)

(* predicates *)

imsTetrahedronQ::usage = \
"imsTetrahedronQ[ expr ] returns True if expr is a tetrahedron.";

(*function usage*)

imsArea::usage="imsArea[ tetrahedron ] returns the surface area of tetrahedron."
\

imsCircumcenter::usage="imsCircumcenter[ tetrahedron ] gives the circumference mid point of tetrahedron.";\


imsCenterOfMass::usage = \
"imsCenterOfMass[ tetrahedron ] returns the center of mass for the tetrahedron.";\


imsSubVolume::usage = "imsSubVolume[ tetrahedron, point ] returns the four sub volumes made up from the tetrahedron vertices to point."
\

imsVolume::usage = 
  "imsVolume[ tetrahedron ] returns the volume of tetrahedron."



(* *)
(* options docu *)
(* *)



(* *)
(* error message *)
(* *)
imsTetrahedron::"badarg"="Hello?! - What is this supposed to become?
    You called `1` with wrong argument!";



(* *)
(* define your options *)
(* *)

Options[ imsTetrahedron ] = { Primitive \[Rule] Line }
(* end define options *)



Begin["`Private`"];



Needs["Utilities`FilterOptions`"];



(* *)
(* implementation part *)
(* *)

(* constructor *)



(* Selector *)




imsTetrahedronQ[ {{_,_,_},{_,_,_},{_,_,_},{_,_,_} }] := True;
imsTetrahedronQ[ ___ ] := False;





imsArea[{a:{_,_,_},b:{_,_,_},c:{_,_,_},d:{_,_,_}}]:={imsArea[{a,b,c}],
      imsArea[{a,d,b}],imsArea[{a,c,d}],imsArea[{b,d,c}]};



imsCenterOfMass[ { { ax_, ay_, az_ }, { bx_, by_, bz_ }, { cx_, cy_, cz_ }, { 
        dx_, dy_, dz_ } }  ]:=
  1/4 * { ax + bx + cx + dx, ay + by + cy + dy, az + bz + cz +dz }



imsCircumcenter[ { { ax_, ay_, az_ }, { bx_, by_, bz_ }, { cx_, cy_, cz_ }, { 
        dx_, dy_, dz_ } } ] := Block[
    { xba, yba, zba, xca, yca, zca, xda, yda, zda,
      balength, calength, dalength, xcrosscd, ycrosscd, zcross, xcrossdb, 
      ycrossdb, zcrossdb, xcrossbc, ycrossbc, zcrossbc, denominator , xcirca, 
      ycirca, zcirca },
    xba = bx - ax;
    yba = by - ay;
    zba = bz - az;
    xca = cx - ax;
    yca = cy - ay;
    zca = cz - az;
    xda = dx - ax;
    yda = dy - ay;
    zda = dz - az;
    
    balength=xba*xba+yba*yba+zba*zba;
    calength=xca*xca+yca*yca+zca*zca;
    dalength=xda*xda+yda*yda+zda*zda;
    
    xcrosscd=yca*zda-yda*zca;
    ycrosscd=zca*xda-zda*xca;
    zcrosscd=xca*yda-xda*yca;
    xcrossdb=yda*zba-yba*zda;
    ycrossdb=zda*xba-zba*xda;
    zcrossdb=xda*yba-xba*yda;
    xcrossbc=yba*zca-yca*zba;
    ycrossbc=zba*xca-zca*xba;
    zcrossbc=xba*yca-xca*yba;
    
    denominator=(1/2)/(xba*xcrosscd+yba*ycrosscd+zba*zcrosscd);
    
    xcirca=(balength*xcrosscd+calength*xcrossdb+dalength*xcrossbc)*
        denominator;
    ycirca=(balength*ycrosscd+calength*ycrossdb+dalength*ycrossbc)*
        denominator;
    zcirca=(balength*zcrosscd+calength*zcrossdb+dalength*zcrossbc)*
        denominator;
    
    Return[ { ax + xcirca, ay + ycirca, az + zcirca } ];
    ]



imsSubVolume[ {a:{_,_,_},b:{_,_,_},c:{_,_,_},d:{_,_,_}},pt_]/;
      imsCoord3DQ[pt]:={ imsVolume[ { a, b, c, pt } ],
      imsVolume[ { a, d, b, pt } ], imsVolume[ { a, c, d, pt } ], 
      imsVolume[ { b, d, c, pt } ] };



imsVolume[{a:{_,_,_},b:{_,_,_},c:{_,_,_},d:{_,_,_}}]:=
    Det[Join[Transpose[{a,b,c,d}],{{1,1,1,1}}]]/6;







Unprotect[ Graphics3D ];
Graphics3D[ a_imsTetrahedron, opts___ ] := Graphics3D[ { { a } }, opts ];

Graphics3D[ { a_imsTetrahedron, restGraphics3D___ }, opts___ ] := 
    Graphics3D[ { { a }, restGraphics3D }, opts ];

Graphics3D[ { primitiveOpts___ , a_imsTetrahedron }, opts___ ] := 
    Graphics3D[ { { primitiveOpts, a } } , opts ];

Graphics3D[ { { primitiveOpts___ , imsTetrahedron[ { a_, b_, c_, d_ } ] },
        restGraphics3D___  }, graphics3DOpts___ ] := With[ 
      {
        primitive  = 
          Primitive /. { graphics3DOpts } /. Options[imsTetrahedron]
        }, 
      
      Which[
        primitive === imsPolygon || primitive === {imsPolygon},
        Graphics3D[ #, FilterOptions[ Graphics3D, graphics3DOpts ] ]& /@ {  { 
              primitiveOpts , imsPolygon[ { a,b,c } ],
              imsPolygon[ { a,b,d } ], imsPolygon[ { a,c,d } ], 
              imsPolygon[ { b,c, d } ]  }, restGraphics3D } ,
        
        primitive === Line  || primitive === {Line},
        Graphics3D[ #, FilterOptions[ Graphics3D, graphics3DOpts ] ]& /@ { { 
              primitiveOpts , Line[ { a, b } ], Line[ { a, c } ], 
              Line[ { a, d } ], Line[ { b, c } ], Line[ { b, d } ], 
              Line[ { c, d } ] }, restGraphics3D },
        
        (* else *)
        True, 
        Print["Something is wrong in the graphics 3D part of the imsTetrahedron package."]\
;
        ]
      ];
Protect[ Graphics3D ];



End[] (* of Begin Private *)



(* Protect[] (* anything *) *)
EndPackage[] 