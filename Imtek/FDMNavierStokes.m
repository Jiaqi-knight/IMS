(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: FDMNavierStokes.m *)
(* Context: *)
(* 
  Author:oliver ruebenkoenig *)
(* Date: 1.3.2005, Freiburg *)
(* 
  Summary: This is the IMTEK template for writing a mathematica packages *)
(* 
  Package Copyright: GNU GPL *)
(* Package Version: 0.1.1 *)
(* 
  Mathematica Version: 5.0 *)
(* History: *)
(* Keywords: *)
(* 
  Sources: "Numerische Simulation in der Stroemungsmechanik", M. griebel, 
  et. al. *)
(* Warnings: *)
(* Limitations: *)
(* Discussion: *)
(* 
  Requirements: *)
(* Examples: *)
(* *)



(* Disclaimer: *)

(* this pacakge ports a navier stokes solver in finite difference *)

(* Copyright (C) 2004 oliver ruebenkoenig *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)
BeginPackage["Imtek`FDMNavierStokes`"];





(* *)
(* documentation *)
(* *)
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ imsFDMNavierStokesInitialize, $Context ];
imsCreateObsoleteFunctionInterface[ imsFDMNavierStokesTimeStep, $Context ];
imsCreateObsoleteFunctionInterface[ imsFDMNavierStokesBoundary, $Context ];
imsCreateObsoleteFunctionInterface[ imsFDMNavierStokesFG, $Context ];
imsCreateObsoleteFunctionInterface[ imsFDMNavierStokesRHS, $Context ];
imsCreateObsoleteFunctionInterface[ imsFDMNavierStokesUpdateUV, $Context ];
imsCreateObsoleteFunctionInterface[ imsFDMNavierStokesPressure, $Context ];



(* constructors *)

(* selectors *)

(* predicates *)

(* functions *)

imsFDMNavierStokesInitialize::usage = \
"imsFDMNavierStokesInitialize[ {iMax,jMax},{ f1, f2, f3, f4, f5}] returns a list of initialized matrices {u,v,p,F,G}. Each matrix is initialized with a function f.";\


imsFDMNavierStokesTimeStep::usage = \
"imsFDMNavierStokesTimeStep[{u,v},{dx,dy},re] computes the size of the next time step. {u,v} is the vvelocityelocity field. {dx,dy} the spacial discretization and re is the reynolds number.";\


imsFDMNavierStokesBoundary::usage = \
"imsFDMNavierStokesBoundary[{u,v,p},{iMax,jMax},{n,e,s,w}] sets boundary conditions on {u,v,p}. {iMax, jMax} is the grid size. All directions, north, east, south and west need an integer 1,2 or 3 as input. 1 is a no slip, 2 a free slip and 3 a outflow boundary condition.";\


imsFDMNavierStokesFG::usage = \
"imsFDMNavierStokesFG[{F,G},{u,v},{iMax,jMax},{dx,dy},dt,re,{gx,gy}] computes the next time step impulse equation without the pressure. {iMax, jMax} is the grid size. {dx,dy} is the spacial discretization. dt is the time step size. re the reynolds number. {gx, gy} is the gravity.";\


imsFDMNavierStokesRHS::usage = "imsFDMNavierStokesRHS[{F,G},{iMax,jMax},{dx,dy},dt] computes the rhs of the Poisson equation. {dx, dy} are the spacial discretization. dt is the time step size."
\

imsFDMNavierStokesUpdateUV::usage = \
"imsFDMNavierStokesUpdateUV[{u,v},{F,G},pNew,{iMax,jMax},{dx,dy},dt] computes the next time steps velocities {u,v} from the impulse equation {F,G} and the new pressure pNew. {iMax,jMax} is the grid size. {dx,dy} is the spacial discretization. dt is the time step size.";\


imsFDMNavierStokesPressure::usage = "imsFDMNavierStokesPressure[{iMax+2,jMax+2}] assembles the Poisson matrix. {iMax, jMax} is the grid size.";



(* *)
(* options docu *)
(* *)







Begin["`Private`"];



(* Needs[ "Imtek`Geometry`Point`" ];*)



(* *)
(* implementation part *)
(* *)

(* constructor *)



(* *)
(* define your options *)
(* *)
(* 
  Options[ myFunctio ] = { myOptionName \[Rule] myValue } *)




(* selector *)



(* predicates *)



(* *)
(* plublic functions *)
(* *)

imsFDMNavierStokesInitialize[ { iMax_, jMax_ }, fields_ ] := {
      Table[ fields[[1]][ i, j ], { i, iMax+2 }, { j, jMax+2 } ],
      Table[ fields[[2]][ i, j ], { i, iMax+2 }, { j, jMax+2 } ],
      Table[ fields[[3]][ i, j ], { i, iMax+2 }, { j, jMax+2 } ],
      Table[ fields[[4]][ i, j ], { i, iMax+1 }, { j, jMax+2 } ],
      Table[ fields[[5]][ i, j ], { i, iMax+2 }, { j, jMax+1 } ]
      };


imsFDMNavierStokesTimeStep[ { u_, v_ }, { dx_, dy_ }, re_, tau_:0.5 ] := 
    With[
      { uNorm = myNorm[ u ], vNorm = myNorm[ v ] },
      Return[
          tau * Min[ 
              re/( 2 * ( 1/dx^2 + 1 / dy^2 ) ),
              If[ uNorm< 10^-10, dx / 10^-10, dx / uNorm ],
              If[ vNorm< 10^-10, dy / 10^-10, dy / vNorm ]  ]
          ];
      ];

SetAttributes[ imsFDMNavierStokesBoundary, HoldFirst ]
imsFDMNavierStokesBoundary[ { u_, v_, p_ }, { iMax_, jMax_ }, { wN_,wE_, wS_,
        wW_ } ] := With[
      { j1 = jMax+1, j2 = jMax +2, i1 = iMax+1, i2 = iMax + 2 },
      (* 1 = no slip, 2 = free slip, 3 = out flow, 4 = inflow *) 
      Which[
        wN \[Equal] 1, v[[ All, j1 ]]=0.; 
        u[[ All, j2 ]]=-u[[ All, j1 ]] (* u = 0 *),
        wN \[Equal] 2, v[[ All, j1 ]]=0.; 
        u[[ All, j2 ]]=u[[ All, j1 ]] (* du/dn = 0 *),
        wN \[Equal] 3, v[[ All, j1 ]]=v[[ All, jMax ]]; 
        u[[ All, j2 ]]=u[[ All, j1 ]]
        (* wN \[Equal] 4, Null *)
        ];
      Which[
        wE \[Equal] 1, u[[ i1, All ]]=0.; v[[ i2, All ]]=-v[[ i1, All ]],
        wE \[Equal] 2, u[[ i1, All ]]=0.; v[[ i2, All ]]=v[[ i1, All ]],
        wE \[Equal] 3, u[[ i1, All ]]=u[[ iMax, All ]]; 
        v[[ i2, All ]]=v[[ i1, All ]]
        (* wE \[Equal] 4, Null *)
        ];
      Which[
        wS \[Equal] 1, v[[ All, 1 ]]=0.; u[[ All, 1 ]]=-u[[ All,2 ]],
        wS \[Equal] 2, v[[ All, 1 ]]=0.; u[[ All, 1 ]]=u[[ All,2 ]],
        wS \[Equal] 3, v[[ All, 1 ]]=v[[ All, 2 ]]; 
        u[[ All, 1 ]]=u[[ All,2 ]]
        (* wS \[Equal] 4, Null *)
        ];
      Which[
        wW \[Equal] 1, u[[ 1, All ]]=0.; 
        v[[ 1, All ]]=-v[[ 2, All ]] (* v = 0 *),
        wW \[Equal] 2, u[[ 1, All ]]=0.; 
        v[[ 1, All ]]=v[[ 2, All ]] (* dv / dn = 0 *),
        wW \[Equal] 3, u[[ 1, All ]]= u[[ 2, All ]]; 
        v[[ 1, All ]]= v[[ 2, All ]]
        (* wW \[Equal] 4, Null *)
        ];
      ];

SetAttributes[ imsFDMNavierStokesFG, HoldFirst ]
imsFDMNavierStokesFG[ { F_, G_ }, { u_, v_ },{ iMax_, jMax_ },{ dx_, dy_ },
      dt_, re_, { gx_, gy_ }, gamma_:0.9 ] := Module[
      { dxdx = dx*dx, dydy = dy*dy, uC, uW, uE, uN, uS, uNW, vC, vW, vE, vN, 
        vS, vSE },
      
      Do[
        uC = u[[ i, j ]];
        uW = u[[ i-1, j ]];
        uE = u[[ i+1, j ]];
        uN = u[[ i, j+1 ]];
        uS = u[[ i, j-1 ]];
        
        vC = v[[ i, j ]];
        vW = v[[ i-1, j ]];
        vE = v[[ i+1, j ]];
        vN = v[[ i, j+1 ]];
        vS = v[[ i, j-1 ]];
        vSE = v[[ i+1, j-1 ]];
        
        
        F[[ i, j ]] = 
          uC + dt * ( ( 
                      d2udx2[ { uW, uC, uE }, dxdx ] + 
                        d2udy2[ { uN, uC, uS }, dydy ] )/ re - 
                  du2dx[ { uW, uC, uE }, dx, gamma ] - 
                  duvdy[{ uN, uC, uS }, { vC, vE, vS, vSE }, dy, gamma ]  + 
                  gx );
        
        , { j, 2, jMax+1 },{ i, 2, iMax }
        ];
      
      Do[
        uC = u[[ i, j ]];
        uW = u[[ i-1, j ]];
        uE = u[[ i+1, j ]];
        uN = u[[ i, j+1 ]];
        uS = u[[ i, j-1 ]];
        uNW = u[[ i-1, j+1 ]];
        
        vC = v[[ i, j ]];
        vW = v[[ i-1, j ]];
        vE = v[[ i+1, j ]];
        vN = v[[ i, j+1 ]];
        vS = v[[ i, j-1 ]];
        
        G[[ i, j ]] = 
          vC + dt*( ( d2vdx2[ { vW, vC, vE }, dxdx ] + 
                        d2vdy2[ { vN, vC, vS }, dydy ] )/re - 
                  dv2dy[ { vN, vC, vS }, dy, gamma ] - 
                  duvdx[ { vW, vC, vE },{ uC, uN, uW, uNW }, dx, gamma ] + 
                  gy );
        
        ,{ j, 2, jMax }, { i, 2, iMax+1 }
        ];
      
      F[[ 1, All ]] = u[[ 1, All ]];
      F[[ iMax+1, All ]] = u[[ iMax+1, All ]];
      F[[ 1, 1 ]] = 
        F[[ 1, jMax+2 ]] =F[[ iMax+1, 1 ]] = F[[ iMax+1, jMax+2 ]]= 0.;
      
      G[[ All, 1 ]] = v[[ All, 1 ]];
      G[[ All, jMax+1 ]] = v[[ All, jMax+1 ]];
      G[[ 1, 1 ]] = 
        G[[ iMax+2, 1 ]] = G[[ 1, jMax+1 ]] = G[[ iMax+2, jMax+1 ]] = 0.;
      
      ];

imsFDMNavierStokesRHS[ { F_, G_ }, { iMax_, jMax_ }, { dx_, dy_ }, dt_ ] := 
    Module[ { rhs },
      rhs = Table[ 0.0, { iMax+2 }, { jMax+2 } ];
      Do[  
        rhs[[ i, j ]] = ( F[[ i, j ]] - F[[ i-1, j ]] )/ 
              dx + ( G[[ i, j ]] - G[[ i, j-1 ]] )/dy, { j,2, jMax+1 },  { i,
          2, iMax+1 } ];
      Return[ rhs / dt ];
      ];

SetAttributes[ imsFDMNavierStokesUpdateUV, HoldFirst ]
imsFDMNavierStokesUpdateUV[ { u_, v_ },  { F_, G_ },
      p_, { iMax_, jMax_ }, { dx_, dy_}, dt_ ] := CompoundExpression[
      Table[ 
        u[[ i, j ]] = 
          F[[ i, j ]] - dt * dpdx[ { p[[ i+1, j ]], p[[ i, j ]] }, dx ], { i, 
          2, iMax }, { j, 2, jMax + 1 } ],
      Table[ 
        v[[ i, j ]] = 
          G[[ i, j ]] - dt * dpdy[ { p[[ i, j+1 ]], p[[ i, j ]] }, dy ], { i, 
          2,iMax + 1 }, { j, 2, jMax } ]
      ];

imsFDMNavierStokesPressure[ { cols_, rows_ } ]:= Module[
      { pos, matrix },
      matrix = SparseArray[ {}, { rows * cols,rows * cols }  ];
      (* matrix = Table[ 0., { rows * cols },{ rows * cols}  ]; *)
      
      Do[
        pos = (r-1)*cols +c;
        
        Which[
          
          r \[Equal]1 && c \[Equal] 1, 
          matrix[[ pos, 1 ]] = 1. (* ; matrix[[ pos, cols +2 ]] = -1.*),
          r \[Equal]1 && c \[Equal] cols, 
          matrix[[ pos, cols ]] = 1. (*; 
            matrix[[ pos, (r+1)*cols - 1 ]] = -1. *),
          r \[Equal]rows && c \[Equal] 1, 
          matrix[[ pos, (r-1)*cols +1]] = 1.; (* 
            matrix[[ pos, (r -2 )*cols+2 ]] = -1. *) ,
          r \[Equal]rows && c \[Equal] cols,
          matrix[[ pos, rows*cols ]] = 1. (*;  
            matrix[[ pos, (r-1)*cols -1 ]] = -1. *),
          
          
          c \[Equal] 1, matrix[[ (r-1)*cols +c, (r-1)*cols +c ]] = 1.;  
          matrix[[ (r-1)*cols +c, (r-1)*cols +c+1 ]] = -1.;,
          c \[Equal] cols, matrix[[ (r-1)*cols +c, (r-1)*cols +c ]] = 1.;  
          matrix[[ (r-1)*cols +c, (r-1)*cols +c-1 ]] = -1.;,
          
          r\[Equal] 1, matrix[[ (r-1)*cols +c, (r-1)*cols +c ]] = 1.;  
          matrix[[ (r-1)*cols +c, (r)*cols +c ]] = -1.,
          r\[Equal]rows, matrix[[ (r-1)*cols +c, (r-1)*cols +c ]] = 1.;  
          matrix[[ (r-1)*cols +c, (r-2)*cols +c ]] = -1.,
          
          True,
          matrix[[ (r-1)*cols +c, (r-1)*cols +c ]] = 4.;  
          matrix[[ (r-1)*cols +c, (r-1)*cols +c-1 ]] = -1.; 
          matrix[[ (r-1)*cols +c, (r-1)*cols +c+1 ]] = -1.; 
          matrix[[ (r-1)*cols +c, (r-2)*cols +c ]] = -1.;
          matrix[[ (r-1)*cols +c, r*cols +c ]] = -1.;
          ],
        
        { r, rows }, { c,cols }
        ];
      
      Return[ matrix ];
      ];

(* *)
(* private functions *)
(* *)

myNorm[ var_ ] := Max[ Abs[ var ] ]

du2dx[ { uW_, uC_, uE_ }, dx_, 
      gamma_ ] := ( ( ( uC+uE )^2 - ( uW+uC )^2 )  + 
          gamma * ( 
              Abs[ ( uC+uE ) ] * ( uC-uE ) - 
                Abs[ ( uW+uC ) ] * ( uW-uC ) ) )/(4*dx);

duvdy[ { uN_, uC_, uS_  }, { vC_, vE_, vS_, vSE_ }, dy_, 
      gamma_ ] := ( ( vC+vE )*( uC+uN )-( vS+vSE )*( uS+uC ) + 
          gamma * ( Abs[ vC+vE ]*( uC-uN ) - Abs[ vS+vSE ]*( uS-uC ) ) )/(4*
          dy);

d2udx2[ { uW_, uC_, uE_ }, dxdx_ ] := (uW -2 * uC + uE )/dxdx;

d2udy2[ { uN_, uC_, uS_ }, dydy_ ] := ( uN - 2 * uC + uS )/dydy;

dpdx[ { pE_, pC_ }, dx_ ] := ( pE - pC )/dx;

(* v *)
dv2dy[ { vN_, vC_, vS_ }, dy_, 
    gamma_ ] := ( ( ( vC+vN )^2 - ( vS+vC )^2 )  + 
        gamma * ( 
            Abs[ ( vC+vN ) ] * ( vC-vN ) - 
              Abs[ ( vS+vC ) ] * ( vS-vC ) ) )/(4*dy)

duvdx[ { vW_, vC_, vE_ },{ uC_, uN_, uW_, uNW_  }, dx_, 
    gamma_ ] := ( ( uC+uN )*( vC+vE )-( uW+uNW )*( vW+vC ) + 
        gamma * ( Abs[ uC+uN ]*( vC-vE ) - Abs[ uW+uNW ]*( vW-vC ) ) )/(4*dx)

d2vdx2[ { vW_, vC_, vE_ }, dxdx_ ] := (vW -2 * vC + vE )/dxdx;

d2vdy2[ { vN_, vC_, vS_ }, dydy_ ] := ( vN - 2 * vC + vS )/dydy;

dpdy[ { pN_, pC_ }, dy_ ] := ( pN - pC )/dy;











(* representors *)



End[] (* of Begin Private *)



(* Protect[] (* anything *) *)
EndPackage[] 
