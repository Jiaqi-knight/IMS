(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: ParametricReduction.m *)
(* Context: *)
(* 
  Author:christian moosmann *)
(* Date: 28.2.2005,Freiburg i Br *)
(* 
  Summary: This package performes a parametric Model Order Reduction \
algorithm on a given system of ODEs.*)
(* Package Copyright: GNU GPL *)
(* 
  Package Version: 0.24 *)
(* Mathematica Version: 5.1 *)
(* History:
      olli: changed for mma6.0;
   *)
(* Keywords: *)
(* Sources: *)
(* Warnings: *)
(* Limitations: *)
(* 
  Discussion: *)
(* Requirements: *)
(* Examples: *)
(* *)



(* Disclaimer: *)

(* <ParametricReduction performs a parametric reduction algorithm on on a \
given system of ODEs> *)

(* Copyright (C) 2005 christian moosmann *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)
BeginPackage["Imtek`ParametricReduction`"];





(* *)
(* documentation *)
(* *)
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ ParametricReduction, $Context ];
imsCreateObsoleteFunctionInterface[ ReductionMethod, $Context ];
imsCreateObsoleteFunctionInterface[ DisplayStatus, $Context ];
imsCreateObsoleteFunctionInterface[ CutOff, $Context ];

(* had to take this out vor mma6.0 compat. *)
(* 
  imsCreateObsoleteFunctionInterface[ Verbose, $Context ]; *)

imsCreateObsoleteFunctionInterface[ ExpansionPoints, $Context ];
imsCreateObsoleteFunctionInterface[ MixedModeHandling, $Context ];


(* functions *)
imsParametricReduction::usage = 
  "imsParametricReduction[system,iterations] performs model order reduction on a parametric first order ODE system. It returns a reduced system as well as the projection Matrix. Iterations determines the size of the reduced system." \


imsReductionMethod::usage="Use this Method for performing the order reduction"
\

imsDisplayStatus::usage="imsDisplayStatus\[Rule]False is to disable the status display during reduction"
\

imsCutOff::usage="Cut off number for Norm of new Vectors"

imsVerbose::usage="Be Verbose about Norm of new Vectors"

imsExpansionPoints::usage="A list of expansion points to use"

imsMixedModeHandling::usage="How to handle the mixed modes"







(* *)
(* implementation part *)
(* *)



Begin["`Private`"];



Needs[ "Imtek`ShowStatus`" ]
Needs["Imtek`System`"]
If[ $VersionNumber \[LessEqual] 5.2,Needs["DiscreteMath`Combinatorica`"], 
    Needs["Combinatorica`"] ];
Needs["Utilities`FilterOptions`"]



(* *)
(* define your options *)
(* *)

Options[imsParametricReduction]={imsReductionMethod\[Rule]Automatic,
    imsDisplayStatus\[Rule]True,imsCutOff\[Rule]0.,imsVerbose\[Rule]False,
    imsExpansionPoints\[Rule]{0},imsMixedModeHandling\[Rule]"Complete"}



(* selector *)



(* predicates *)



(* public functions *)

imsParametricReduction[OrgSystem_,iterations_,opts___]:=Module[{method},
    method=imsReductionMethod/.{opts}/.Options[imsParametricReduction];
    Which[
      method==="Multivariant",
      Return[multivariantReduction[OrgSystem,iterations,opts]],
      method===Automatic,
      Return[multivariantReduction[OrgSystem,iterations,opts]],
      True,Message[imsParametricReduction::"imsReductionMethod"]
      ];]

(* private functions *)

initializeFMK:=Module[{fmk},
      fmk[OrgSystem_,matAdecomp_,varM_,varK_List,sysDim_Integer]/;
          Not[Apply[And,MemberQ[Range[0,varM],#]&/@varK]]:=
        SparseArray[{},sysDim];
      fmk[OrgSystem_,matAdecomp_,varM_,varK_List,sysDim_Integer]/;
          Not[MemberQ[Range[0,varM],Apply[Plus,varK]]]:=
        SparseArray[{},sysDim];
      
      fmk[OrgSystem_,matAdecomp_,varM_Integer,varK_List,sysDim_Integer]/;
          varM\[Equal]0:=matAdecomp[Normal[imsGetLoad[OrgSystem]]];
      
      fmk[OrgSystem_,matAdecomp_,varM_Integer,varK_List,sysDim_Integer]:=
        fmk[OrgSystem,matAdecomp,varM,varK,sysDim]=
          matAdecomp[
              Normal[First[imsGetDamping[OrgSystem]].fmk[OrgSystem,matAdecomp,
                    varM-1,varK,sysDim]]]+
            
            Apply[Plus,(matAdecomp[
                      Normal[imsGetStiffness[OrgSystem][[#+1]].fmk[OrgSystem,
                            matAdecomp,varM-1,
                            MapAt[ Subtract[ #, 1 ]&, varK, # ] ,sysDim]]]&/@
                  Range[Length[varK]])];
      
      SetAttributes[fmk,HoldFirst];
      Return[fmk]
      ];


fmkOuter[OrgSystem_,matAdecomp_,varM_,varK:{___?NumericQ},sysDim_Integer]:=
    fmk[OrgSystem,matAdecomp,varM,varK,sysDim];
fmkOuter[OrgSystem_,matAdecomp_,varM_,varK:{{__}..},sysDim_Integer]:=
    Module[{tempList},
      tempList={};
      AppendTo[tempList,#]&/@
            Transpose[fmk[OrgSystem,matAdecomp,varM,#,sysDim]]&/@varK;
      Return[Transpose[tempList]]
      ];

SetAttributes[fmkOuter,HoldFirst];


fmkOuterConcat[OrgSystem_,matAdecomp_,varM_,varK:{___?NumericQ},
      sysDim_Integer]:=fmk[OrgSystem,matAdecomp,varM,varK,sysDim];
fmkOuterConcat[OrgSystem_,matAdecomp_,varM_,varK:{{__}..},sysDim_Integer]:=
    Apply[Plus,#]&/@
      Transpose[fmk[OrgSystem,matAdecomp,varM,#,sysDim]&/@varK];

SetAttributes[fmkOuterConcat,HoldFirst];


appendOrthoNormal[matV_,newVec_,threshold_]:=
    Module[{hij,newVecNorm,internalVec},
      internalVec=newVec/Norm[newVec];
      For[i=1,i\[LessEqual]Length[matV],i++,
        hij=internalVec.matV[[i]];
        internalVec=internalVec-hij*matV[[i]];
        ];
      For[i=1,i\[LessEqual]Length[matV],i++,
        hij=internalVec.matV[[i]];
        internalVec=internalVec-hij*matV[[i]];
        ];
      
      newVecNorm=Norm[internalVec];
      If[newVecNorm>threshold,
        
        internalVec=internalVec/newVecNorm;
        AppendTo[matV,internalVec];
        ];
      Return[newVecNorm];
      ];


SetAttributes[appendOrthoNormal,HoldFirst];


buildConcatK[m_,r_]:=Module[{mainList,testList,newbuildList},
      mainList={Table[0,{i,1,r}]};
      
      testList={};
      Do[AppendTo[testList,Compositions[i,r]],{i,1,m}
        ];
      testList=Flatten[testList,1];
      
      newbuildList=Permutations[Prepend[Table[0,{i,r-1}],m]];
      AppendTo[mainList,#]&/@newbuildList;
      (testList=Delete[testList,Flatten[Position[testList,#]]]) &/@
        newbuildList;
      
      If[testList\[Equal]{},Return[mainList]];
      
      newbuildList=
        Flatten[Cases[testList,#]&/@
            Permutations[Prepend[Table[0,{i,r-1}],_ ]],1];
      (testList=Delete[testList,Flatten[Position[testList,#]]]) &/@
        newbuildList;
      newbuildList=Partition[newbuildList,Length[newbuildList]/r];
      AppendTo[mainList,#]&/@newbuildList;
      
      If[testList\[Equal]{},Return[mainList]];
      
      newbuildList=Cases[testList,x:{___}/;Apply[Plus,x]\[Equal]m];
      newbuildList=
        Flatten[Cases[newbuildList,#]&/@
            Permutations[Prepend[Prepend[Table[0,{i,r-2}],_ ],_]],1];
      (testList=Delete[testList,Flatten[Position[testList,#]]]) &/@
        newbuildList;
      newbuildList=Partition[newbuildList,Length[newbuildList]/((r^2-r)/2)];
      AppendTo[mainList,#]&/@newbuildList;
      
      If[testList\[Equal]{},Return[mainList]];
      
      AppendTo[mainList,testList];
      
      Return[mainList];
      ];

multivariantReduction[System_,iterations_,opts___]:=Module[
      {numPar,sysDim,matAdecomp,myLoad,matV,varKList,varK,newVec,threshold,
        NormsList,myDisplayStatus,myExpansionPoints,beVerboseQ,redSystem,
        redDamping,redLoad,redStiffness,mixedModes},
      
      fmk=initializeFMK;
      myDisplayStatus=
        imsDisplayStatus/.{opts}/.Options[imsParametricReduction];
      myExpansionPoints=
        imsExpansionPoints/.{opts}/.Options[imsParametricReduction];
      beVerboseQ=imsVerbose/.{opts}/.Options[imsParametricReduction];
      threshold=imsCutOff/.{opts}/.Options[imsParametricReduction];
      mixedModes=
        imsMixedModeHandling/.{opts}/.Options[imsParametricReduction];
      NormsList={};
      numPar=Length[imsGetStiffness[System]]-1;
      sysDim=Length[imsGetLoad[System]];
      expNum=Length[myExpansionPoints];
      matV={};
      For[k=1,k\[LessEqual]expNum,++k,
        
        If[myDisplayStatus,
          imsShowStatus[
            "Factorization of the first Stiffness Matrix is performed"]];
        
        matAdecomp=
          LinearSolve[-First[imsGetStiffness[System]]-
              myExpansionPoints[[k]]*First[imsGetDamping[System]]];
        myLoad=matAdecomp[Normal[imsGetLoad[System]]];
        appendOrthoNormal[matV,#,0]&/@Transpose[myLoad];
        
        For[m=1,m<iterations,m++,
          
          If[myDisplayStatus,
            imsShowStatus["Iteration " <>ToString[m+1]<> " is performed"]];
          
          Which[
            mixedModes=="Mean",
            	varKList=buildConcatK[m,numPar];
            	
            Do[newVec=
                fmkOuterConcat[System,matAdecomp,m,varKList[[i]],sysDim];
              	
              AppendTo[NormsList,appendOrthoNormal[matV,#,threshold]]&/@
                Transpose[newVec],{i,1,Length[varKList]}],
            mixedModes=="Complete",
            	varKList=buildConcatK[m,numPar];
            	Do[newVec=fmkOuter[System,matAdecomp,m,varKList[[i]],sysDim];
              	
              AppendTo[NormsList,appendOrthoNormal[matV,#,threshold]]&/@
                Transpose[newVec],{i,1,Length[varKList]}],
            mixedModes=="Discard",
            	varKList=Prepend[Table[{m},{numPar}],{0}];
            	Do[newVec=fmkOuter[System,matAdecomp,m,varKList[[i]],sysDim];
              	
              AppendTo[NormsList,appendOrthoNormal[matV,#,threshold]]&/@
                Transpose[newVec],{i,1,Length[varKList]}]
            ];
          ];
        
        ];
      Clear[fmk];
      
      If[myDisplayStatus,imsShowStatus["Reduced Matricies are computed"]];
      matVT=matV;
      matV=Transpose[matV];
      
      redLoad=matVT.imsGetLoad[System];
      redStiffness=matVT.(#.matV)&/@imsGetStiffness[System];
      redDamping={matVT.(First[imsGetDamping[System]].matV)};
      redSystem=imsMakeSystem[redLoad,redStiffness,redDamping];
      If[myDisplayStatus,imsShowStatus[""]];
      If[beVerboseQ,Return[{redSystem,matV,NormsList}],
        Return[{redSystem,matV}]]
      ];

SetAttributes[multivariantReduction,HoldFirst];

(* Backup *)

(* multivariantReduction[OrgSystem_,iterations_,opts___]:=Module[
        {numPar,sysDim,matAdecomp,myLoad,matV,varKList,varK,newVec,threshold,
          NormsList,myDisplayStatus,myExpansionPoints,beVerboseQ,redOrgSystem,
          redDamping,redLoad,redStiffness,concatVectors},
        fmk=initializeFMK;
        myDisplayStatus=
          imsDisplayStatus/.{opts}/.Options[ParametricReduction];
        myExpansionPoints=
          imsExpansionPoints/.{opts}/.Options[ParametricReduction];
        beVerboseQ=Verbose/.{opts}/.Options[ParametricReduction];
        threshold=CutOff/.{opts}/.Options[ParametricReduction];
        concatVectors=
          ConcatenateVectors/.{opts}/.Options[ParametricReduction];
        NormsList={};
        numPar=Length[imsGetStiffness[OrgSystem]]-1;
        sysDim=Length[imsGetLoad[OrgSystem]];
        expNum=Length[myExpansionPoints];
        matV={};
        For[k=1,k\[LessEqual]expNum,++k,
          
          If[myDisplayStatus,
            imsShowStatus[
              "Factorization of the first Stiffness Matrix is performed"]];
          matAdecomp=
            LinearSolve[-First[imsGetStiffness[OrgSystem]]-
                myExpansionPoints[[k]]*First[imsGetDamping[OrgSystem]]];
          myLoad=matAdecomp[Normal[imsGetLoad[OrgSystem]]];
          appendOrthoNormal[matV,#,0]&/@Transpose[myLoad];
          
          For[m=1,m<iterations,m++,
            
            If[myDisplayStatus,
              imsShowStatus["Iteration " <>ToString[m+1]<> " is performed"]];
            varKList=buildConcatK[m,numPar];
            Do[
              
              If[concatVectors,
                newVec=fmkOuterConcat[OrgSystem,matAdecomp,m,varKList[[i]],
                    sysDim],
                
                newVec=fmkOuter[OrgSystem,matAdecomp,m,varKList[[i]],
                    sysDim]];
              
              
              AppendTo[NormsList,appendOrthoNormal[matV,#,threshold]]&/@
                Transpose[newVec]
              ,{i,1,Length[varKList]}];
            
            ];
          
          ];
        Clear[fmk];
        
        If[myDisplayStatus,imsShowStatus["Reduced Matricies are computed"]];
        matVT=matV;
        matV=Transpose[matV];
        
        redLoad=matVT.imsGetLoad[OrgSystem];
        redStiffness=matVT.(#.matV)&/@imsGetStiffness[OrgSystem];
        redDamping={matVT.(First[imsGetDamping[OrgSystem]].matV)};
        redOrgSystem=imsMakeSystem[redLoad,redStiffness,redDamping];
        If[myDisplayStatus,imsShowStatus[""]];
        If[beVerboseQ,Return[{redOrgSystem,matV,NormsList}],
          Return[{redOrgSystem,matV}]]
        ];
  *)





(* representors *)



End[] (* of Begin Private *)



(* Protect[] (* anything *) *)
EndPackage[] 
