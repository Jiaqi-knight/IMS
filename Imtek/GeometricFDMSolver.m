(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: GeometricFDMSolver.m *)
(* Context: *)
(* 
  Author:oliver ruebenkoenig *)
(* Date: 28.8.2005,Freiburg *)
(* 
  Summary: This is the IMTEK package for geometric finite difference method \
(FDM) based solver *)
(* Package Copyright: GNU GPL *)
(* 
  Package Version: 0.1.2 *)
(* Mathematica Version: 5.0 *)
(* History:
      Integer Input \[Rule] Integer Output *)
(* Keywords: *)
(* Sources: *)
(* 
  Warnings: *)
(* Limitations: *)
(* Discussion: *)
(* Requirements: *)
(* 
  Examples: *)
(* *)



(* Disclaimer: *)

(* Geometric finite difference method based Helmholtz solver *)

(* Copyright (C) 2004 Oliver R\[UDoubleDot]benk\[ODoubleDot]nig *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)
BeginPackage["Imtek`GeometricFDMSolver`"];





(* *)
(* documentation *)
(* *)
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ HelmholtzGeometricSORStep, $Context ];
imsCreateObsoleteFunctionInterface[ HelmholtzGeometricSORSolve, $Context ];
imsCreateObsoleteFunctionInterface[ 
    HelmholtzResidualMatrixStencil, $Context ];


(* constructors *)

(* selectors *)

(* predicates *)

(* functions *)
imsHelmholtzGeometricSORStep::usage = 
  "imsHelmholtzGeometricSORStep[ guess, load, lhsStencil, rhsStencil, omega ] advances the guess of the solution to a Helmholtz type equation with load by one step. lhsStencil is a 3x3 matrix which discretizes the left hand side. rhsStencil is 3x3 matrix which discretizes the load matrix. omega is the ralxation factor defaulting to 1." \


imsHelmholtzGeometricSORSolve::usage = "imsHelmholtzGeometricSORSolve[ guess, load, lhsStencil, rhsStencil,  n, omega ] advamces imsHelmholtzGeometricSORStep n times."
\

imsHelmholtzResidualMatrixStencil::usage = 
  "imsHelmholtzResidualMatrixStencil[ u, f, lhsStencil, rhsStencil ] computes the residual r = f - Au. A is the discetization matrix made up from lhsStencil and rhsStencil."



(* *)
(* options docu *)
(* *)







Begin["`Private`"];







(* *)
(* implementation part *)
(* *)

(* constructor *)



(* *)
(* define your options *)
(* *)




(* selector *)



(* predicates *)



(* functions *)

imsHelmholtzGeometricSORStep[ uGuess_, 
      f_, {{ s11_, s12_, s13_ }, { s21_, s22_, s23_ }, { s31_, s32_, 
          s33_ } },{{ t11_, t12_, t13_ }, { t21_, t22_, t23_ }, { t31_, t32_, 
          t33_ } }, omega_:1 ] := Module[
      { u = uGuess,
        cols = Length[ First[ uGuess ] ] - 1,
        rows = Length[ uGuess ] - 1,
        omegaFactor = 1-omega,
        omegaRatio = omega/s22,
        hh
        },
      
      hh = 1/( cols  * rows );
      
      Do[
        u[[ r, c ]] = omegaFactor * u[[ r, c ]] +  omegaRatio * (  
                hh * 
                    (   
                      t11 * f[[ r+1, c-1 ]] + t12 * f[[ r+1, c ]] + 
                        t13 * f[[ r+1, c+1 ]]
                        + t21 * f[[ r, c-1 ]] + t22 * f[[ r, c ]] + 
                        t23 * f[[ r, c+1 ]]  
                        + t31 * f[[ r-1, c-1 ]] + t32 * f[[ r-1, c ]]+ 
                        t33 * f[[ r-1, c+1 ]] )
                   - s11 * u[[ r+1, c-1 ]] - s12 * u[[ r+1, c ]] - 
                  s13 * u[[ r+1, c+1 ]] 
                  - s21 * u[[ r, c-1 ]] - s23 *u[[ r, c+1 ]] 
                  - s31 * u[[ r-1, c-1 ]] - s32 * u[[ r-1, c ]] - 
                  s33 * u[[ r-1, c+1]] )
        
        ,{ r,2, rows }, { c, 2, cols }
        ];
      
      Return[ u ];
      ];

imsHelmholtzGeometricSORSolve[ uGuess_, f_, stencil1_, stencil2_,  n_, 
      omega_:1 ] := 
    Nest[ imsHelmholtzGeometricSORStep[ #, f, stencil1, stencil2, omega ]&, 
      uGuess, n ];

imsHelmholtzResidualMatrixStencil[ u_, f_, 
    {{ s11_, s12_, s13_ }, { s21_, s22_, s23_ }, {s31_, s32_, s33_ } },{{ 
        t11_, t12_, t13_ }, { t21_, t22_, t23_ }, { t31_, t32_, t33_ } } ] := 
  Module[
    { residual, rows, cols },
    cols = Length[ First[ u ] ] - 1;
    rows = Length[ u ] - 1;
    residual = Table[ 0, { rows + 1 }, { cols + 1 } ];
    
    Do[
      (* r = f - Au *)
      residual[[ r, c ]] = 
          f[[ r, c ]] - ( cols * rows ) * (
                 
                s31 * u[[ r-1, c-1 ]] + s32 * u[[ r-1, c ]] + 
                  s33 * u[[ r-1, c+1]] 
                  + s21 * u[[ r, c-1 ]] +  s22 * u[[ r, c ]]+ 
                  s23 * u[[ r, c+1 ]] 
                  + s11 * u[[ r+1, c-1 ]] + s12 * u[[ r+1, c ]] + 
                  s13 * u[[ r+1, c+1 ]] 
                );
      , { r, 2, rows }, { c, 2,  cols }];
    
    
    Return[ residual ];
    ]



(* representors *)



End[] (* of Begin Private *)



(* Protect[] (* anything *) *)
EndPackage[] 
