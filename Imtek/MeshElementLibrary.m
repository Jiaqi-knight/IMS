(*******************************************************************
This file was generated automatically by the Mathematica front end.
It contains Initialization cells from a Notebook file, which
typically will have the same name as this file except ending in
".nb" instead of ".m".

This file is intended to be loaded into the Mathematica kernel using
the package loading commands Get or Needs.  Doing so is equivalent
to using the Evaluate Initialization Cells menu command in the front
end.

DO NOT EDIT THIS FILE.  This entire file is regenerated
automatically each time the parent Notebook file is saved in the
Mathematica front end.  Any changes you make to this file will be
overwritten.
***********************************************************************)





(* *)
(* Title: MeshElementLibrary.m *)
(* Context: *)
(* 
  Author:oliver ruebenkoenig *)
(* Date: 21.3.2006, 
  Freiburg on the way to Leipzig *)
(* 
  Summary: elements for graph package *)
(* Package Copyright: GNU GPL *)
(* 
  Package Version: 0.4.6 *)
(* Mathematica Version: 5.2 *)
(* History:
    Added Chop and delta in imsInsideElementQ;
  Added imsInsideElementQ;
  Bug fix in imsDrawElement for imsLineQuadratic;
  Added drawing of quadratic tets and hexes;
  Intorduced more elements and new functionality;
  Bug fix in SetIncidentIds;
  Changed the element names;
  Added 1DOF quadratic triangle Serendepity and 2DOF linear triangle;
  Public export of construtor symbols;
   *)
(* Keywords: *)
(* Sources: *)
(* Warnings: *)
(* Limitations: *)
(* 
  Discussion: *)
(* Requirements: *)
(* Examples: *)
(* *)



(* Whereever the GNU GPL is not applicable, 
  the software should be used in the same spirit. *)

(* Users of this code must verify correctness for their application. *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)

(* Disclaimer: *)

(* elements for graph package *)

(* Copyright (C) 2004 oliver ruebenkoenig *)

(* This program is free software; *)

(* you can redistribute it and/
      or modify it under the terms of the GNU General Public License *)

(* as published by the Free Software Foundation;
  either version 2 of the License, *)

(* or (at your option) any later version.This program is distributed in the \
hope that *)

(* it will be useful,but WITHOUT ANY WARRANTY; *)

(* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \
PARTICULAR PURPOSE. *)

(* See the GNU General Public License for more details. 
      You should have received a copy of *)

(* the GNU General Public License along with this program;if not, 
  write to the *)

(* Free Software Foundation,Inc.,59 Temple Place,Suite 330,Boston,
  MA 02111-1307 USA *)



(* Start Package *)

(* Plublic import of other packages *)
(* 
  to avoid name conflics we load Nodes` *)
BeginPackage[ \
"Imtek`MeshElementLibrary`", "Imtek`Nodes`", "Imtek`Graph`" ]





(* *)
(* documentation *)
(* *)
Needs["Imtek`Maintenance`"]
imsCreateObsoleteFunctionInterface[ MakeTriangleLinear1DOF, $Context ];
imsCreateObsoleteFunctionInterface[ MakeQuadLinear1DOF, $Context ];
imsCreateObsoleteFunctionInterface[ MakeTriangleLinear2DOF, $Context ];
imsCreateObsoleteFunctionInterface[ 
    MakeTriangleQuadratic1DOFSerendipity, $Context ];
imsCreateObsoleteFunctionInterface[ MakeTetrahedronLinear1DOF, $Context ];
imsCreateObsoleteFunctionInterface[ MakeHexahedronLinear1DOF, $Context ];
imsCreateObsoleteFunctionInterface[ TriangleLinear1DOF, $Context ];
imsCreateObsoleteFunctionInterface[ QuadLinear1DOF, $Context ];
imsCreateObsoleteFunctionInterface[ TriangleLinear2DOF, $Context ];

imsCreateObsoleteFunctionInterface[ 
    TriangleQuadratic1DOFSerendipity, $Context ];
imsCreateObsoleteFunctionInterface[ TetrahedronLinear1DOF, $Context ];
imsCreateObsoleteFunctionInterface[ TriangleLinear1DOF, $Context ];
imsCreateObsoleteFunctionInterface[ QuadLinear1DOF, $Context ];
imsCreateObsoleteFunctionInterface[ HexahedronLinear1DOF, $Context ];

(* imsCreateObsoleteFunctionInterface[ GetIds, $Context ]; *)
(* 
  imsCreateObsoleteFunctionInterface[ GetIncidentsIds, $Context ]; *)
(* 
  imsCreateObsoleteFunctionInterface[ GetMarkers, $Context ]; *)
(* 
  imsCreateObsoleteFunctionInterface[ GetDatas, $Context ]; *)

imsCreateObsoleteFunctionInterface[ SetIds, $Context ];
imsCreateObsoleteFunctionInterface[ SetIncidentsIds, $Context ];
imsCreateObsoleteFunctionInterface[ SetMarkers, $Context ];
imsCreateObsoleteFunctionInterface[ SetDatas, $Context ];

imsCreateObsoleteFunctionInterface[ MeshElementQ, $Context ];
imsCreateObsoleteFunctionInterface[ RefinableElementQ, $Context ];

imsCreateObsoleteFunctionInterface[ ElementSplitRule, $Context ];
imsCreateObsoleteFunctionInterface[ ElementIncidents, $Context ];
imsCreateObsoleteFunctionInterface[ MeshElements, $Context ];

(*imsCreateObsoleteFunctionInterface[ DrawElements, $Context ]; *)
(* 
  imsCreateObsoleteFunctionInterface[ DrawElementIdText, $Context ]; *)
(* 
  imsCreateObsoleteFunctionInterface[ DrawElementSolution, $Context ]; *)

(* *)
(* constructors *)
(* *)



(* 1D elements *)
(* linear *)
(* 1DOF *)

imsMakeLineLinear1DOF::usage = \
"imsMakeLineLinear1DOF[ id, nodeIds, marker, data ] returns a imsLineLinear1DOF with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsLineLinear1DOF::usage = \
"imsLineLinear1DOF is the datastructure returned by imsMakeLineLinear1DOF.";

(* quadratic *)

imsMakeLineQuadratic1DOF::usage = \
"imsMakeLineQuadratic1DOF[ id, nodeIds, marker, data ] returns a imsLineQuadratic1DOF with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsLineQuadratic1DOF::usage \
="imsLineQuadratic1DOF is the datastructure returned by imsMakeLineQuadratic1DOF.";\


(* cubic *)

imsMakeLineCubic1DOF::usage = \
"imsMakeLineCubic1DOF[ id, nodeIds, marker, data ] returns a imsLineCubic1DOF with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsLineCubic1DOF::usage ="imsLineCubic1DOF is the datastructure returned by imsMakeLineCubic1DOF.";



(* 2D elements *)

(* linear *)
(* 1DOF *)

imsMakeTriangleLinear1DOF::usage="imsMakeTriangleLinear1DOF[ id, nodeIds, marker, data ] returns a imsTriangleLinear1DOF with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsTriangleLinear1DOF::usage = \
"imsTriangleLinear1DOF is the datastructure returned by imsMakeTriangleLinear1DOF.";\


imsMakeQuadLinear1DOF::usage="imsMakeQuadLinear1DOF[ id, nodeIds, marker, data ] returns a imsQuadLinear1DOF with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsQuadLinear1DOF::usage = \
"imsQuadLinear1DOF is the datastructure returned by imsMakeQuadLinear1DOF.";


(* 2 DOF *)

imsMakeTriangleLinear2DOF::usage = \
"imsMakeTriangleLinear2DOF[ id, nodeIds, marker, data ] returns a imsTriangleLinear2DOF with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsTriangleLinear2DOF::usage"imsTriangleLinear2DOF is the datastructure returned by imsMakeTriangleLinear2DOF.";\



(* quadratic *)
(* 1 DOF *)

imsMakeTriangleQuadratic1DOFSerendipity::usage = \
"imsMakeTriangleQuadratic1DOFSerendipity[ id, nodeIds, marker, data ] returns a imsTriangleQuadratic1DOFSerendipity with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsTriangleQuadratic1DOFSerendipity::usage = \
"imsTriangleQuadratic1DOFSerendipity is the datastructure returned by MakeSerendipityElement.";\


imsMakeQuadQuadratic1DOFSerendipity::usage = \
"imsMakeQuadQuadratic1DOFSerendipity[ id, nodeIds, marker, data ] returns a imsQuadQuadratic1DOFSerendipity with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsQuadQuadratic1DOFSerendipity::usage = \
"imsQuadQuadratic1DOFSerendipity is the datastructure returned by imsMakeQuadQuadratic1DOFSerendipity.";\


(* cubic *)
(* 1DOF *)
(*
  
  imsMakeTriangleCubic1DOFSerendipity::usage = \
"imsMakeTriangleCubic1DOFSerendipity[ id, nodeIds, marker, data ] returns a imsTriangleCubic1DOFSerendipity with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

  imsTriangleCubi1DOFSerendipity::usage = \
"imsTriangleCubi1DOFSerendipity is the datastructure returned by imsMakeTriangleCubic1DOFSerendipity.";\

  
  imsMakeQuadCubic1DOFSerendipity::usage = \
"imsMakeQuadCubic1DOFSerendipity[ id, nodeIds, marker, data ] returns a imsQuadCubic1DOFSerendipity with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

  imsQuadCubic1DOFSerendipity::usage = \
"imsQuadCubic1DOFSerendipity is the datastructure returned by imsMakeQuadCubic1DOFSerendipity.";\

  *)



(* 3D elements *)
(* linear *)
(* 1 DOF *)

imsMakeTetrahedronLinear1DOF::usage="imsMakeTetrahedronLinear1DOF[ id, nodeIds, marker, data ] returns a imsTetrahedronLinear1DOF with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsTetrahedronLinear1DOF::usage = \
"imsTetrahedronLinear1DOF is the datastructure returned by imsMakeTetrahedronLinear1DOF.";\


imsMakeHexahedronLinear1DOF::usage="imsMakeHexahedronLinear1DOF[ id, nodeIds, marker, data ] returns a imsHexahedronLinear1DOF with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsHexahedronLinear1DOF::usage = \
"imsHexahedronLinear1DOF is the datastructure returned by imsMakeHexahedronLinear1DOF.";\


(* quadratic *)

imsMakeTetrahedronQuadratic1DOFSerendipity::usage="imsMakeTetrahedronQuadratic1DOFSerendipity[ id, nodeIds, marker, data ] returns a imsTetrahedronQuadratic1DOFSerendipity with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsTetrahedronQuadratic1DOFSerendipity::usage = \
"imsTetrahedronLinear1DOFSerendipity is the datastructure returned by imsMakeTetrahedronQuadratic1DOFSerendipity.";\


imsMakeHexahedronQuadratic1DOFSerendipity::usage="imsMakeHexahedronQuadratic1DOFSerendipity[ id, nodeIds, marker, data ] returns a imsHexahedronQuadratic1DOFSerendipity with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsHexahedronQuadratic1DOFSerendipity::usage = \
"imsHexahedronQuadratic1DOFSerendipity is the datastructure returned by imsMakeHexahedronQuadratic1DOFSerendipity.";\





imsMakeTriangleP2::usage = \
"imsMakeTriangleP2[ id, nodeIds, marker, data ] returns a imsTriangleP2 with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsTriangleP2::usage = \
"imsTriangleP2 is the datastructure returned by imsMakeTriangleP2.";

imsMakeTriangleP1::usage = \
"imsMakeTriangleP1[ id, nodeIds, marker, data ] returns a imsTriangleP1 with Integer id and a List of nodeIdes. Marker defaults to 0. Optionally data can be given.";\

imsTriangleP1::usage = \
"imsTriangleP1 is the datastructure returned by imsMakeTriangleP1.";


imsP2P1TriangleSerendipityPrimary::usage="imsP2P1TriangleSerendipityPrimary is a symbol attached to a coupled P2P1 element specifiing which is the primary element.";\

imsP2P1TriangleSerendipitySecondary::usage="imsP2P1TriangleSerendipityPrimary is a symbol attached to a coupled P2P1 element specifiing which is the secondary element.";



(* selectors *)

imsGetIds::usage="imsGetIds[ elements ] returns the elements id.";
imsGetIncidentsIds::usage="imsGetIncidentsIds[ elements ] returns the elements nodeIds.";\

imsGetMarkers::usage="imsGetMarkers[ elements ] returns the elements marker.";\

imsGetDatas::usage="imsGetDatas[ elements ] returns the element's data, if any are present.";



(* mutators *)

imsSetIds::usage="imsSetIds[ element, newId ] returns the element with id replaced by newId.";\

imsSetIncidentsIds::usage="imsSetIncidentsIds[ element, newIncidentsIds ] returns the element with incidentsIds replaced by newIncidentsIds.";\

imsSetMarkers::usage="imsSetMarkers[ element, newMarkers ] returns the element with markers replaced by newMarkers.";\

imsSetDatas::usage="imsSetDatas[ element, newDatas ] returns the element with datas replaced by newDatas.";



(* predicates *)

imsMeshElementQ::usage="imsMeshElementQ[ expr ] returns True if expr is a mesh element.";\


imsRefinableElementQ::usage = \
"imsRefinableElementQ[ expr ] returns True if an imsElementSplitRule exists.";\


imsInsideElementQ::usage ="imsInsideElementQ[ elementCords, testCoords, delta ] returns True if testCoords are in elementCoords. Precision can be controlled with delta which defaults to 10-^10.";



(* functions *)

imsElementSplitRule::usage = \
"imsElementSplitRule[ element ] returns a split rule for element.";
imsElementIncidents::usage = \
"imsElementIncidents[ element ] returns the number of incidents an element can carry.";\

imsMeshElements::usage="imsMeshElements[] returns a List of all available mesh elements."
\

imsPrimaryElement::usage="imsPrimaryElement[ element ] returns the primary element for a couppled element.";\

imsSecondaryElement::usage \
="imsSecondaryElement[ element ] returns the secondary element for a couppled element.";\


imsElementFamily::usage = "imsElementFamily[ element ] returns the element family type an element belongs to.";



(* representors *)

imsDrawElements::usage="imsDrawElements[ element, nodes ] will draw the element consisting of nodes.";\

imsDrawElementIdText::usage="imsDrawElementIdText[ element, nodes ] will draw the element's id as text. The element is made up from nodes.";\

imsDrawElementSolution::usage="imsDrawElementSolution[ element, part, nodes ] will draw part of the solution contained in nodes over the corresponding element. part defaults to Sequence[ 1 ].";\





(* *)
(* options doc *)
(* *)



(* *)
(* Error Messages *)
(* *)

imsDrawElementSolution::"nimpl"="This functionality is not yet implemented.";



Begin["`Private`"];



(* *)
(* implementation part *)
(* *)

(* constructor *)



(* 1D elements *)
(* linear *)
(* 1DOF *)

imsMakeLineLinear1DOF[ id_Integer,nodesIds_List, marker_Integer:0, 
      datas___ ] := imsLineLinear1DOF[ id, nodesIds, marker, datas ];

(* quadratic *)

imsMakeLineQuadratic1DOF[ id_Integer,nodesIds_List, marker_Integer:0, 
      datas___ ] := imsLineQuadratic1DOF[ id, nodesIds, marker, datas ];

(* cubic *)

imsMakeLineCubic1DOF[ id_Integer,nodesIds_List, marker_Integer:0, datas___ ] := 
    imsLineCubic1DOF[ id, nodesIds, marker, datas ];



(* 2D elements *)

(* linear *)
(* 1DOF *)

imsMakeTriangleLinear1DOF[ id_Integer,nodesIds_List, marker_Integer:0, 
      datas___ ] := imsTriangleLinear1DOF[ id, nodesIds, marker, datas ];

imsMakeQuadLinear1DOF[ id_Integer,nodesIds_List, marker_Integer:0, 
      datas___ ] := imsQuadLinear1DOF[ id, nodesIds,  marker, datas ];

(* 2 DOF *)

imsMakeTriangleLinear2DOF[ id_Integer,nodesIds_List, marker_Integer:0, 
      datas___ ] := imsTriangleLinear2DOF[ id,nodesIds, marker, datas ];

(* quadratic *)
(* 1DOF *)

imsMakeTriangleQuadratic1DOFSerendipity[ id_Integer,nodesIds_List, 
      marker_Integer:0, datas___ ] := 
    imsTriangleQuadratic1DOFSerendipity[ id,nodesIds, marker, datas ];

imsMakeQuadQuadratic1DOFSerendipity[ id_Integer,nodesIds_List, 
      marker_Integer:0, datas___ ] := 
    imsQuadQuadratic1DOFSerendipity[ id,nodesIds, marker, datas ];

(* cubic *)
(* 1DOF *)
(*
  
  imsMakeTriangleCubic1DOFSerendipity[ id_Integer,nodesIds_List, 
      marker_Integer:0, datas___ ] := 
    imsTriangleQuadratic1DOFSerendipity[ id,nodesIds, marker, datas ];
  
  imsMakeQuadCubic1DOFSerendipity[ id_Integer,nodesIds_List, 
      marker_Integer:0, datas___ ] := 
    imsQuadQuadratic1DOFSerendipity[ id,nodesIds, marker, datas ];
  *)



(* 3D elements *)
(* linear *)
(* 1DOF *)

imsMakeTetrahedronLinear1DOF[ id_Integer, nodesIds_List, marker_Integer:0, 
      datas___ ] := imsTetrahedronLinear1DOF[ id, nodesIds,  marker, datas ];

imsMakeHexahedronLinear1DOF[ id_Integer, nodesIds_List, marker_Integer:0, 
      datas___ ] := imsHexahedronLinear1DOF[ id, nodesIds,  marker, datas ];

(* quadratic *)
(* 1DOF *)

imsMakeTetrahedronQuadratic1DOFSerendipity[ id_Integer,nodesIds_List, 
      marker_Integer:0, datas___ ] := 
    imsTetrahedronQuadratic1DOFSerendipity[ id,nodesIds, marker, datas ];

imsMakeHexahedronQuadratic1DOFSerendipity[ id_Integer,nodesIds_List, 
      marker_Integer:0, datas___ ] := 
    imsHexahedronQuadratic1DOFSerendipity[ id,nodesIds, marker, datas ];



imsMakeTriangleP2[ id_Integer, nodesIds_List, marker_Integer:0, datas___ ] := 
    imsTriangleP2[ id, nodesIds,  marker, datas ];

imsMakeTriangleP1[ id_Integer, nodesIds_List, marker_Integer:0, datas___ ] := 
    imsTriangleP1[ id, nodesIds,  marker, datas ];



Needs[ "Imtek`Polygon`" ];



(* *)
(* define your options *)
(* *)




(* selector *)
SetAttributes[ imsGetIncidentsIds, Listable ];

imsGetIds[ imsLineLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := id;
imsGetIncidentsIds[ imsLineLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ imsLineLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ imsLineLinear1DOF[ id_, nodesIds_, marker_, datas_ ] ] := datas;

imsGetIds[ imsLineQuadratic1DOF[ id_, nodesIds_, marker_, datas___ ] ] := id;
imsGetIncidentsIds[ 
      imsLineQuadratic1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ imsLineQuadratic1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ imsLineQuadratic1DOF[ id_, nodesIds_, marker_, datas_ ] ] := 
    datas;

imsGetIds[ imsLineCubic1DOF[ id_, nodesIds_, marker_, datas___ ] ] := id;
imsGetIncidentsIds[ imsLineCubic1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ imsLineCubic1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ imsLineCubic1DOF[ id_, nodesIds_, marker_, datas_ ] ] := datas;

imsGetIds[ imsTriangleLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    id;
imsGetIncidentsIds[ 
      imsTriangleLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ imsTriangleLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ imsTriangleLinear1DOF[ id_, nodesIds_, marker_, datas_ ] ] := 
    datas;

imsGetIds[ imsQuadLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := id;
imsGetIncidentsIds[ imsQuadLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ imsQuadLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ imsQuadLinear1DOF[ id_, nodesIds_, marker_, datas_ ] ] := datas;

imsGetIds[ imsTriangleLinear2DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    id;
imsGetIncidentsIds[ 
      imsTriangleLinear2DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ imsTriangleLinear2DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ imsTriangleLinear2DOF[ id_, nodesIds_, marker_, datas_ ] ] := 
    datas;

imsGetIds[ 
      imsTriangleQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ] ] := id;
imsGetIncidentsIds[ 
      imsTriangleQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ] ] := nodesIds;
imsGetMarkers[ 
      imsTriangleQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ] ] := marker;
imsGetDatas[ 
      imsTriangleQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas_ ] ] := datas;

imsGetIds[ 
      imsQuadQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ] ] := 
    id;
imsGetIncidentsIds[ 
      imsQuadQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ 
      imsQuadQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ 
      imsQuadQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, datas_ ] ] := 
    datas;

(*
  imsGetIds[ 
      imsTriangleCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ] ] := 
    id;
  imsGetIncidentsIds[ 
      imsTriangleCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
  imsGetMarkers[ 
      imsTriangleCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
  imsGetDatas[ 
      imsTriangleCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas_ ] ] := 
    datas;
  
  imsGetIds[ 
      imsQuadCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ] ] := 
    id;
  imsGetIncidentsIds[ 
      imsQuadCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
  imsGetMarkers[ 
      imsQuadCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
  imsGetDatas[ 
      imsQuadCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas_ ] ] := 
    datas;
  *)

imsGetIds[ imsTetrahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    id;
imsGetIncidentsIds[ 
      imsTetrahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ 
      imsTetrahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ imsTetrahedronLinear1DOF[ id_, nodesIds_, marker_, datas_ ] ] := 
    datas;

imsGetIds[ imsHexahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    id;
imsGetIncidentsIds[ 
      imsHexahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ 
      imsHexahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ imsHexahedronLinear1DOF[ id_, nodesIds_, marker_, datas_ ] ] := 
    datas;

imsGetIds[ 
      imsTetrahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ] ] := id;
imsGetIncidentsIds[ 
      imsTetrahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ] ] := nodesIds;
imsGetMarkers[ 
      imsTetrahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ] ] := marker;
imsGetDatas[ 
      imsTetrahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas_ ] ] := datas;

imsGetIds[ 
      imsHexahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ] ] := id;
imsGetIncidentsIds[ 
      imsHexahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ] ] := nodesIds;
imsGetMarkers[ 
      imsHexahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ] ] := marker;
imsGetDatas[ 
      imsHexahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas_ ] ] := datas;

imsGetIds[ imsTriangleP2[ id_, nodesIds_, marker_, datas___ ] ] := id;
imsGetIncidentsIds[ imsTriangleP2[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ imsTriangleP2[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ imsTriangleP2[ id_, nodesIds_, marker_, datas_ ] ] := datas;

imsGetIds[ imsTriangleP1[ id_, nodesIds_, marker_, datas___ ] ] := id;
imsGetIncidentsIds[ imsTriangleP1[ id_, nodesIds_, marker_, datas___ ] ] := 
    nodesIds;
imsGetMarkers[ imsTriangleP1[ id_, nodesIds_, marker_, datas___ ] ] := 
    marker;
imsGetDatas[ imsTriangleP1[ id_, nodesIds_, marker_, datas_ ] ] := datas;



(* mutatros *)
SetAttributes[ imsSetIds, Listable ];
imsSetIncidentsIds[ elem_List, new_List ] := 
    MapThread[ imsSetIncidentsIds, { elem, new } ];
SetAttributes[ imsSetMarkers, Listable ];
imsSetDatas[ elem_List, new_List ] := 
    MapThread[ imsSetDatas, { elem, new } ];

imsSetIds[ imsLineLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsLineLinear1DOF[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ imsLineLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := 
    imsLineLinear1DOF[ id, new, marker, datas ];
imsSetMarkers[ imsLineLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsLineLinear1DOF[ id, nodesIds, new, datas ];
imsSetDatas[ imsLineLinear1DOF[ id_, nodesIds_, marker_, datas___ ], new_ ] := 
    imsLineLinear1DOF[ id, nodesIds, marker, new ];

imsSetIds[ imsLineQuadratic1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsLineQuadratic1DOF[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ 
      imsLineQuadratic1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := 
    imsLineQuadratic1DOF[ id, new, marker, datas ];
imsSetMarkers[ imsLineQuadratic1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsLineQuadratic1DOF[ id, nodesIds, new, datas ];
imsSetDatas[ imsLineQuadratic1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsLineQuadratic1DOF[ id, nodesIds, marker, new ];

imsSetIds[ imsLineCubic1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsLineCubic1DOF[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ imsLineCubic1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := imsLineCubic1DOF[ id, new, marker, datas ];
imsSetMarkers[ imsLineCubic1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsLineCubic1DOF[ id, nodesIds, new, datas ];
imsSetDatas[ imsLineCubic1DOF[ id_, nodesIds_, marker_, datas___ ], new_ ] := 
    imsLineCubic1DOF[ id, nodesIds, marker, new ];

imsSetIds[ imsTriangleLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsTriangleLinear1DOF[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ 
      imsTriangleLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := 
    imsTriangleLinear1DOF[ id, new, marker, datas ];
imsSetMarkers[ imsTriangleLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsTriangleLinear1DOF[ id, nodesIds, new, datas ];
imsSetDatas[ imsTriangleLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsTriangleLinear1DOF[ id, nodesIds, marker, new ];

imsSetIds[ imsQuadLinear1DOF[ id_, nodesIds_, marker_, datas___ ], new_ ] := 
    imsQuadLinear1DOF[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ imsQuadLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := 
    imsQuadLinear1DOF[ id, new, marker, datas ];
imsSetMarkers[ imsQuadLinear1DOF[ id_, nodesIds_, new, datas___ ], 
      new_Integer ] := imsQuadLinear1DOF[ id, nodesIds, new, datas ];
imsSetDatas[ imsQuadLinear1DOF[ id_, nodesIds_, marker_, datas___ ], new_ ] := 
    imsQuadLinear1DOF[ id, nodesIds, marker, new ];

imsSetIds[ imsTriangleLinear2DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsTriangleLinear2DOF[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ 
      imsTriangleLinear2DOF[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := 
    imsTriangleLinear2DOF[ id, new, marker, datas ];
imsSetMarkers[ imsTriangleLinear2DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsTriangleLinear2DOF[ id, nodesIds, new, datas ];
imsSetDatas[ imsTriangleLinear2DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsTriangleLinear2DOF[ id, nodesIds, marker, new ];

imsSetIds[ 
      imsTriangleQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new_ ] := 
    imsTriangleQuadratic1DOFSerendipity[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ 
      imsTriangleQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new:List[ _Integer.. ] ] := 
    imsTriangleQuadratic1DOFSerendipity[ id, new, marker, datas ];
imsSetMarkers[ 
      imsTriangleQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new_Integer ] := 
    imsTriangleQuadratic1DOFSerendipity[ id, nodesIds, new, datas ];
imsSetDatas[ 
      imsTriangleQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new_ ] := 
    imsTriangleQuadratic1DOFSerendipity[ id, nodesIds, marker, new ];

imsSetIds[ 
      imsQuadQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsQuadQuadratic1DOFSerendipity[ new, nodesIds, marker, 
      datas ];
imsSetIncidentsIds[ 
      imsQuadQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := 
    imsQuadQuadratic1DOFSerendipity[ id, new, marker, datas ];
imsSetMarkers[ 
      imsQuadQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := 
    imsQuadQuadratic1DOFSerendipity[ id, nodesIds, new, datas ];
imsSetDatas[ 
      imsQuadQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsQuadQuadratic1DOFSerendipity[ id, nodesIds, marker, new ];

(*
  imsSetIds[ 
      imsTriangleCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsTriangleCubic1DOFSerendipity[ new, nodesIds, marker, 
      datas ];
  imsSetIncidentsIds[ 
      imsTriangleCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := 
    imsTriangleCubic1DOFSerendipity[ id, new, marker, datas ];
  imsSetMarkers[ 
      imsTriangleCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := 
    imsTriangleCubic1DOFSerendipity[ id, nodesIds, new, datas ];
  imsSetDatas[ 
      imsTriangleCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsTriangleCubic1DOFSerendipity[ id, nodesIds, marker, new ];
  
  imsSetIds[ 
      imsQuadCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsQuadCubic1DOFSerendipity[ new, nodesIds, marker, datas ];
  imsSetIncidentsIds[ 
      imsQuadCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := 
    imsQuadCubic1DOFSerendipity[ id, new, marker, datas ];
  imsSetMarkers[ 
      imsQuadCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := 
    imsQuadCubic1DOFSerendipity[ id, nodesIds, new, datas ];
  imsSetDatas[ 
      imsQuadCubic1DOFSerendipity[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsQuadCubic1DOFSerendipity[ id, nodesIds, marker, new ];
  *)

imsSetIds[ imsTetrahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsTetrahedronLinear1DOF[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ 
      imsTetrahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := 
    imsTetrahedronLinear1DOF[ id, new, marker, datas ];
imsSetMarkers[ imsTetrahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsTetrahedronLinear1DOF[ id, nodesIds, new, datas ];
imsSetDatas[ imsTetrahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsTetrahedronLinear1DOF[ id, nodesIds, marker, new ];

imsSetIds[ imsHexahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsHexahedronLinear1DOF[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ 
      imsHexahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := 
    imsHexahedronLinear1DOF[ id, new, marker, datas ];
imsSetMarkers[ imsHexahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsHexahedronLinear1DOF[ id, nodesIds, new, datas ];
imsSetDatas[ imsHexahedronLinear1DOF[ id_, nodesIds_, marker_, datas___ ], 
      new_ ] := imsHexahedronLinear1DOF[ id, nodesIds, marker, new ];

imsSetIds[ 
      imsTetrahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new_ ] := 
    imsTetrahedronQuadratic1DOFSerendipity[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ 
      imsTetrahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new:List[ _Integer.. ] ] := 
    imsTetrahedronQuadratic1DOFSerendipity[ id, new, marker, datas ];
imsSetMarkers[ 
      imsTetrahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new_Integer ] := 
    imsTetrahedronQuadratic1DOFSerendipity[ id, nodesIds, new, datas ];
imsSetDatas[ 
      imsTetrahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new_ ] := 
    imsTetrahedronQuadratic1DOFSerendipity[ id, nodesIds, marker, new ];

imsSetIds[ 
      imsHexahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new_ ] := 
    imsHexahedronQuadratic1DOFSerendipity[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ 
      imsHexahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new:List[ _Integer.. ] ] := 
    imsHexahedronQuadratic1DOFSerendipity[ id, new, marker, datas ];
imsSetMarkers[ 
      imsHexahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new_Integer ] := 
    imsHexahedronQuadratic1DOFSerendipity[ id, nodesIds, new, datas ];
imsSetDatas[ 
      imsHexahedronQuadratic1DOFSerendipity[ id_, nodesIds_, marker_, 
        datas___ ], new_ ] := 
    imsHexahedronQuadratic1DOFSerendipity[ id, nodesIds, marker, new ];

imsSetIds[ imsTriangleP2[ id_, nodesIds_, marker_, datas___ ], new_ ] := 
    imsTriangleP2[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ imsTriangleP2[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := imsTriangleP2[ id, new, marker, datas ];
imsSetMarkers[ imsTriangleP2[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsTriangleP2[ id, nodesIds, new, datas ];
imsSetDatas[ imsTriangleP2[ id_, nodesIds_, marker_, datas___ ], new_ ] := 
    imsTriangleP2[ id, nodesIds, marker, new ];

imsSetIds[ imsTriangleP1[ id_, nodesIds_, marker_, datas___ ], new_ ] := 
    imsTriangleP1[ new, nodesIds, marker, datas ];
imsSetIncidentsIds[ imsTriangleP1[ id_, nodesIds_, marker_, datas___ ], 
      new:List[ _Integer.. ] ] := imsTriangleP1[ id, new, marker, datas ];
imsSetMarkers[ imsTriangleP1[ id_, nodesIds_, marker_, datas___ ], 
      new_Integer ] := imsTriangleP1[ id, nodesIds, new, datas ];
imsSetDatas[ imsTriangleP1[ id_, nodesIds_, marker_, datas___ ], new_ ] := 
    imsTriangleP1[ id, nodesIds, marker, new ];



(* predicates *)
imsMeshElementQ[ _imsLineLinear1DOF ] := True;
imsMeshElementQ[ _imsLineQuadratic1DOF ] := True;
imsMeshElementQ[ _imsLineCubic1DOF ] := True;

imsMeshElementQ[ _imsTriangleLinear1DOF ] := True;
imsMeshElementQ[ _imsTriangleLinear2DOF ] := True;
imsMeshElementQ[ _imsQuadLinear1DOF ] := True;

imsMeshElementQ[ _imsTriangleQuadratic1DOFSerendipity ] := True;
imsMeshElementQ[ _imsQuadQuadratic1DOFSerendipity ] := True;

(*
  imsMeshElementQ[ _imsTriangleCubic1DOFSerendipity ] := True;
  imsMeshElementQ[ _imsQuadCubic1DOFSerendipity ] := True;
  *)

imsMeshElementQ[ _imsTetrahedronLinear1DOF ] := True;
imsMeshElementQ[ _imsHexahedronLinear1DOF ] := True;
imsMeshElementQ[ _imsTetrahedronQuadratic1DOF ] := True;
imsMeshElementQ[ _imsHexahedronQuadratic1DOF ] := True;

imsMeshElementQ[ _imsTriangleP2 ] := True;
imsMeshElementQ[ _imsTriangleP1 ] := True;

imsMeshElementQ[ ___ ] := False;

RefinableElement[ _imsTriangleLinear1DOF ] := True;
RefinableElement[ _imsTriangleLinear2DOF ] := True;
RefinableElement[ ___ ] := False;

(* line *)
imsInsideElementQ[ {a:{_}, b:{_}, ___ }, testPoint_, 
    delta_:10^-10 ]:=
  Chop[ Min[ #, 1-# ]&[ 
        LinearSolve[ Join[ Transpose[ {a,b } ], { { 1.,1. } } ], 
          Join[ testPoint, {1.} ] ] ], delta ]\[GreaterEqual] 0

(* triangle *)

imsInsideElementQ[ {a:{_,_}, b:{_,_}, c:{_,_} }, testPoint_, delta_:10^-10 ]:=
  Chop[ Min[ #, 1-# ]&[ 
        LinearSolve[ Join[ Transpose[ {a,b,c} ], { { 1.,1.,1. } } ], 
          Join[ testPoint, {1.} ] ] ], delta ]\[GreaterEqual] 0

imsInsideElementQ[ {a:{_,_}, b:{_,_}, c:{_,_},_,_,_ }, testPoint_, 
    delta_:10^-10 ]:=
  Chop[ Min[ #, 1-# ]&[ 
        LinearSolve[ Join[ Transpose[ {a,b,c} ], { { 1.,1.,1. } } ], 
          Join[ testPoint, {1.} ] ] ], delta ]\[GreaterEqual] 0

(* quad *)
imsInsideElementQ[ {a:{_,_}, b:{_,_}, c:{_,_}, d:{_,_} }, 
    testPoint_, delta_:10^-10 ]:=
  Or[ imsInsideElementQ[ {a,b,c}, testPoint, delta ], 
    imsInsideElementQ[ {a,c,d}, testPoint, delta ] ]

imsInsideElementQ[ {a:{_,_}, b:{_,_}, c:{_,_}, d:{_,_}, _, _, _, _ }, 
    testPoint_, delta_:10^-10 ]:=
  Or[ imsInsideElementQ[ {a,b,c}, testPoint, delta ], 
    imsInsideElementQ[ {a,c,d}, testPoint, delta ] ]

(* tet *)
imsInsideElementQ[ {a:{_,_,_}, b:{_,_,_}, c:{_,_,_}, d:{_,_,_} }, 
    testPoint_, delta_:10^-10 ]:=
  Chop[ Min[ #, 1-# ]&[ 
        LinearSolve[ Join[ Transpose[ {a,b,c, d} ], { { 1.,1.,1.,1. } } ], 
          Join[ testPoint, {1.} ] ] ], delta ]\[GreaterEqual] 0

imsInsideElementQ[ {a:{_,_,_}, b:{_,_,_}, c:{_,_,_}, 
      d:{_,_,_}, _, _, _, _, _, _ }, testPoint_, delta_:10^-10 ]:=
  Chop[ Min[ #, 1-# ]&[ 
        LinearSolve[ Join[ Transpose[ {a,b,c, d} ], { { 1.,1.,1.,1. } } ], 
          Join[ testPoint, {1.} ] ] ], delta ]\[GreaterEqual] 0

(* hex *)
imsInsideElementQ[ {a:{_,_,_}, b:{_,_,_}, c:{_,_,_}, d:{_,_,_}, 
      e:{_, _, _}, f:{_,_,_}, g:{_,_,_}, h:{_,_,_}, ___ }, testPoint_, 
    delta_:10^-10 ]:= Or[ 
    imsInsideElementQ[ {e, f, h, a }, testPoint, delta ],
    imsInsideElementQ[ {f, g, h, c }, testPoint, delta ],
    imsInsideElementQ[ {h, a, c, d }, testPoint, delta ],
    imsInsideElementQ[ {f, b, c, a }, testPoint, delta ],
    imsInsideElementQ[ {h, f, c, a }, testPoint, delta ]
    ]



(* *)
(* public functions *)
(* *)

imsElementIncidents[ imsLineLinear1DOF ] = 2;
imsElementIncidents[ imsLineQuadratic1DOF ] = 3;
imsElementIncidents[ imsLineCubic1DOF ] = 4;
imsElementIncidents[ imsTriangleLinear1DOF ] = 3;
imsElementIncidents[ imsTriangleLinear2DOF ] = 6;
imsElementIncidents[ imsQuadLinear1DOF ] = 4;
imsElementIncidents[ imsTriangleQuadratic1DOFSerendipity ] = 6;
imsElementIncidents[ imsQuadQuadratic1DOFSerendipity ] = 8;
(*
  imsElementIncidents[ imsTriangleCubic1DOFSerendipity ] = 7;
  imsElementIncidents[ 
      imsQuadCubic1DOFSerendipity ] = (Print[
        "Check: ElementIncidents for quad cubic"];9);
  *)
imsElementIncidents[ imsTetrahedronLinear1DOF ] = 4;
imsElementIncidents[ imsHexahedronLinear1DOF ] = 8;
imsElementIncidents[ imsTetrahedronQuadratic1DOFSerendipity ] = 10;
imsElementIncidents[ imsHexahedronQuadratic1DOFSerendipity ] = 20;

imsElementIncidents[ imsTriangleP2 ] = 6;
imsElementIncidents[ imsTriangleP1 ] = 3;

imsElementIncidents[ imsP2P1TriangleSerendipityPrimary ] = 6;
imsElementIncidents[ imsP2P1TriangleSerendipitySecondary ] = 3;

imsPrimaryElement[ imsTriangleP2 ] := imsP2P1TriangleSerendipityPrimary;
imsSecondaryElement[ imsTriangleP2 ] := imsP2P1TriangleSerendipitySecondary;

imsMeshElements[] := { imsLineLinear1DOF, imsLineQuadratic1DOF, 
      imsLineCubic1DOF, imsTriangleLinear1DOF, imsTriangleLinear2DOF, 
      imsQuadLinear1DOF, imsTriangleQuadratic1DOFSerendipity, 
      imsQuadQuadratic1DOFSerendipity,  imsTetrahedronLinear1DOF, 
      imsHexahedronLinear1DOF, imsTetrahedronQuadratic1DOFSerendipity, 
      imsHexahedronQuadratic1DOFSerendipity, imsTriangleP2, imsTriangleP1 };

imsElementFamily[ imsLineLinear1DOF ] = 
    imsElementFamily[ imsLineQuadratic1DOF ] = 
      imsElementFamily[ imsLineCubic1DOF ] ="imsLine";
imsElementFamily[ imsTriangleLinear1DOF ] = 
    imsElementFamily[ imsTriangleLinear2DOF ] = 
      imsElementFamily[ 
          imsTriangleQuadratic1DOFSerendipity ] = "imsTriangle";
imsElementFamily[ imsQuadLinear1DOF ] = 
    imsElementFamily[ imsQuadQuadratic1DOFSerendipity ] = "imsQuad";
imsElementFamily[ imsTetrahedronLinear1DOF ] =
    imsElementFamily[ 
        imsTetrahedronQuadratic1DOFSerendipity ] = "imsTetrahedron";
imsElementFamily[ imsHexahedronLinear1DOF ] = 
    imsElementFamily[ imsHexahedronQuadratic1DOFSerendipity ] = "imsHexahedron";

(* *)
(* private functions *)
(* *)





(* representors *)
SetAttributes[ imsDrawElementSolution, SequenceHold ];
Default[ imsDrawElementSolution, 2 ] = Sequence[ 1 ];



(* line *)
imsDrawElements[ te_imsLineLinear1DOF, nodes_ ]:= 
    Line[ imsGetCoords[ nodes ]/. {x_?NumericQ} \[Rule] { x, 0 } ];

imsDrawElementIdText[ te_imsLineLinear1DOF, nodes_ ] := 
    Text[  ToString[ imsGetIds[ te ] ], 
      Plus @@ (#/Length[#])& [
        imsGetCoords[ nodes ]/. {x_?NumericQ} \[Rule] { x, 0 } ], { -1, 
        0 } ];

imsDrawElementSolution[ te_imsLineLinear1DOF, part_., nodes_ ] := Line[ 
      Transpose[ 
        Join[ Transpose[ imsGetCoords[ nodes ]  ], { 
            Flatten[ imsGetValues[ nodes, part ] ] } ] ] 
      ];

imsDrawElements[ te_imsLineQuadratic1DOF, nodes_ ]:= 
    Line[ imsGetCoords[ nodes ]/. {x_?NumericQ} \[Rule] { x, 0 } ];

imsDrawElementIdText[ te_imsLineQuadratic1DOF, nodes_ ] := 
    Text[  ToString[ imsGetIds[ te ] ], 
      Plus @@ (#/Length[#])& [
        imsGetCoords[ nodes ]/. {x_?NumericQ} \[Rule] { x, 0 } ], { -1, 
        0 } ];

imsDrawElementSolution[ te_imsLineQuadratic1DOF, part_., nodes_ ] := Line[ 
      Transpose[ 
        Join[ Transpose[ imsGetCoords[ nodes ] ], { 
            Flatten[ imsGetValues[ nodes, part ] ] } ] ] 
      ];

imsDrawElements[ te_imsLineCubic1DOF, nodes_ ]:= 
    Line[ imsGetCoords[ nodes ]/. {x_?NumericQ} \[Rule] { x, 0 } ];

imsDrawElementIdText[ te_imsLineCubic1DOF, nodes_ ] := 
    Text[  ToString[ imsGetIds[ te ] ], 
      Plus @@ (#/Length[#])& [
        imsGetCoords[ nodes ]/. {x_?NumericQ} \[Rule] { x, 0 } ], { -1, 
        0 } ];

imsDrawElementSolution[ te_imsLineCubic1DOF, part_., nodes_ ] := Line[ 
      Transpose[ 
        Join[ Transpose[ imsGetCoords[ nodes ] ], { 
            Flatten[ imsGetValues[ nodes, part ] ] } ] ] 
      ];




(* triangle *)

imsDrawElements[ te_imsTriangleLinear1DOF, nodes_ ]:= 
    Line[ imsClosePolygon[ imsGetCoords[ nodes ] ] ];

imsDrawElementIdText[ te_imsTriangleLinear1DOF, nodes_ ] := 
    Text[  ToString[ imsGetIds[ te ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes ] ], { -1, 0 } ];

imsDrawElementSolution[ te_imsTriangleLinear1DOF, part_., nodes_ ] := 
    Polygon[ 
      Transpose[ 
        Join[ Transpose[ Map[ Take[ #,2 ]&, imsGetCoords[ nodes ] ]  ], { 
            Flatten[ imsGetValues[ nodes, part ] ] } ] ] 
      ];



(* imsTriangleLinear2DOF *)

imsDrawElements[ te_imsTriangleLinear2DOF, nodes_ ]:= 
    Line[ imsClosePolygon[ imsGetCoords[ nodes ] ] ];

imsDrawElementIdText[ te_imsTriangleLinear2DOF, nodes_ ] := 
  Text[  ToString[ imsGetIds[ te ] ], 
    Plus @@ (#/Length[#])& [imsGetCoords[ nodes[[ { 1,2,3} ]] ] ], { -1, 
      0 } ]

imsDrawElementSolution[ te_imsTriangleLinear2DOF, part_., nodes_ ] := 
    Line[ imsClosePolygon[
        imsGetCoords[ nodes ] + imsGetValues[ nodes, part ] ] 
      ];



(* quad *)
imsDrawElements[ qe_imsQuadLinear1DOF, nodes_ ]:= 
    Line[ imsClosePolygon[ imsGetCoords[ nodes ] ] ];

imsDrawElementIdText[ qe_imsQuadLinear1DOF, nodes_ ] := 
    Text[  ToString[ imsGetIds[ qe ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes ] ], { -1, 0 } ];

imsDrawElementSolution[ qe_imsQuadLinear1DOF, part_., nodes_ ] := Polygon[ 
      Transpose[ 
        Join[ Transpose[ Map[ Take[ #,2 ]&, imsGetCoords[ nodes ] ]  ],{ 
            Flatten[ imsGetValues[ nodes, part ] ] } ] ] 
      ];



(* imsTriangleQuadratic1DOFSerendipity *)

imsDrawElements[ te_imsTriangleQuadratic1DOFSerendipity, nodes_ ]:= 
    Line[ imsClosePolygon[ imsGetCoords[ nodes[[ { 1,4,2, 5, 3, 6 } ]] ] ] ];

imsDrawElementIdText[ te_imsTriangleQuadratic1DOFSerendipity, nodes_ ] := 
    Text[  ToString[ imsGetIds[ te ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes[[ { 1,2,3} ]] ] ], { -1, 
        0 } ];

imsDrawElementSolution[ te_imsTriangleQuadratic1DOFSerendipity, part_., 
      nodes_ ] := Polygon[ 
      Transpose[ 
        Join[ Transpose[ 
            Map[ Take[ #,2 ]&, imsGetCoords[ nodes[[ { 1, 2, 3 } ]] ] ]  ],{ 
            Flatten[ imsGetValues[ nodes[[ { 1, 2, 3 } ]], part ] ] } ] ] 
      ];




imsDrawElements[ qe_imsQuadQuadratic1DOFSerendipity, nodes_ ]:= 
    Line[ imsClosePolygon[ 
        imsGetCoords[ nodes[[ { 1, 5, 2, 6, 3, 7, 4, 8 } ]] ] ] ];

imsDrawElementIdText[ qe_imsQuadQuadratic1DOFSerendipity, nodes_ ] := 
    Text[  ToString[ imsGetIds[ qe ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes ] ], { -1, 0 } ];

imsDrawElementSolution[ qe_imsQuadQuadratic1DOFSerendipity, part_., nodes_ ] := 
    Polygon[ 
      Transpose[ 
        Join[ Transpose[ 
            Map[ Take[ #,2 ]&, imsGetCoords[ nodes[[ { 1,2,3,4 } ]] ] ]  ],{ 
            Flatten[ imsGetValues[ nodes[[ { 1,2,3,4 } ]], part ] ] } ] ] 
      ];




(* cubic *)

imsDrawElements[ te_imsTriangleCubic1DOFSerendipity, nodes_ ]:= 
    Line[ imsClosePolygon[ imsGetCoords[ nodes[[ Range[ 3 ] ]] ] ] ];

imsDrawElementIdText[ te_imsTriangleCubic1DOFSerendipity, nodes_ ] := 
    Text[  ToString[ imsGetIds[ te ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes[[ { 1, 2, 3 } ]] ] ], { -1, 
        0 } ];

imsDrawElementSolution[ te_imsTriangleCubic1DOFSerendipity, part_., nodes_ ] := 
    Polygon[ 
      Transpose[ 
        Join[ Transpose[ 
            Map[ Take[ #,2 ]&, imsGetCoords[ nodes[[ { 1, 2, 3 } ]] ] ]  ],{ 
            Flatten[ imsGetValues[ nodes[[ { 1, 2, 3 } ]], part ] ] } ] ] 
      ];




imsDrawElements[ qe_imsQuadCubic1DOF, nodes_ ]:= 
    Line[ imsClosePolygon[ imsGetCoords[ nodes[[ Range[ 4 ] ]] ] ] ];

imsDrawElementIdText[ qe_imsQuadCubic1DOF, nodes_ ] := 
    Text[  ToString[ imsGetIds[ qe ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes ] ], { -1, 0 } ];

imsDrawElementSolution[ qe_imsQuadCubic1DOF, part_., nodes_ ] := Polygon[ 
      Transpose[ 
        Join[ Transpose[ 
            Map[ Take[ #,2 ]&, imsGetCoords[ nodes[[{1,2,3,4}]] ] ]  ],{ 
            Flatten[ imsGetValues[ nodes[[{1,2,3,4}]], part ] ] } ] ] 
      ];



(* imsTetrahedron *)

imsDrawElements[ tet_imsTetrahedronLinear1DOF, nodes_ ] := 
    imsTetrahedron[ imsGetCoords[ nodes ] ];

imsDrawElementIdText[ tet_imsTetrahedronLinear1DOF, nodes_ ] := 
    Text[  ToString[ imsGetIds[ tet ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes ] ], { -1, 0 } ];

imsDrawElementSolution[ tet_imsTetrahedronLinear1DOF, part_., nodes_ ] := 
    CompoundExpression[ Message[ imsDrawElementSolution::"nimpl" ], {} ];

(* this will move !!! *)

imsTetrahedron[ { a_, b_, c_, d_ } ] := { Line[ { a,b,c,a } ], 
      Line[ {a, d} ], Line[ { b,d } ], Line[ { c,d } ]  };



(* Hexahedron *)

imsDrawElements[ hex_imsHexahedronLinear1DOF, nodes_ ] := 
    Hexahedron[ imsGetCoords[ nodes ] ];

imsDrawElementIdText[ hex_imsHexahedronLinear1DOF, nodes_ ] := 
    Text[  ToString[ imsGetIds[ hex ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes ] ], { -1, 0 } ];

imsDrawElementSolution[ hex_imsHexahedronLinear1DOF, part_., nodes_ ] := 
    CompoundExpression[ Message[ imsDrawElementSolution::"nimpl" ], {} ];

(* this will move !!! *)

Hexahedron[ { a_, b_, c_, d_, e_, f_, g_, h_ } ] := { 
    Line[ { a, b, c, d, a } ], Line[ { e, f, g, h, e } ], Line[ {a, e } ], 
    Line[ { b, f } ], Line[ { c, g } ], Line[ { d, h } ] }



(* quadratic *)

imsDrawElements[ tet_imsTetrahedronQuadratic1DOFSerendipity, nodes_ ] := 
    imsTetrahedron[ imsGetCoords[ nodes[[ Range[ 4 ] ]] ] ];

imsDrawElementIdText[ tet_imsTetrahedronQuadratic1DOFSerendipity, nodes_ ] := 
    Text[  ToString[ imsGetIds[ tet ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes ] ], { -1, 0 } ];

imsDrawElementSolution[ tet_imsTetrahedronQuadratic1DOFSerendipity, part_., 
      nodes_ ] := 
    CompoundExpression[ Message[ imsDrawElementSolution::"nimpl" ], {} ];




imsDrawElements[ hex_imsHexahedronQuadratic1DOFSerendipity, nodes_ ] := 
    Hexahedron[ imsGetCoords[ nodes[[ Range[ 8 ] ]] ] ];

imsDrawElementIdText[ hex_imsHexahedronQuadratic1DOFSerendipity, nodes_ ] := 
    Text[  ToString[ imsGetIds[ hex ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes ] ], { -1, 0 } ];

imsDrawElementSolution[ hex_imsHexahedronQuadratic1DOFSerendipity, part_., 
      nodes_ ] := 
    CompoundExpression[ Message[ imsDrawElementSolution::"nimpl" ], {} ];



(* mixed 2d p2p1 elements *)

imsDrawElements[ tri_imsTriangleP2, nodes_ ] := 
    Line[ imsClosePolygon[ imsGetCoords[ nodes[[ { 1, 2, 3 } ]] ] ] ];

imsDrawElementIdText[ tri_imsTriangleP2, nodes_ ] := 
    Text[  ToString[ imsGetIds[ tri ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes ] ], { -1, 0 } ];

imsDrawElementSolution[ tri_imsTriangleP2, part_., nodes_ ] :=  
    Polygon[ Transpose[ 
          Join[Transpose[
              Map[Take[#,2]&,imsGetCoords[nodes]]],{Flatten[
                imsGetValues[nodes,part]]}] ][[ { 1, 2, 3 } ]] ];

imsDrawElements[ tri_imsTriangleP1, nodes_ ] := 
    Line[ imsClosePolygon[ imsGetCoords[ nodes ] ] ];

imsDrawElementIdText[ tri_imsTriangleP1, nodes_ ] := 
    Text[  ToString[ imsGetIds[ tri ] ], 
      Plus @@ (#/Length[#])& [imsGetCoords[ nodes ] ], { -1, 0 } ];

imsDrawElementSolution[ tri_imsTriangleP1, part_., nodes_ ] := 
    Polygon[Transpose[
        Join[Transpose[
            Map[Take[#,2]&,imsGetCoords[nodes]]],{Flatten[
              imsGetValues[nodes,part]]}]]];



End[] (* of Begin Private *)



(* Protect[] (* anything *) *)
EndPackage[] 
